/* use-icon.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	assign,
	check_outros,
	create_component,
	destroy_component,
	detach,
	empty,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

import Icon from "./icon";
import Badge from "./badge";

function create_if_block(ctx) {
	let badge;
	let current;
	const badge_spread_levels = [/*icon*/ ctx[0].badge.props];

	let badge_props = {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	for (let i = 0; i < badge_spread_levels.length; i += 1) {
		badge_props = assign(badge_props, badge_spread_levels[i]);
	}

	badge = new Badge({ props: badge_props });

	return {
		c() {
			create_component(badge.$$.fragment);
		},
		m(target, anchor) {
			mount_component(badge, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_changes = (dirty & /*icon*/ 1)
			? get_spread_update(badge_spread_levels, [get_spread_object(/*icon*/ ctx[0].badge.props)])
			: {};

			if (dirty & /*$$scope, icon*/ 3) {
				badge_changes.$$scope = { dirty, ctx };
			}

			badge.$set(badge_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge, detaching);
		}
	};
}

// (10:4) <Badge {...icon.badge.props}>
function create_default_slot_1(ctx) {
	let t_value = /*icon*/ ctx[0].badge.content + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*icon*/ 1 && t_value !== (t_value = /*icon*/ ctx[0].badge.content + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (8:0) <Icon {...icon.props}>
function create_default_slot(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*icon*/ ctx[0].badge && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[0].badge) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*icon*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let icon_1;
	let current;
	const icon_1_spread_levels = [/*icon*/ ctx[0].props];

	let icon_1_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < icon_1_spread_levels.length; i += 1) {
		icon_1_props = assign(icon_1_props, icon_1_spread_levels[i]);
	}

	icon_1 = new Icon({ props: icon_1_props });

	return {
		c() {
			create_component(icon_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(icon_1, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const icon_1_changes = (dirty & /*icon*/ 1)
			? get_spread_update(icon_1_spread_levels, [get_spread_object(/*icon*/ ctx[0].props)])
			: {};

			if (dirty & /*$$scope, icon*/ 3) {
				icon_1_changes.$$scope = { dirty, ctx };
			}

			icon_1.$set(icon_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon_1, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { icon = undefined } = $$props;

	$$self.$$set = $$props => {
		if ("icon" in $$props) $$invalidate(0, icon = $$props.icon);
	};

	return [icon];
}

class Use_icon extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { icon: 0 });
	}
}

export default Use_icon;