/* toggle.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	assign,
	attr,
	binding_callbacks,
	compute_rest_props,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init as init_1,
	insert,
	is_function,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_attributes,
	space
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app, f7ready } from "../shared/f7";
import { useTooltip } from "../shared/use-tooltip";

function create_fragment(ctx) {
	let label;
	let input;
	let input_value_value;
	let t;
	let span;
	let useTooltip_action;
	let mounted;
	let dispose;
	let label_levels = [{ class: /*classes*/ ctx[9] }, restProps(/*$$restProps*/ ctx[11])];
	let label_data = {};

	for (let i = 0; i < label_levels.length; i += 1) {
		label_data = assign(label_data, label_levels[i]);
	}

	return {
		c() {
			label = element("label");
			input = element("input");
			t = space();
			span = element("span");
			attr(input, "type", "checkbox");
			attr(input, "name", /*name*/ ctx[3]);
			input.disabled = /*disabled*/ ctx[1];
			input.readOnly = /*readonly*/ ctx[2];
			input.checked = /*checked*/ ctx[0];

			input.value = input_value_value = typeof /*value*/ ctx[4] === "undefined"
			? ""
			: /*value*/ ctx[4];

			attr(span, "class", "toggle-icon");
			set_attributes(label, label_data);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, input);
			/*input_binding*/ ctx[15](input);
			append(label, t);
			append(label, span);
			/*label_binding*/ ctx[16](label);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*onChange*/ ctx[10]),
					action_destroyer(useTooltip_action = useTooltip.call(null, label, {
						tooltip: /*tooltip*/ ctx[5],
						tooltipTrigger: /*tooltipTrigger*/ ctx[6]
					}))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 8) {
				attr(input, "name", /*name*/ ctx[3]);
			}

			if (dirty & /*disabled*/ 2) {
				input.disabled = /*disabled*/ ctx[1];
			}

			if (dirty & /*readonly*/ 4) {
				input.readOnly = /*readonly*/ ctx[2];
			}

			if (dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (dirty & /*value*/ 16 && input_value_value !== (input_value_value = typeof /*value*/ ctx[4] === "undefined"
			? ""
			: /*value*/ ctx[4])) {
				input.value = input_value_value;
			}

			set_attributes(label, label_data = get_spread_update(label_levels, [
				dirty & /*classes*/ 512 && { class: /*classes*/ ctx[9] },
				dirty & /*$$restProps*/ 2048 && restProps(/*$$restProps*/ ctx[11])
			]));

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty & /*tooltip, tooltipTrigger*/ 96) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[5],
				tooltipTrigger: /*tooltipTrigger*/ ctx[6]
			});
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(label);
			/*input_binding*/ ctx[15](null);
			/*label_binding*/ ctx[16](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance_1($$self, $$props, $$invalidate) {
	let classes;

	const omit_props_names = [
		"class","init","checked","disabled","readonly","name","value","tooltip","tooltipTrigger","instance"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { init = true } = $$props;
	let { checked = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { readonly = undefined } = $$props;
	let { name = undefined } = $$props;
	let { value = undefined } = $$props;
	let { tooltip = undefined } = $$props;
	let { tooltipTrigger = undefined } = $$props;
	let el;
	let inputEl;
	let f7Toggle;

	function instance() {
		return f7Toggle;
	}

	let initialWatched = false;

	function watchChecked(isChecked) {
		if (!initialWatched) {
			initialWatched = true;
			return;
		}

		if (!f7Toggle) return;
		f7Toggle.checked = isChecked;
	}

	function onChange(event) {
		emit("change", [event]);
	}

	onMount(() => {
		if (!init) return;

		f7ready(() => {
			f7Toggle = app.f7.toggle.create({
				el,
				on: {
					change(toggle) {
						emit("toggleChange", [toggle.checked]);
						$$invalidate(0, checked = toggle.checked);
					}
				}
			});
		});
	});

	onDestroy(() => {
		if (f7Toggle && f7Toggle.destroy && f7Toggle.$el) {
			f7Toggle.destroy();
			f7Toggle = null;
		}
	});

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(8, inputEl);
		});
	}

	function label_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(7, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(21, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(12, className = $$new_props.class);
		if ("init" in $$new_props) $$invalidate(13, init = $$new_props.init);
		if ("checked" in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ("disabled" in $$new_props) $$invalidate(1, disabled = $$new_props.disabled);
		if ("readonly" in $$new_props) $$invalidate(2, readonly = $$new_props.readonly);
		if ("name" in $$new_props) $$invalidate(3, name = $$new_props.name);
		if ("value" in $$new_props) $$invalidate(4, value = $$new_props.value);
		if ("tooltip" in $$new_props) $$invalidate(5, tooltip = $$new_props.tooltip);
		if ("tooltipTrigger" in $$new_props) $$invalidate(6, tooltipTrigger = $$new_props.tooltipTrigger);
	};

	$$self.$$.update = () => {
		$: $$invalidate(9, classes = classNames("toggle", className, { disabled }, colorClasses($$props)));

		if ($$self.$$.dirty & /*checked*/ 1) {
			$: watchChecked(checked);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		checked,
		disabled,
		readonly,
		name,
		value,
		tooltip,
		tooltipTrigger,
		el,
		inputEl,
		classes,
		onChange,
		$$restProps,
		className,
		init,
		instance,
		input_binding,
		label_binding
	];
}

class Toggle extends SvelteComponent {
	constructor(options) {
		super();

		init_1(this, options, instance_1, create_fragment, safe_not_equal, {
			class: 12,
			init: 13,
			checked: 0,
			disabled: 1,
			readonly: 2,
			name: 3,
			value: 4,
			tooltip: 5,
			tooltipTrigger: 6,
			instance: 14
		});
	}

	get instance() {
		return this.$$.ctx[14];
	}
}

export default Toggle;