/* list-group.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { colorClasses } from "../shared/mixins";
import { classNames } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { setReactiveContext } from "../shared/set-reactive-context";
import { getReactiveContext } from "../shared/get-reactive-context";

function create_fragment(ctx) {
	let div;
	let ul;
	let div_data_sortable_move_elements_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	let div_levels = [
		{ class: /*classes*/ ctx[1] },
		{
			"data-sortable-move-elements": div_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[0] !== "undefined"
			? /*sortableMoveElements*/ ctx[0].toString()
			: undefined
		},
		restProps(/*$$restProps*/ ctx[2])
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
				(!current || dirty & /*sortableMoveElements*/ 1 && div_data_sortable_move_elements_value !== (div_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[0] !== "undefined"
				? /*sortableMoveElements*/ ctx[0].toString()
				: undefined)) && {
					"data-sortable-move-elements": div_data_sortable_move_elements_value
				},
				dirty & /*$$restProps*/ 4 && restProps(/*$$restProps*/ ctx[2])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;

	const omit_props_names = [
		"class","mediaList","sortable","sortableOpposite","sortableTapHold","sortableMoveElements","simpleList"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { mediaList = undefined } = $$props;
	let { sortable = undefined } = $$props;
	let { sortableOpposite = undefined } = $$props;
	let { sortableTapHold = false } = $$props;
	let { sortableMoveElements = undefined } = $$props;
	let { simpleList = undefined } = $$props;

	let ListContext = getReactiveContext("ListContext", value => {
		ListContext = value || {};
	}) || {};

	setReactiveContext("ListContext", () => ({
		listIsMedia: mediaList || ListContext.listIsMedia,
		listIsSimple: simpleList || ListContext.listIsSimple,
		listIsSortable: sortable || ListContext.listIsSortable,
		listIsSortableOpposite: sortableOpposite || ListContext.listIsSortableOpposite
	}));

	$$self.$$set = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ("mediaList" in $$new_props) $$invalidate(4, mediaList = $$new_props.mediaList);
		if ("sortable" in $$new_props) $$invalidate(5, sortable = $$new_props.sortable);
		if ("sortableOpposite" in $$new_props) $$invalidate(6, sortableOpposite = $$new_props.sortableOpposite);
		if ("sortableTapHold" in $$new_props) $$invalidate(7, sortableTapHold = $$new_props.sortableTapHold);
		if ("sortableMoveElements" in $$new_props) $$invalidate(0, sortableMoveElements = $$new_props.sortableMoveElements);
		if ("simpleList" in $$new_props) $$invalidate(8, simpleList = $$new_props.simpleList);
		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(1, classes = classNames(
			className,
			"list-group",
			{
				"media-list": mediaList,
				sortable,
				"sortable-tap-hold": sortableTapHold,
				"sortable-opposite": sortableOpposite
			},
			colorClasses($$props)
		));
	};

	$$props = exclude_internal_props($$props);

	return [
		sortableMoveElements,
		classes,
		$$restProps,
		className,
		mediaList,
		sortable,
		sortableOpposite,
		sortableTapHold,
		simpleList,
		$$scope,
		slots
	];
}

class List_group extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 3,
			mediaList: 4,
			sortable: 5,
			sortableOpposite: 6,
			sortableTapHold: 7,
			sortableMoveElements: 0,
			simpleList: 8
		});
	}
}

export default List_group;