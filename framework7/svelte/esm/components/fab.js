/* fab.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	is_function,
	listen,
	run_all,
	safe_not_equal,
	set_attributes,
	set_data,
	space,
	text as text_1,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, afterUpdate } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, plainText, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app, f7ready } from "../shared/f7";
import { useTooltip } from "../shared/use-tooltip";
const get_root_slot_changes = dirty => ({});
const get_root_slot_context = ctx => ({});
const get_link_slot_changes = dirty => ({});
const get_link_slot_context = ctx => ({});
const get_text_slot_changes = dirty => ({});
const get_text_slot_context = ctx => ({});

// (81:4) {#if typeof text !== 'undefined' || hasTextSlots}
function create_if_block(ctx) {
	let div;
	let t0_value = plainText(/*text*/ ctx[2]) + "";
	let t0;
	let t1;
	let current;
	const text_slot_template = /*#slots*/ ctx[18].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[17], get_text_slot_context);

	return {
		c() {
			div = element("div");
			t0 = text_1(t0_value);
			t1 = space();
			if (text_slot) text_slot.c();
			attr(div, "class", "fab-text");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (text_slot) {
				text_slot.m(div, null);
			}

			/*div_binding*/ ctx[19](div);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*text*/ 4) && t0_value !== (t0_value = plainText(/*text*/ ctx[2]) + "")) set_data(t0, t0_value);

			if (text_slot) {
				if (text_slot.p && (!current || dirty & /*$$scope*/ 131072)) {
					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[17], dirty, get_text_slot_changes, get_text_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(text_slot, local);
			current = true;
		},
		o(local) {
			transition_out(text_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (text_slot) text_slot.d(detaching);
			/*div_binding*/ ctx[19](null);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let a;
	let t0;
	let t1;
	let useTooltip_action;
	let t2;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], null);
	let if_block = (typeof /*text*/ ctx[2] !== "undefined" || /*hasTextSlots*/ ctx[7]) && create_if_block(ctx);
	const link_slot_template = /*#slots*/ ctx[18].link;
	const link_slot = create_slot(link_slot_template, ctx, /*$$scope*/ ctx[17], get_link_slot_context);
	const root_slot_template = /*#slots*/ ctx[18].root;
	const root_slot = create_slot(root_slot_template, ctx, /*$$scope*/ ctx[17], get_root_slot_context);

	let div_levels = [
		{ class: /*classes*/ ctx[11] },
		{ "data-morph-to": /*morphTo*/ ctx[0] },
		{ "data-f7-slot": /*f7Slot*/ ctx[5] },
		restProps(/*$$restProps*/ ctx[13])
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			a = element("a");
			if (default_slot) default_slot.c();
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			if (link_slot) link_slot.c();
			t2 = space();
			if (root_slot) root_slot.c();
			attr(a, "target", /*target*/ ctx[1]);
			attr(a, "href", /*hrefComputed*/ ctx[10]);
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, a);

			if (default_slot) {
				default_slot.m(a, null);
			}

			append(a, t0);
			if (if_block) if_block.m(a, null);
			append(a, t1);

			if (link_slot) {
				link_slot.m(a, null);
			}

			/*a_binding*/ ctx[20](a);
			append(div, t2);

			if (root_slot) {
				root_slot.m(div, null);
			}

			/*div_binding_1*/ ctx[21](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*onClick*/ ctx[12]),
					action_destroyer(useTooltip_action = useTooltip.call(null, a, {
						tooltip: /*tooltip*/ ctx[3],
						tooltipTrigger: /*tooltipTrigger*/ ctx[4]
					}))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 131072)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[17], dirty, null, null);
				}
			}

			if (typeof /*text*/ ctx[2] !== "undefined" || /*hasTextSlots*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*text, hasTextSlots*/ 132) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(a, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (link_slot) {
				if (link_slot.p && (!current || dirty & /*$$scope*/ 131072)) {
					update_slot(link_slot, link_slot_template, ctx, /*$$scope*/ ctx[17], dirty, get_link_slot_changes, get_link_slot_context);
				}
			}

			if (!current || dirty & /*target*/ 2) {
				attr(a, "target", /*target*/ ctx[1]);
			}

			if (!current || dirty & /*hrefComputed*/ 1024) {
				attr(a, "href", /*hrefComputed*/ ctx[10]);
			}

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty & /*tooltip, tooltipTrigger*/ 24) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[3],
				tooltipTrigger: /*tooltipTrigger*/ ctx[4]
			});

			if (root_slot) {
				if (root_slot.p && (!current || dirty & /*$$scope*/ 131072)) {
					update_slot(root_slot, root_slot_template, ctx, /*$$scope*/ ctx[17], dirty, get_root_slot_changes, get_root_slot_context);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes*/ 2048) && { class: /*classes*/ ctx[11] },
				(!current || dirty & /*morphTo*/ 1) && { "data-morph-to": /*morphTo*/ ctx[0] },
				(!current || dirty & /*f7Slot*/ 32) && { "data-f7-slot": /*f7Slot*/ ctx[5] },
				dirty & /*$$restProps*/ 8192 && restProps(/*$$restProps*/ ctx[13])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			transition_in(link_slot, local);
			transition_in(root_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			transition_out(link_slot, local);
			transition_out(root_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			if (link_slot) link_slot.d(detaching);
			/*a_binding*/ ctx[20](null);
			if (root_slot) root_slot.d(detaching);
			/*div_binding_1*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let hrefComputed;
	let hasTextSlots;
	let classes;

	const omit_props_names = [
		"class","morphTo","href","target","text","position","tooltip","tooltipTrigger","f7Slot"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { morphTo = undefined } = $$props;
	let { href = undefined } = $$props;
	let { target = undefined } = $$props;
	let { text = undefined } = $$props;
	let { position = "right-bottom" } = $$props;
	let { tooltip = undefined } = $$props;
	let { tooltipTrigger = undefined } = $$props;
	let { f7Slot = "fixed" } = $$props;
	let el;
	let linkEl;
	let textEl;

	function onClick() {
		emit("click");
	}

	onMount(() => {
		f7ready(() => {
			const dom7 = app.f7.$;
			const rootEls = dom7(linkEl).children(".fab-buttons");

			if (rootEls.length) {
				dom7(el).append(rootEls);
			}
		});
	});

	afterUpdate(() => {
		if (!app.f7) return;
		const dom7 = app.f7.$;
		const rootEls = dom7(linkEl).children(".fab-buttons");

		if (rootEls.length) {
			dom7(el).append(rootEls);
		}
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			textEl = $$value;
			$$invalidate(6, textEl);
		});
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			linkEl = $$value;
			$$invalidate(9, linkEl);
		});
	}

	function div_binding_1($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(8, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(23, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(13, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(14, className = $$new_props.class);
		if ("morphTo" in $$new_props) $$invalidate(0, morphTo = $$new_props.morphTo);
		if ("href" in $$new_props) $$invalidate(15, href = $$new_props.href);
		if ("target" in $$new_props) $$invalidate(1, target = $$new_props.target);
		if ("text" in $$new_props) $$invalidate(2, text = $$new_props.text);
		if ("position" in $$new_props) $$invalidate(16, position = $$new_props.position);
		if ("tooltip" in $$new_props) $$invalidate(3, tooltip = $$new_props.tooltip);
		if ("tooltipTrigger" in $$new_props) $$invalidate(4, tooltipTrigger = $$new_props.tooltipTrigger);
		if ("f7Slot" in $$new_props) $$invalidate(5, f7Slot = $$new_props.f7Slot);
		if ("$$scope" in $$new_props) $$invalidate(17, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*href*/ 32768) {
			$: $$invalidate(10, hrefComputed = href === true ? "#" : href || undefined);
		}

		$: $$invalidate(11, classes = classNames(
			className,
			"fab",
			`fab-${position}`,
			{
				"fab-morph": morphTo,
				"fab-extended": text || hasTextSlots || typeof textEl !== "undefined"
			},
			colorClasses($$props)
		));
	};

	$: $$invalidate(7, hasTextSlots = $$slots.text);
	$$props = exclude_internal_props($$props);

	return [
		morphTo,
		target,
		text,
		tooltip,
		tooltipTrigger,
		f7Slot,
		textEl,
		hasTextSlots,
		el,
		linkEl,
		hrefComputed,
		classes,
		onClick,
		$$restProps,
		className,
		href,
		position,
		$$scope,
		slots,
		div_binding,
		a_binding,
		div_binding_1
	];
}

class Fab extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 14,
			morphTo: 0,
			href: 15,
			target: 1,
			text: 2,
			position: 16,
			tooltip: 3,
			tooltipTrigger: 4,
			f7Slot: 5
		});
	}
}

export default Fab;