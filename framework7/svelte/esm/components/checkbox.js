/* checkbox.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	listen,
	safe_not_equal,
	set_attributes,
	space,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, afterUpdate } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";

function create_fragment(ctx) {
	let label;
	let input;
	let input_value_value;
	let t0;
	let i;
	let t1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
	let label_levels = [{ class: /*classes*/ ctx[6] }, restProps(/*$$restProps*/ ctx[8])];
	let label_data = {};

	for (let i = 0; i < label_levels.length; i += 1) {
		label_data = assign(label_data, label_levels[i]);
	}

	return {
		c() {
			label = element("label");
			input = element("input");
			t0 = space();
			i = element("i");
			t1 = space();
			if (default_slot) default_slot.c();
			attr(input, "type", "checkbox");
			attr(input, "name", /*name*/ ctx[1]);

			input.value = input_value_value = typeof /*value*/ ctx[2] === "undefined"
			? ""
			: /*value*/ ctx[2];

			input.disabled = /*disabled*/ ctx[3];
			input.readOnly = /*readonly*/ ctx[4];
			input.checked = /*checked*/ ctx[0];
			attr(i, "class", "icon-checkbox");
			set_attributes(label, label_data);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, input);
			/*input_binding*/ ctx[13](input);
			append(label, t0);
			append(label, i);
			append(label, t1);

			if (default_slot) {
				default_slot.m(label, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(input, "change", /*onChange*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*name*/ 2) {
				attr(input, "name", /*name*/ ctx[1]);
			}

			if (!current || dirty & /*value*/ 4 && input_value_value !== (input_value_value = typeof /*value*/ ctx[2] === "undefined"
			? ""
			: /*value*/ ctx[2])) {
				input.value = input_value_value;
			}

			if (!current || dirty & /*disabled*/ 8) {
				input.disabled = /*disabled*/ ctx[3];
			}

			if (!current || dirty & /*readonly*/ 16) {
				input.readOnly = /*readonly*/ ctx[4];
			}

			if (!current || dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
				}
			}

			set_attributes(label, label_data = get_spread_update(label_levels, [
				(!current || dirty & /*classes*/ 64) && { class: /*classes*/ ctx[6] },
				dirty & /*$$restProps*/ 256 && restProps(/*$$restProps*/ ctx[8])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			/*input_binding*/ ctx[13](null);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class","checked","indeterminate","name","value","disabled","readonly"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { checked = undefined } = $$props;
	let { indeterminate = undefined } = $$props;
	let { name = undefined } = $$props;
	let { value = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { readonly = undefined } = $$props;
	let inputEl;

	function onChange(event) {
		emit("change", [event]);
		$$invalidate(0, checked = event.target.checked);
	}

	onMount(() => {
		if (indeterminate && inputEl) {
			$$invalidate(5, inputEl.indeterminate = true, inputEl);
		}
	});

	afterUpdate(() => {
		if (inputEl) {
			$$invalidate(5, inputEl.indeterminate = indeterminate, inputEl);
		}
	});

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(5, inputEl);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(15, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(9, className = $$new_props.class);
		if ("checked" in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ("indeterminate" in $$new_props) $$invalidate(10, indeterminate = $$new_props.indeterminate);
		if ("name" in $$new_props) $$invalidate(1, name = $$new_props.name);
		if ("value" in $$new_props) $$invalidate(2, value = $$new_props.value);
		if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("readonly" in $$new_props) $$invalidate(4, readonly = $$new_props.readonly);
		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(6, classes = classNames(className, { checkbox: true, disabled }, colorClasses($$props)));
	};

	$$props = exclude_internal_props($$props);

	return [
		checked,
		name,
		value,
		disabled,
		readonly,
		inputEl,
		classes,
		onChange,
		$$restProps,
		className,
		indeterminate,
		$$scope,
		slots,
		input_binding
	];
}

class Checkbox extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 9,
			checked: 0,
			indeterminate: 10,
			name: 1,
			value: 2,
			disabled: 3,
			readonly: 4
		});
	}
}

export default Checkbox;