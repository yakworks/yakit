/* icon.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	assign,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	is_function,
	safe_not_equal,
	set_attributes,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { colorClasses } from "../shared/mixins";
import { classNames } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { useTooltip } from "../shared/use-tooltip";
import { useTheme } from "../shared/use-theme";

function create_fragment(ctx) {
	let i;
	let t0_value = (/*iconText*/ ctx[4] || "") + "";
	let t0;
	let t1;
	let useTooltip_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[21].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);

	let i_levels = [
		{ style: /*iconStyle*/ ctx[5] },
		{ class: /*iconClasses*/ ctx[3] },
		restProps(/*$$restProps*/ ctx[6])
	];

	let i_data = {};

	for (let i = 0; i < i_levels.length; i += 1) {
		i_data = assign(i_data, i_levels[i]);
	}

	return {
		c() {
			i = element("i");
			t0 = text(t0_value);
			t1 = space();
			if (default_slot) default_slot.c();
			set_attributes(i, i_data);
		},
		m(target, anchor) {
			insert(target, i, anchor);
			append(i, t0);
			append(i, t1);

			if (default_slot) {
				default_slot.m(i, null);
			}

			/*i_binding*/ ctx[22](i);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(useTooltip_action = useTooltip.call(null, i, {
					tooltip: /*tooltip*/ ctx[0],
					tooltipTrigger: /*tooltipTrigger*/ ctx[1]
				}));

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*iconText*/ 16) && t0_value !== (t0_value = (/*iconText*/ ctx[4] || "") + "")) set_data(t0, t0_value);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1048576)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[20], dirty, null, null);
				}
			}

			set_attributes(i, i_data = get_spread_update(i_levels, [
				(!current || dirty & /*iconStyle*/ 32) && { style: /*iconStyle*/ ctx[5] },
				(!current || dirty & /*iconClasses*/ 8) && { class: /*iconClasses*/ ctx[3] },
				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
			]));

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty & /*tooltip, tooltipTrigger*/ 3) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[0],
				tooltipTrigger: /*tooltipTrigger*/ ctx[1]
			});
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(i);
			if (default_slot) default_slot.d(detaching);
			/*i_binding*/ ctx[22](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let iconClasses;
	let iconText;
	let iconSize;
	let iconStyle;

	const omit_props_names = [
		"style","class","material","f7","icon","ios","aurora","md","tooltip","tooltipTrigger","size"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { style = undefined } = $$props;
	let { class: className = undefined } = $$props;
	let { material = undefined } = $$props;
	let { f7 = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { ios = undefined } = $$props;
	let { aurora = undefined } = $$props;
	let { md = undefined } = $$props;
	let { tooltip = undefined } = $$props;
	let { tooltipTrigger = undefined } = $$props;
	let { size = undefined } = $$props;
	let el;

	let theme = useTheme(t => {
		$$invalidate(16, theme = t);
	});

	let classes = { icon: true };
	let themeIcon;

	function iconTextComputed(t) {
		let textComputed = material || f7;

		if (md && t && t.md && (md.indexOf("material:") >= 0 || md.indexOf("f7:") >= 0)) {
			textComputed = md.split(":")[1];
		} else if (ios && t && t.ios && (ios.indexOf("material:") >= 0 || ios.indexOf("f7:") >= 0)) {
			textComputed = ios.split(":")[1];
		} else if (aurora && t && t.aurora && (aurora.indexOf("material:") >= 0 || aurora.indexOf("f7:") >= 0)) {
			textComputed = aurora.split(":")[1];
		}

		return textComputed;
	}

	function i_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(2, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(24, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("style" in $$new_props) $$invalidate(7, style = $$new_props.style);
		if ("class" in $$new_props) $$invalidate(8, className = $$new_props.class);
		if ("material" in $$new_props) $$invalidate(9, material = $$new_props.material);
		if ("f7" in $$new_props) $$invalidate(10, f7 = $$new_props.f7);
		if ("icon" in $$new_props) $$invalidate(11, icon = $$new_props.icon);
		if ("ios" in $$new_props) $$invalidate(12, ios = $$new_props.ios);
		if ("aurora" in $$new_props) $$invalidate(13, aurora = $$new_props.aurora);
		if ("md" in $$new_props) $$invalidate(14, md = $$new_props.md);
		if ("tooltip" in $$new_props) $$invalidate(0, tooltip = $$new_props.tooltip);
		if ("tooltipTrigger" in $$new_props) $$invalidate(1, tooltipTrigger = $$new_props.tooltipTrigger);
		if ("size" in $$new_props) $$invalidate(15, size = $$new_props.size);
		if ("$$scope" in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*theme, ios, md, aurora*/ 94208) {
			$: if (theme) {
				if (theme.ios) $$invalidate(18, themeIcon = ios);
				if (theme.md) $$invalidate(18, themeIcon = md);
				if (theme.aurora) $$invalidate(18, themeIcon = aurora);
			}
		}

		if ($$self.$$.dirty & /*themeIcon, material, f7, icon*/ 265728) {
			$: if (themeIcon) {
				const parts = themeIcon.split(":");
				const prop = parts[0];
				const value = parts[1];

				if (prop === "material" || prop === "f7") {
					$$invalidate(17, classes["material-icons"] = prop === "material", classes);
					$$invalidate(17, classes["f7-icons"] = prop === "f7", classes);
				}

				if (prop === "icon") {
					$$invalidate(17, classes[value] = true, classes);
				}
			} else {
				$$invalidate(17, classes = {
					icon: true,
					"material-icons": material,
					"f7-icons": f7
				});

				if (icon) $$invalidate(17, classes[icon] = true, classes);
			}
		}

		$: $$invalidate(3, iconClasses = classNames(className, classes, colorClasses($$props)));

		if ($$self.$$.dirty & /*theme*/ 65536) {
			$: $$invalidate(4, iconText = iconTextComputed(theme));
		}

		if ($$self.$$.dirty & /*size*/ 32768) {
			$: $$invalidate(19, iconSize = typeof size === "number" || parseFloat(size) === size * 1
			? `${size}px`
			: size);
		}

		if ($$self.$$.dirty & /*style, iconSize*/ 524416) {
			$: $$invalidate(5, iconStyle = (style || "") + (iconSize
			? `;font-size: ${iconSize}; width: ${iconSize}; height: ${iconSize}`.replace(";;", "")
			: ""));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		tooltip,
		tooltipTrigger,
		el,
		iconClasses,
		iconText,
		iconStyle,
		$$restProps,
		style,
		className,
		material,
		f7,
		icon,
		ios,
		aurora,
		md,
		size,
		theme,
		classes,
		themeIcon,
		iconSize,
		$$scope,
		slots,
		i_binding
	];
}

class Icon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			style: 7,
			class: 8,
			material: 9,
			f7: 10,
			icon: 11,
			ios: 12,
			aurora: 13,
			md: 14,
			tooltip: 0,
			tooltipTrigger: 1,
			size: 15
		});
	}
}

export default Icon;