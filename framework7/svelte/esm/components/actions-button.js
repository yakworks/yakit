/* actions-button.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	safe_not_equal,
	set_attributes,
	space,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app } from "../shared/f7";
const get_media_slot_changes = dirty => ({});
const get_media_slot_context = ctx => ({});

// (41:2) {#if hasMediaSlots}
function create_if_block(ctx) {
	let div;
	let current;
	const media_slot_template = /*#slots*/ ctx[9].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[8], get_media_slot_context);

	return {
		c() {
			div = element("div");
			if (media_slot) media_slot.c();
			attr(div, "class", "actions-button-media");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (media_slot) {
				media_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (media_slot) {
				if (media_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[8], dirty, get_media_slot_changes, get_media_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(media_slot, local);
			current = true;
		},
		o(local) {
			transition_out(media_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (media_slot) media_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let t;
	let div0;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasMediaSlots*/ ctx[1] && create_if_block(ctx);
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);
	let div1_levels = [{ class: /*classes*/ ctx[2] }, restProps(/*$$restProps*/ ctx[4])];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t = space();
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "class", "actions-button-text");
			set_attributes(div1, div1_data);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div1_binding*/ ctx[10](div1);
			current = true;

			if (!mounted) {
				dispose = listen(div1, "click", /*onClick*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*hasMediaSlots*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*hasMediaSlots*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
				}
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] },
				dirty & /*$$restProps*/ 16 && restProps(/*$$restProps*/ ctx[4])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			/*div1_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let hasMediaSlots;
	let classes;
	const omit_props_names = ["class","bold","close"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { bold = false } = $$props;
	let { close = true } = $$props;
	let el;

	function onClick() {
		if (close && app.f7) {
			const dom7 = app.f7.$;
			app.f7.actions.close(dom7(el).parents(".actions-modal"));
		}

		emit("click");
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(0, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ("bold" in $$new_props) $$invalidate(6, bold = $$new_props.bold);
		if ("close" in $$new_props) $$invalidate(7, close = $$new_props.close);
		if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(2, classes = classNames(
			className,
			{
				"actions-button": true,
				"actions-button-bold": bold
			},
			colorClasses($$props)
		));
	};

	$: $$invalidate(1, hasMediaSlots = $$slots.media);
	$$props = exclude_internal_props($$props);

	return [
		el,
		hasMediaSlots,
		classes,
		onClick,
		$$restProps,
		className,
		bold,
		close,
		$$scope,
		slots,
		div1_binding
	];
}

class Actions_button extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { class: 5, bold: 6, close: 7 });
	}
}

export default Actions_button;