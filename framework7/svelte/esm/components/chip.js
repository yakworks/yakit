/* chip.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_attributes,
	set_data,
	space,
	text as text_1,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, plainText, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { useTooltip } from "../shared/use-tooltip";
import { useIcon } from "../shared/use-icon";
import UseIcon from "./use-icon";
const get_text_slot_changes = dirty => ({});
const get_text_slot_context = ctx => ({});
const get_media_slot_changes = dirty => ({});
const get_media_slot_context = ctx => ({});

// (70:2) {#if media || hasMediaSlots || icon}
function create_if_block_2(ctx) {
	let div;
	let t0;
	let t1_value = plainText(/*media*/ ctx[0]) + "";
	let t1;
	let t2;
	let current;
	let if_block = /*icon*/ ctx[11] && create_if_block_3(ctx);
	const media_slot_template = /*#slots*/ ctx[20].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[19], get_media_slot_context);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t0 = space();
			t1 = text_1(t1_value);
			t2 = space();
			if (media_slot) media_slot.c();
			attr(div, "class", /*mediaClasses*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t0);
			append(div, t1);
			append(div, t2);

			if (media_slot) {
				media_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[11]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*icon*/ 2048) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if ((!current || dirty & /*media*/ 1) && t1_value !== (t1_value = plainText(/*media*/ ctx[0]) + "")) set_data(t1, t1_value);

			if (media_slot) {
				if (media_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_media_slot_changes, get_media_slot_context);
				}
			}

			if (!current || dirty & /*mediaClasses*/ 128) {
				attr(div, "class", /*mediaClasses*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(media_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(media_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (media_slot) media_slot.d(detaching);
		}
	};
}

// (72:6) {#if icon}
function create_if_block_3(ctx) {
	let useicon;
	let current;
	useicon = new UseIcon({ props: { icon: /*icon*/ ctx[11] } });

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty & /*icon*/ 2048) useicon_changes.icon = /*icon*/ ctx[11];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (79:2) {#if text || hasTextSlots || hasDefaultSlots}
function create_if_block_1(ctx) {
	let div;
	let t0_value = plainText(/*text*/ ctx[1]) + "";
	let t0;
	let t1;
	let t2;
	let current;
	const text_slot_template = /*#slots*/ ctx[20].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[19], get_text_slot_context);
	const default_slot_template = /*#slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

	return {
		c() {
			div = element("div");
			t0 = text_1(t0_value);
			t1 = space();
			if (text_slot) text_slot.c();
			t2 = space();
			if (default_slot) default_slot.c();
			attr(div, "class", "chip-label");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (text_slot) {
				text_slot.m(div, null);
			}

			append(div, t2);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*text*/ 2) && t0_value !== (t0_value = plainText(/*text*/ ctx[1]) + "")) set_data(t0, t0_value);

			if (text_slot) {
				if (text_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_text_slot_changes, get_text_slot_context);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(text_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(text_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (text_slot) text_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (86:2) {#if deleteable}
function create_if_block(ctx) {
	let a;
	let mounted;
	let dispose;

	return {
		c() {
			a = element("a");
			attr(a, "class", "chip-delete");
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (!mounted) {
				dispose = listen(a, "click", /*onDeleteClick*/ ctx[13]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let t1;
	let useTooltip_action;
	let current;
	let mounted;
	let dispose;
	let if_block0 = (/*media*/ ctx[0] || /*hasMediaSlots*/ ctx[8] || /*icon*/ ctx[11]) && create_if_block_2(ctx);
	let if_block1 = (/*text*/ ctx[1] || /*hasTextSlots*/ ctx[9] || /*hasDefaultSlots*/ ctx[10]) && create_if_block_1(ctx);
	let if_block2 = /*deleteable*/ ctx[2] && create_if_block(ctx);
	let div_levels = [{ class: /*classes*/ ctx[6] }, restProps(/*$$restProps*/ ctx[14])];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);
			if (if_block2) if_block2.m(div, null);
			/*div_binding*/ ctx[21](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*onClick*/ ctx[12]),
					action_destroyer(useTooltip_action = useTooltip.call(null, div, {
						tooltip: /*tooltip*/ ctx[3],
						tooltipTrigger: /*tooltipTrigger*/ ctx[4]
					}))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*media*/ ctx[0] || /*hasMediaSlots*/ ctx[8] || /*icon*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*media, hasMediaSlots, icon*/ 2305) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*text*/ ctx[1] || /*hasTextSlots*/ ctx[9] || /*hasDefaultSlots*/ ctx[10]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*text, hasTextSlots, hasDefaultSlots*/ 1538) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*deleteable*/ ctx[2]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes*/ 64) && { class: /*classes*/ ctx[6] },
				dirty & /*$$restProps*/ 16384 && restProps(/*$$restProps*/ ctx[14])
			]));

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty & /*tooltip, tooltipTrigger*/ 24) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[3],
				tooltipTrigger: /*tooltipTrigger*/ ctx[4]
			});
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			/*div_binding*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;
	let mediaClasses;
	let hasMediaSlots;
	let hasTextSlots;
	let hasDefaultSlots;
	let icon;

	const omit_props_names = [
		"class","media","text","deleteable","mediaBgColor","mediaTextColor","outline","tooltip","tooltipTrigger"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { media = undefined } = $$props;
	let { text = undefined } = $$props;
	let { deleteable = undefined } = $$props;
	let { mediaBgColor = undefined } = $$props;
	let { mediaTextColor = undefined } = $$props;
	let { outline = undefined } = $$props;
	let { tooltip = undefined } = $$props;
	let { tooltipTrigger = undefined } = $$props;
	let el;

	function onClick(e) {
		emit("click", [e]);
	}

	function onDeleteClick(e) {
		emit("delete", [e]);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(5, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(23, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(14, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(15, className = $$new_props.class);
		if ("media" in $$new_props) $$invalidate(0, media = $$new_props.media);
		if ("text" in $$new_props) $$invalidate(1, text = $$new_props.text);
		if ("deleteable" in $$new_props) $$invalidate(2, deleteable = $$new_props.deleteable);
		if ("mediaBgColor" in $$new_props) $$invalidate(16, mediaBgColor = $$new_props.mediaBgColor);
		if ("mediaTextColor" in $$new_props) $$invalidate(17, mediaTextColor = $$new_props.mediaTextColor);
		if ("outline" in $$new_props) $$invalidate(18, outline = $$new_props.outline);
		if ("tooltip" in $$new_props) $$invalidate(3, tooltip = $$new_props.tooltip);
		if ("tooltipTrigger" in $$new_props) $$invalidate(4, tooltipTrigger = $$new_props.tooltipTrigger);
		if ("$$scope" in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(6, classes = classNames(className, "chip", { "chip-outline": outline }, colorClasses($$props)));

		if ($$self.$$.dirty & /*mediaTextColor, mediaBgColor*/ 196608) {
			$: $$invalidate(7, mediaClasses = classNames("chip-media", mediaTextColor && `text-color-${mediaTextColor}`, mediaBgColor && `bg-color-${mediaBgColor}`));
		}

		$: $$invalidate(11, icon = useIcon($$props));
	};

	$: $$invalidate(8, hasMediaSlots = $$slots.media);

	// eslint-disable-next-line
	$: $$invalidate(9, hasTextSlots = $$slots.text);

	// eslint-disable-next-line
	$: $$invalidate(10, hasDefaultSlots = $$slots.default);

	$$props = exclude_internal_props($$props);

	return [
		media,
		text,
		deleteable,
		tooltip,
		tooltipTrigger,
		el,
		classes,
		mediaClasses,
		hasMediaSlots,
		hasTextSlots,
		hasDefaultSlots,
		icon,
		onClick,
		onDeleteClick,
		$$restProps,
		className,
		mediaBgColor,
		mediaTextColor,
		outline,
		$$scope,
		slots,
		div_binding
	];
}

class Chip extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 15,
			media: 0,
			text: 1,
			deleteable: 2,
			mediaBgColor: 16,
			mediaTextColor: 17,
			outline: 18,
			tooltip: 3,
			tooltipTrigger: 4
		});
	}
}

export default Chip;