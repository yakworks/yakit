/* list.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_slot,
	detach,
	element,
	empty,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	safe_not_equal,
	set_attributes,
	space,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, extend, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app, f7ready } from "../shared/f7";
import { useTab } from "../shared/use-tab";
import { setReactiveContext } from "../shared/set-reactive-context";
const get_after_list_slot_changes_1 = dirty => ({});
const get_after_list_slot_context_1 = ctx => ({});
const get_list_slot_changes_1 = dirty => ({});
const get_list_slot_context_1 = ctx => ({});
const get_before_list_slot_changes_1 = dirty => ({});
const get_before_list_slot_context_1 = ctx => ({});
const get_after_list_slot_changes = dirty => ({});
const get_after_list_slot_context = ctx => ({});
const get_list_slot_changes = dirty => ({});
const get_list_slot_context = ctx => ({});
const get_before_list_slot_changes = dirty => ({});
const get_before_list_slot_context = ctx => ({});

// (211:0) {:else}
function create_else_block_1(ctx) {
	let div;
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let div_data_sortable_move_elements_value;
	let current;
	const before_list_slot_template = /*#slots*/ ctx[44]["before-list"];
	const before_list_slot = create_slot(before_list_slot_template, ctx, /*$$scope*/ ctx[43], get_before_list_slot_context_1);
	const if_block_creators = [create_if_block_2, create_else_block_2];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*hasUlSlots*/ ctx[4] && /*ul*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx, [-1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const after_list_slot_template = /*#slots*/ ctx[44]["after-list"];
	const after_list_slot = create_slot(after_list_slot_template, ctx, /*$$scope*/ ctx[43], get_after_list_slot_context_1);

	let div_levels = [
		{ class: /*classes*/ ctx[5] },
		{
			"data-sortable-move-elements": div_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[1] !== "undefined"
			? /*sortableMoveElements*/ ctx[1].toString()
			: undefined
		},
		restProps(/*$$restProps*/ ctx[7])
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (before_list_slot) before_list_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();
			if (after_list_slot) after_list_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (before_list_slot) {
				before_list_slot.m(div, null);
			}

			append(div, t0);
			if_blocks[current_block_type_index].m(div, null);
			append(div, t1);

			if (after_list_slot) {
				after_list_slot.m(div, null);
			}

			/*div_binding*/ ctx[46](div);
			current = true;
		},
		p(ctx, dirty) {
			if (before_list_slot) {
				if (before_list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot(before_list_slot, before_list_slot_template, ctx, /*$$scope*/ ctx[43], dirty, get_before_list_slot_changes_1, get_before_list_slot_context_1);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, t1);
			}

			if (after_list_slot) {
				if (after_list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot(after_list_slot, after_list_slot_template, ctx, /*$$scope*/ ctx[43], dirty, get_after_list_slot_changes_1, get_after_list_slot_context_1);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty[0] & /*classes*/ 32) && { class: /*classes*/ ctx[5] },
				(!current || dirty[0] & /*sortableMoveElements*/ 2 && div_data_sortable_move_elements_value !== (div_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[1] !== "undefined"
				? /*sortableMoveElements*/ ctx[1].toString()
				: undefined)) && {
					"data-sortable-move-elements": div_data_sortable_move_elements_value
				},
				dirty[0] & /*$$restProps*/ 128 && restProps(/*$$restProps*/ ctx[7])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(before_list_slot, local);
			transition_in(if_block);
			transition_in(after_list_slot, local);
			current = true;
		},
		o(local) {
			transition_out(before_list_slot, local);
			transition_out(if_block);
			transition_out(after_list_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (before_list_slot) before_list_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (after_list_slot) after_list_slot.d(detaching);
			/*div_binding*/ ctx[46](null);
		}
	};
}

// (190:0) {#if form}
function create_if_block(ctx) {
	let form_1;
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let form_1_data_sortable_move_elements_value;
	let current;
	let mounted;
	let dispose;
	const before_list_slot_template = /*#slots*/ ctx[44]["before-list"];
	const before_list_slot = create_slot(before_list_slot_template, ctx, /*$$scope*/ ctx[43], get_before_list_slot_context);
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*hasUlSlots*/ ctx[4] && /*ul*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, [-1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const after_list_slot_template = /*#slots*/ ctx[44]["after-list"];
	const after_list_slot = create_slot(after_list_slot_template, ctx, /*$$scope*/ ctx[43], get_after_list_slot_context);

	let form_1_levels = [
		{ class: /*classes*/ ctx[5] },
		{
			"data-sortable-move-elements": form_1_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[1] !== "undefined"
			? /*sortableMoveElements*/ ctx[1].toString()
			: undefined
		},
		restProps(/*$$restProps*/ ctx[7])
	];

	let form_1_data = {};

	for (let i = 0; i < form_1_levels.length; i += 1) {
		form_1_data = assign(form_1_data, form_1_levels[i]);
	}

	return {
		c() {
			form_1 = element("form");
			if (before_list_slot) before_list_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();
			if (after_list_slot) after_list_slot.c();
			set_attributes(form_1, form_1_data);
		},
		m(target, anchor) {
			insert(target, form_1, anchor);

			if (before_list_slot) {
				before_list_slot.m(form_1, null);
			}

			append(form_1, t0);
			if_blocks[current_block_type_index].m(form_1, null);
			append(form_1, t1);

			if (after_list_slot) {
				after_list_slot.m(form_1, null);
			}

			/*form_1_binding*/ ctx[45](form_1);
			current = true;

			if (!mounted) {
				dispose = listen(form_1, "submit", /*onSubmit*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (before_list_slot) {
				if (before_list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot(before_list_slot, before_list_slot_template, ctx, /*$$scope*/ ctx[43], dirty, get_before_list_slot_changes, get_before_list_slot_context);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(form_1, t1);
			}

			if (after_list_slot) {
				if (after_list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot(after_list_slot, after_list_slot_template, ctx, /*$$scope*/ ctx[43], dirty, get_after_list_slot_changes, get_after_list_slot_context);
				}
			}

			set_attributes(form_1, form_1_data = get_spread_update(form_1_levels, [
				(!current || dirty[0] & /*classes*/ 32) && { class: /*classes*/ ctx[5] },
				(!current || dirty[0] & /*sortableMoveElements*/ 2 && form_1_data_sortable_move_elements_value !== (form_1_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[1] !== "undefined"
				? /*sortableMoveElements*/ ctx[1].toString()
				: undefined)) && {
					"data-sortable-move-elements": form_1_data_sortable_move_elements_value
				},
				dirty[0] & /*$$restProps*/ 128 && restProps(/*$$restProps*/ ctx[7])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(before_list_slot, local);
			transition_in(if_block);
			transition_in(after_list_slot, local);
			current = true;
		},
		o(local) {
			transition_out(before_list_slot, local);
			transition_out(if_block);
			transition_out(after_list_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(form_1);
			if (before_list_slot) before_list_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (after_list_slot) after_list_slot.d(detaching);
			/*form_1_binding*/ ctx[45](null);
			mounted = false;
			dispose();
		}
	};
}

// (226:4) {:else}
function create_else_block_2(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[44].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[43], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (221:4) {#if hasUlSlots && ul}
function create_if_block_2(ctx) {
	let ul_1;
	let t;
	let current;
	const list_slot_template = /*#slots*/ ctx[44].list;
	const list_slot = create_slot(list_slot_template, ctx, /*$$scope*/ ctx[43], get_list_slot_context_1);
	const default_slot_template = /*#slots*/ ctx[44].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);

	return {
		c() {
			ul_1 = element("ul");
			if (list_slot) list_slot.c();
			t = space();
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			insert(target, ul_1, anchor);

			if (list_slot) {
				list_slot.m(ul_1, null);
			}

			append(ul_1, t);

			if (default_slot) {
				default_slot.m(ul_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (list_slot) {
				if (list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot(list_slot, list_slot_template, ctx, /*$$scope*/ ctx[43], dirty, get_list_slot_changes_1, get_list_slot_context_1);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[43], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(list_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(list_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul_1);
			if (list_slot) list_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (206:4) {:else}
function create_else_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[44].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[43], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (201:4) {#if hasUlSlots && ul}
function create_if_block_1(ctx) {
	let ul_1;
	let t;
	let current;
	const list_slot_template = /*#slots*/ ctx[44].list;
	const list_slot = create_slot(list_slot_template, ctx, /*$$scope*/ ctx[43], get_list_slot_context);
	const default_slot_template = /*#slots*/ ctx[44].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);

	return {
		c() {
			ul_1 = element("ul");
			if (list_slot) list_slot.c();
			t = space();
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			insert(target, ul_1, anchor);

			if (list_slot) {
				list_slot.m(ul_1, null);
			}

			append(ul_1, t);

			if (default_slot) {
				default_slot.m(ul_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (list_slot) {
				if (list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot(list_slot, list_slot_template, ctx, /*$$scope*/ ctx[43], dirty, get_list_slot_changes, get_list_slot_context);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[43], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(list_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(list_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul_1);
			if (list_slot) list_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*form*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, [-1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let hasUlSlots;
	let classes;

	const omit_props_names = [
		"class","ul","inset","xsmallInset","smallInset","mediumInset","largeInset","xlargeInset","mediaList","sortable","sortableTapHold","sortableEnabled","sortableMoveElements","sortableOpposite","accordionList","accordionOpposite","contactsList","simpleList","linksList","menuList","noHairlines","noHairlinesBetween","noHairlinesMd","noHairlinesBetweenMd","noHairlinesIos","noHairlinesBetweenIos","noHairlinesAurora","noHairlinesBetweenAurora","noChevron","chevronCenter","tab","tabActive","form","formStoreData","inlineLabels","virtualList","virtualListParams","virtualListInstance"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { ul = true } = $$props;
	let { inset = false } = $$props;
	let { xsmallInset = false } = $$props;
	let { smallInset = false } = $$props;
	let { mediumInset = false } = $$props;
	let { largeInset = false } = $$props;
	let { xlargeInset = false } = $$props;
	let { mediaList = false } = $$props;
	let { sortable = false } = $$props;
	let { sortableTapHold = false } = $$props;
	let { sortableEnabled = false } = $$props;
	let { sortableMoveElements = undefined } = $$props;
	let { sortableOpposite = false } = $$props;
	let { accordionList = false } = $$props;
	let { accordionOpposite = false } = $$props;
	let { contactsList = false } = $$props;
	let { simpleList = false } = $$props;
	let { linksList = false } = $$props;
	let { menuList = false } = $$props;
	let { noHairlines = false } = $$props;
	let { noHairlinesBetween = false } = $$props;
	let { noHairlinesMd = false } = $$props;
	let { noHairlinesBetweenMd = false } = $$props;
	let { noHairlinesIos = false } = $$props;
	let { noHairlinesBetweenIos = false } = $$props;
	let { noHairlinesAurora = false } = $$props;
	let { noHairlinesBetweenAurora = false } = $$props;
	let { noChevron = false } = $$props;
	let { chevronCenter = false } = $$props;
	let { tab = false } = $$props;
	let { tabActive = false } = $$props;
	let { form = false } = $$props;
	let { formStoreData = false } = $$props;
	let { inlineLabels = false } = $$props;
	let { virtualList = false } = $$props;
	let { virtualListParams = undefined } = $$props;
	let el;
	let f7VirtualList;

	function virtualListInstance() {
		return f7VirtualList;
	}

	setReactiveContext("ListContext", () => ({
		listIsMedia: mediaList,
		listIsSimple: simpleList,
		listIsSortable: sortable,
		listIsSortableOpposite: sortableOpposite
	}));

	function onSubmit(event) {
		emit("submit", [event]);
	}

	function onSortableEnable(sortableEl) {
		if (sortableEl !== el) return;
		emit("sortableEnable");
	}

	function onSortableDisable(sortableEl) {
		if (sortableEl !== el) return;
		emit("sortableDisable");
	}

	function onSortableSort(listItemEl, sortData, listEl) {
		if (listEl !== el) return;
		emit("sortableSort", [sortData]);
	}

	useTab(() => el, emit);

	onMount(() => {
		f7ready(() => {
			app.f7.on("sortableEnable", onSortableEnable);
			app.f7.on("sortableDisable", onSortableDisable);
			app.f7.on("sortableSort", onSortableSort);
			if (!virtualList) return;
			const vlParams = virtualListParams || {};
			if (!vlParams.renderItem && !vlParams.renderExternal) return;

			f7VirtualList = app.f7.virtualList.create(extend(
				{
					el,
					on: {
						itemBeforeInsert(itemEl, item) {
							const vl = this;
							emit("virtualItemBeforeInsert", [vl, itemEl, item]);
						},
						beforeClear(fragment) {
							const vl = this;
							emit("virtualBeforeClear", [vl, fragment]);
						},
						itemsBeforeInsert(fragment) {
							const vl = this;
							emit("virtualItemsBeforeInsert", [vl, fragment]);
						},
						itemsAfterInsert(fragment) {
							const vl = this;
							emit("virtualItemsAfterInsert", [vl, fragment]);
						}
					}
				},
				vlParams
			));
		});
	});

	onDestroy(() => {
		if (!app.f7) return;
		app.f7.off("sortableEnable", onSortableEnable);
		app.f7.off("sortableDisable", onSortableDisable);
		app.f7.off("sortableSort", onSortableSort);

		if (f7VirtualList && f7VirtualList.destroy) {
			f7VirtualList.destroy();
			f7VirtualList = null;
		}
	});

	function form_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(3, el);
		});
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(3, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(52, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(8, className = $$new_props.class);
		if ("ul" in $$new_props) $$invalidate(0, ul = $$new_props.ul);
		if ("inset" in $$new_props) $$invalidate(9, inset = $$new_props.inset);
		if ("xsmallInset" in $$new_props) $$invalidate(10, xsmallInset = $$new_props.xsmallInset);
		if ("smallInset" in $$new_props) $$invalidate(11, smallInset = $$new_props.smallInset);
		if ("mediumInset" in $$new_props) $$invalidate(12, mediumInset = $$new_props.mediumInset);
		if ("largeInset" in $$new_props) $$invalidate(13, largeInset = $$new_props.largeInset);
		if ("xlargeInset" in $$new_props) $$invalidate(14, xlargeInset = $$new_props.xlargeInset);
		if ("mediaList" in $$new_props) $$invalidate(15, mediaList = $$new_props.mediaList);
		if ("sortable" in $$new_props) $$invalidate(16, sortable = $$new_props.sortable);
		if ("sortableTapHold" in $$new_props) $$invalidate(17, sortableTapHold = $$new_props.sortableTapHold);
		if ("sortableEnabled" in $$new_props) $$invalidate(18, sortableEnabled = $$new_props.sortableEnabled);
		if ("sortableMoveElements" in $$new_props) $$invalidate(1, sortableMoveElements = $$new_props.sortableMoveElements);
		if ("sortableOpposite" in $$new_props) $$invalidate(19, sortableOpposite = $$new_props.sortableOpposite);
		if ("accordionList" in $$new_props) $$invalidate(20, accordionList = $$new_props.accordionList);
		if ("accordionOpposite" in $$new_props) $$invalidate(21, accordionOpposite = $$new_props.accordionOpposite);
		if ("contactsList" in $$new_props) $$invalidate(22, contactsList = $$new_props.contactsList);
		if ("simpleList" in $$new_props) $$invalidate(23, simpleList = $$new_props.simpleList);
		if ("linksList" in $$new_props) $$invalidate(24, linksList = $$new_props.linksList);
		if ("menuList" in $$new_props) $$invalidate(25, menuList = $$new_props.menuList);
		if ("noHairlines" in $$new_props) $$invalidate(26, noHairlines = $$new_props.noHairlines);
		if ("noHairlinesBetween" in $$new_props) $$invalidate(27, noHairlinesBetween = $$new_props.noHairlinesBetween);
		if ("noHairlinesMd" in $$new_props) $$invalidate(28, noHairlinesMd = $$new_props.noHairlinesMd);
		if ("noHairlinesBetweenMd" in $$new_props) $$invalidate(29, noHairlinesBetweenMd = $$new_props.noHairlinesBetweenMd);
		if ("noHairlinesIos" in $$new_props) $$invalidate(30, noHairlinesIos = $$new_props.noHairlinesIos);
		if ("noHairlinesBetweenIos" in $$new_props) $$invalidate(31, noHairlinesBetweenIos = $$new_props.noHairlinesBetweenIos);
		if ("noHairlinesAurora" in $$new_props) $$invalidate(32, noHairlinesAurora = $$new_props.noHairlinesAurora);
		if ("noHairlinesBetweenAurora" in $$new_props) $$invalidate(33, noHairlinesBetweenAurora = $$new_props.noHairlinesBetweenAurora);
		if ("noChevron" in $$new_props) $$invalidate(34, noChevron = $$new_props.noChevron);
		if ("chevronCenter" in $$new_props) $$invalidate(35, chevronCenter = $$new_props.chevronCenter);
		if ("tab" in $$new_props) $$invalidate(36, tab = $$new_props.tab);
		if ("tabActive" in $$new_props) $$invalidate(37, tabActive = $$new_props.tabActive);
		if ("form" in $$new_props) $$invalidate(2, form = $$new_props.form);
		if ("formStoreData" in $$new_props) $$invalidate(38, formStoreData = $$new_props.formStoreData);
		if ("inlineLabels" in $$new_props) $$invalidate(39, inlineLabels = $$new_props.inlineLabels);
		if ("virtualList" in $$new_props) $$invalidate(40, virtualList = $$new_props.virtualList);
		if ("virtualListParams" in $$new_props) $$invalidate(41, virtualListParams = $$new_props.virtualListParams);
		if ("$$scope" in $$new_props) $$invalidate(43, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(5, classes = classNames(
			className,
			"list",
			{
				inset,
				"xsmall-inset": xsmallInset,
				"small-inset": smallInset,
				"medium-inset": mediumInset,
				"large-inset": largeInset,
				"xlarge-inset": xlargeInset,
				"media-list": mediaList,
				"simple-list": simpleList,
				"links-list": linksList,
				"menu-list": menuList,
				sortable,
				"sortable-tap-hold": sortableTapHold,
				"sortable-enabled": sortableEnabled,
				"sortable-opposite": sortableOpposite,
				"accordion-list": accordionList,
				"accordion-opposite": accordionOpposite,
				"contacts-list": contactsList,
				"virtual-list": virtualList,
				tab,
				"tab-active": tabActive,
				"no-hairlines": noHairlines,
				"no-hairlines-md": noHairlinesMd,
				"no-hairlines-ios": noHairlinesIos,
				"no-hairlines-aurora": noHairlinesAurora,
				"no-hairlines-between": noHairlinesBetween,
				"no-hairlines-between-md": noHairlinesBetweenMd,
				"no-hairlines-between-ios": noHairlinesBetweenIos,
				"no-hairlines-between-aurora": noHairlinesBetweenAurora,
				"form-store-data": formStoreData,
				"inline-labels": inlineLabels,
				"no-chevron": noChevron,
				"chevron-center": chevronCenter
			},
			colorClasses($$props)
		));
	};

	$: $$invalidate(4, hasUlSlots = $$slots.default || $$slots.list);
	$$props = exclude_internal_props($$props);

	return [
		ul,
		sortableMoveElements,
		form,
		el,
		hasUlSlots,
		classes,
		onSubmit,
		$$restProps,
		className,
		inset,
		xsmallInset,
		smallInset,
		mediumInset,
		largeInset,
		xlargeInset,
		mediaList,
		sortable,
		sortableTapHold,
		sortableEnabled,
		sortableOpposite,
		accordionList,
		accordionOpposite,
		contactsList,
		simpleList,
		linksList,
		menuList,
		noHairlines,
		noHairlinesBetween,
		noHairlinesMd,
		noHairlinesBetweenMd,
		noHairlinesIos,
		noHairlinesBetweenIos,
		noHairlinesAurora,
		noHairlinesBetweenAurora,
		noChevron,
		chevronCenter,
		tab,
		tabActive,
		formStoreData,
		inlineLabels,
		virtualList,
		virtualListParams,
		virtualListInstance,
		$$scope,
		slots,
		form_1_binding,
		div_binding
	];
}

class List extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				class: 8,
				ul: 0,
				inset: 9,
				xsmallInset: 10,
				smallInset: 11,
				mediumInset: 12,
				largeInset: 13,
				xlargeInset: 14,
				mediaList: 15,
				sortable: 16,
				sortableTapHold: 17,
				sortableEnabled: 18,
				sortableMoveElements: 1,
				sortableOpposite: 19,
				accordionList: 20,
				accordionOpposite: 21,
				contactsList: 22,
				simpleList: 23,
				linksList: 24,
				menuList: 25,
				noHairlines: 26,
				noHairlinesBetween: 27,
				noHairlinesMd: 28,
				noHairlinesBetweenMd: 29,
				noHairlinesIos: 30,
				noHairlinesBetweenIos: 31,
				noHairlinesAurora: 32,
				noHairlinesBetweenAurora: 33,
				noChevron: 34,
				chevronCenter: 35,
				tab: 36,
				tabActive: 37,
				form: 2,
				formStoreData: 38,
				inlineLabels: 39,
				virtualList: 40,
				virtualListParams: 41,
				virtualListInstance: 42
			},
			[-1, -1]
		);
	}

	get virtualListInstance() {
		return this.$$.ctx[42];
	}
}

export default List;