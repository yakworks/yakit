/* toolbar.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	space,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy, afterUpdate } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app, f7ready } from "../shared/f7";
import { useTheme } from "../shared/use-theme";
import { setReactiveContext } from "../shared/set-reactive-context";
const get_after_inner_slot_changes = dirty => ({});
const get_after_inner_slot_context = ctx => ({});
const get_before_inner_slot_changes = dirty => ({});
const get_before_inner_slot_context = ctx => ({});

// (106:2) {:else}
function create_else_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[24].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[23], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[23], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (102:2) {#if inner}
function create_if_block(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[24].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[23], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr(div, "class", "toolbar-inner");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[23], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let current;
	const before_inner_slot_template = /*#slots*/ ctx[24]["before-inner"];
	const before_inner_slot = create_slot(before_inner_slot_template, ctx, /*$$scope*/ ctx[23], get_before_inner_slot_context);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*inner*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const after_inner_slot_template = /*#slots*/ ctx[24]["after-inner"];
	const after_inner_slot = create_slot(after_inner_slot_template, ctx, /*$$scope*/ ctx[23], get_after_inner_slot_context);

	let div_levels = [
		{ class: /*classes*/ ctx[3] },
		{ "data-f7-slot": /*f7Slot*/ ctx[1] },
		restProps(/*$$restProps*/ ctx[4])
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (before_inner_slot) before_inner_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();
			if (after_inner_slot) after_inner_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (before_inner_slot) {
				before_inner_slot.m(div, null);
			}

			append(div, t0);
			if_blocks[current_block_type_index].m(div, null);
			append(div, t1);

			if (after_inner_slot) {
				after_inner_slot.m(div, null);
			}

			/*div_binding*/ ctx[25](div);
			current = true;
		},
		p(ctx, [dirty]) {
			if (before_inner_slot) {
				if (before_inner_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
					update_slot(before_inner_slot, before_inner_slot_template, ctx, /*$$scope*/ ctx[23], dirty, get_before_inner_slot_changes, get_before_inner_slot_context);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, t1);
			}

			if (after_inner_slot) {
				if (after_inner_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
					update_slot(after_inner_slot, after_inner_slot_template, ctx, /*$$scope*/ ctx[23], dirty, get_after_inner_slot_changes, get_after_inner_slot_context);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes*/ 8) && { class: /*classes*/ ctx[3] },
				(!current || dirty & /*f7Slot*/ 2) && { "data-f7-slot": /*f7Slot*/ ctx[1] },
				dirty & /*$$restProps*/ 16 && restProps(/*$$restProps*/ ctx[4])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(before_inner_slot, local);
			transition_in(if_block);
			transition_in(after_inner_slot, local);
			current = true;
		},
		o(local) {
			transition_out(before_inner_slot, local);
			transition_out(if_block);
			transition_out(after_inner_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (before_inner_slot) before_inner_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (after_inner_slot) after_inner_slot.d(detaching);
			/*div_binding*/ ctx[25](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;

	const omit_props_names = [
		"class","tabbar","labels","scrollable","hidden","noShadow","noHairline","noBorder","position","topMd","topIos","topAurora","top","bottomMd","bottomIos","bottomAurora","bottom","inner","f7Slot"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { tabbar = false } = $$props;
	let { labels = false } = $$props;
	let { scrollable = false } = $$props;
	let { hidden = false } = $$props;
	let { noShadow = false } = $$props;
	let { noHairline = false } = $$props;
	let { noBorder = false } = $$props;
	let { position = undefined } = $$props;
	let { topMd = undefined } = $$props;
	let { topIos = undefined } = $$props;
	let { topAurora = undefined } = $$props;
	let { top = undefined } = $$props;
	let { bottomMd = undefined } = $$props;
	let { bottomIos = undefined } = $$props;
	let { bottomAurora = undefined } = $$props;
	let { bottom = undefined } = $$props;
	let { inner = true } = $$props;
	let { f7Slot = "fixed" } = $$props;
	let el;

	let theme = useTheme(t => {
		$$invalidate(22, theme = t);
	});

	setReactiveContext("TabbarContext", () => ({ tabbarHasLabels: labels }));

	function onShow(toolbarEl) {
		if (el !== toolbarEl) return;
		emit("toolbarShow");
	}

	function onHide(toolbarEl) {
		if (el !== toolbarEl) return;
		emit("toolbarHide");
	}

	onMount(() => {
		f7ready(() => {
			if (tabbar) app.f7.toolbar.setHighlight(el);
			app.f7.on("toolbarShow", onShow);
			app.f7.on("toolbarHide", onHide);
		});
	});

	afterUpdate(() => {
		if (tabbar && app.f7 && el) {
			app.f7.toolbar.setHighlight(el);
		}
	});

	onDestroy(() => {
		if (!app.f7) return;
		app.f7.off("toolbarShow", onShow);
		app.f7.off("toolbarHide", onHide);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(2, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(29, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ("tabbar" in $$new_props) $$invalidate(6, tabbar = $$new_props.tabbar);
		if ("labels" in $$new_props) $$invalidate(7, labels = $$new_props.labels);
		if ("scrollable" in $$new_props) $$invalidate(8, scrollable = $$new_props.scrollable);
		if ("hidden" in $$new_props) $$invalidate(9, hidden = $$new_props.hidden);
		if ("noShadow" in $$new_props) $$invalidate(10, noShadow = $$new_props.noShadow);
		if ("noHairline" in $$new_props) $$invalidate(11, noHairline = $$new_props.noHairline);
		if ("noBorder" in $$new_props) $$invalidate(12, noBorder = $$new_props.noBorder);
		if ("position" in $$new_props) $$invalidate(13, position = $$new_props.position);
		if ("topMd" in $$new_props) $$invalidate(14, topMd = $$new_props.topMd);
		if ("topIos" in $$new_props) $$invalidate(15, topIos = $$new_props.topIos);
		if ("topAurora" in $$new_props) $$invalidate(16, topAurora = $$new_props.topAurora);
		if ("top" in $$new_props) $$invalidate(17, top = $$new_props.top);
		if ("bottomMd" in $$new_props) $$invalidate(18, bottomMd = $$new_props.bottomMd);
		if ("bottomIos" in $$new_props) $$invalidate(19, bottomIos = $$new_props.bottomIos);
		if ("bottomAurora" in $$new_props) $$invalidate(20, bottomAurora = $$new_props.bottomAurora);
		if ("bottom" in $$new_props) $$invalidate(21, bottom = $$new_props.bottom);
		if ("inner" in $$new_props) $$invalidate(0, inner = $$new_props.inner);
		if ("f7Slot" in $$new_props) $$invalidate(1, f7Slot = $$new_props.f7Slot);
		if ("$$scope" in $$new_props) $$invalidate(23, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(3, classes = classNames(
			className,
			"toolbar",
			{
				tabbar,
				"toolbar-bottom": theme && theme.md && bottomMd || theme && theme.ios && bottomIos || theme && theme.aurora && bottomAurora || bottom || position === "bottom",
				"toolbar-top": theme && theme.md && topMd || theme && theme.ios && topIos || theme && theme.aurora && topAurora || top || position === "top",
				"tabbar-labels": labels,
				"tabbar-scrollable": scrollable,
				"toolbar-hidden": hidden,
				"no-shadow": noShadow,
				"no-hairline": noHairline || noBorder
			},
			colorClasses($$props)
		));
	};

	$$props = exclude_internal_props($$props);

	return [
		inner,
		f7Slot,
		el,
		classes,
		$$restProps,
		className,
		tabbar,
		labels,
		scrollable,
		hidden,
		noShadow,
		noHairline,
		noBorder,
		position,
		topMd,
		topIos,
		topAurora,
		top,
		bottomMd,
		bottomIos,
		bottomAurora,
		bottom,
		theme,
		$$scope,
		slots,
		div_binding
	];
}

class Toolbar extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 5,
			tabbar: 6,
			labels: 7,
			scrollable: 8,
			hidden: 9,
			noShadow: 10,
			noHairline: 11,
			noBorder: 12,
			position: 13,
			topMd: 14,
			topIos: 15,
			topAurora: 16,
			top: 17,
			bottomMd: 18,
			bottomIos: 19,
			bottomAurora: 20,
			bottom: 21,
			inner: 0,
			f7Slot: 1
		});
	}
}

export default Toolbar;