/* menu-item.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	empty,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_attributes,
	set_data,
	space,
	text as text_1,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy } from "svelte";

import {
	colorClasses,
	routerAttrs,
	routerClasses,
	actionsAttrs,
	actionsClasses
} from "../shared/mixins";

import { classNames, extend, plainText, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app, f7ready } from "../shared/f7";
import { useTooltip } from "../shared/use-tooltip";
import { useRouteProps } from "../shared/use-route-props";
import { useIcon } from "../shared/use-icon";
import UseIcon from "./use-icon";
const get_text_slot_changes_1 = dirty => ({});
const get_text_slot_context_1 = ctx => ({});
const get_text_slot_changes = dirty => ({});
const get_text_slot_context = ctx => ({});

// (118:0) {:else}
function create_else_block(ctx) {
	let div;
	let t;
	let useTooltip_action;
	let useRouteProps_action;
	let current;
	let mounted;
	let dispose;
	let if_block = (typeof /*text*/ ctx[0] !== "undefined" || /*hasTextSlots*/ ctx[4] || /*icon*/ ctx[8]) && create_if_block_3(ctx);
	const default_slot_template = /*#slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);
	let div_levels = [{ class: /*classes*/ ctx[7] }, /*attrs*/ ctx[6]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[22](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*onClick*/ ctx[10]),
					action_destroyer(useTooltip_action = useTooltip.call(null, div, {
						tooltip: /*tooltip*/ ctx[1],
						tooltipTrigger: /*tooltipTrigger*/ ctx[2]
					})),
					action_destroyer(useRouteProps_action = useRouteProps.call(null, div, /*routeProps*/ ctx[3]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (typeof /*text*/ ctx[0] !== "undefined" || /*hasTextSlots*/ ctx[4] || /*icon*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*text, hasTextSlots, icon*/ 273) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes*/ 128) && { class: /*classes*/ ctx[7] },
				dirty & /*attrs*/ 64 && /*attrs*/ ctx[6]
			]));

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty & /*tooltip, tooltipTrigger*/ 6) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[1],
				tooltipTrigger: /*tooltipTrigger*/ ctx[2]
			});

			if (useRouteProps_action && is_function(useRouteProps_action.update) && dirty & /*routeProps*/ 8) useRouteProps_action.update.call(null, /*routeProps*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[22](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (98:0) {#if isLink}
function create_if_block(ctx) {
	let a;
	let t;
	let useTooltip_action;
	let useRouteProps_action;
	let current;
	let mounted;
	let dispose;
	let if_block = (typeof /*text*/ ctx[0] !== "undefined" || /*hasTextSlots*/ ctx[4] || /*icon*/ ctx[8]) && create_if_block_1(ctx);
	const default_slot_template = /*#slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);
	let a_levels = [{ class: /*classes*/ ctx[7] }, /*attrs*/ ctx[6]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			if (if_block) if_block.m(a, null);
			append(a, t);

			if (default_slot) {
				default_slot.m(a, null);
			}

			/*a_binding*/ ctx[21](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*onClick*/ ctx[10]),
					action_destroyer(useTooltip_action = useTooltip.call(null, a, {
						tooltip: /*tooltip*/ ctx[1],
						tooltipTrigger: /*tooltipTrigger*/ ctx[2]
					})),
					action_destroyer(useRouteProps_action = useRouteProps.call(null, a, /*routeProps*/ ctx[3]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (typeof /*text*/ ctx[0] !== "undefined" || /*hasTextSlots*/ ctx[4] || /*icon*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*text, hasTextSlots, icon*/ 273) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(a, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*classes*/ 128) && { class: /*classes*/ ctx[7] },
				dirty & /*attrs*/ 64 && /*attrs*/ ctx[6]
			]));

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty & /*tooltip, tooltipTrigger*/ 6) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[1],
				tooltipTrigger: /*tooltipTrigger*/ ctx[2]
			});

			if (useRouteProps_action && is_function(useRouteProps_action.update) && dirty & /*routeProps*/ 8) useRouteProps_action.update.call(null, /*routeProps*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			/*a_binding*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (127:4) {#if typeof text !== 'undefined' || hasTextSlots || icon}
function create_if_block_3(ctx) {
	let div;
	let t0_value = plainText(/*text*/ ctx[0]) + "";
	let t0;
	let t1;
	let t2;
	let current;
	let if_block = /*icon*/ ctx[8] && create_if_block_4(ctx);
	const text_slot_template = /*#slots*/ ctx[20].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[19], get_text_slot_context_1);

	return {
		c() {
			div = element("div");
			t0 = text_1(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			if (text_slot) text_slot.c();
			attr(div, "class", "menu-item-content");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			if (if_block) if_block.m(div, null);
			append(div, t2);

			if (text_slot) {
				text_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*text*/ 1) && t0_value !== (t0_value = plainText(/*text*/ ctx[0]) + "")) set_data(t0, t0_value);

			if (/*icon*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*icon*/ 256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t2);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (text_slot) {
				if (text_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_text_slot_changes_1, get_text_slot_context_1);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(text_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(text_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (text_slot) text_slot.d(detaching);
		}
	};
}

// (130:8) {#if icon}
function create_if_block_4(ctx) {
	let useicon;
	let current;
	useicon = new UseIcon({ props: { icon: /*icon*/ ctx[8] } });

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty & /*icon*/ 256) useicon_changes.icon = /*icon*/ ctx[8];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (107:4) {#if typeof text !== 'undefined' || hasTextSlots || icon}
function create_if_block_1(ctx) {
	let div;
	let t0_value = plainText(/*text*/ ctx[0]) + "";
	let t0;
	let t1;
	let t2;
	let current;
	let if_block = /*icon*/ ctx[8] && create_if_block_2(ctx);
	const text_slot_template = /*#slots*/ ctx[20].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[19], get_text_slot_context);

	return {
		c() {
			div = element("div");
			t0 = text_1(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			if (text_slot) text_slot.c();
			attr(div, "class", "menu-item-content");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			if (if_block) if_block.m(div, null);
			append(div, t2);

			if (text_slot) {
				text_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*text*/ 1) && t0_value !== (t0_value = plainText(/*text*/ ctx[0]) + "")) set_data(t0, t0_value);

			if (/*icon*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*icon*/ 256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t2);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (text_slot) {
				if (text_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_text_slot_changes, get_text_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(text_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(text_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (text_slot) text_slot.d(detaching);
		}
	};
}

// (110:8) {#if icon}
function create_if_block_2(ctx) {
	let useicon;
	let current;
	useicon = new UseIcon({ props: { icon: /*icon*/ ctx[8] } });

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty & /*icon*/ 256) useicon_changes.icon = /*icon*/ ctx[8];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isLink*/ ctx[9]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let hrefComputed;
	let attrs;
	let hasDefaultSlots;
	let hasTextSlots;
	let iconOnlyComputed;
	let classes;
	let icon;
	let isLink;

	const omit_props_names = [
		"class","text","iconOnly","href","link","target","dropdown","tooltip","tooltipTrigger","routeProps"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { text = undefined } = $$props;
	let { iconOnly = undefined } = $$props;
	let { href = undefined } = $$props;
	let { link = undefined } = $$props;
	let { target = undefined } = $$props;
	let { dropdown = undefined } = $$props;
	let { tooltip = undefined } = $$props;
	let { tooltipTrigger = undefined } = $$props;
	let { routeProps = undefined } = $$props;
	let el;

	function onClick(e) {
		emit("click", [e]);
	}

	function onOpened(itemEl) {
		if (itemEl !== el) return;
		emit("menuOpened", [el]);
	}

	function onClosed(itemEl) {
		if (itemEl !== el) return;
		emit("menuClosed", [el]);
	}

	onMount(() => {
		f7ready(() => {
			app.f7.on("menuOpened", onOpened);
			app.f7.on("menuClosed", onClosed);
		});
	});

	onDestroy(() => {
		if (!el || !app.f7) return;
		app.f7.off("menuOpened", onOpened);
		app.f7.off("menuClosed", onClosed);
	});

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(5, el);
		});
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(5, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(27, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(28, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(11, className = $$new_props.class);
		if ("text" in $$new_props) $$invalidate(0, text = $$new_props.text);
		if ("iconOnly" in $$new_props) $$invalidate(12, iconOnly = $$new_props.iconOnly);
		if ("href" in $$new_props) $$invalidate(13, href = $$new_props.href);
		if ("link" in $$new_props) $$invalidate(14, link = $$new_props.link);
		if ("target" in $$new_props) $$invalidate(15, target = $$new_props.target);
		if ("dropdown" in $$new_props) $$invalidate(16, dropdown = $$new_props.dropdown);
		if ("tooltip" in $$new_props) $$invalidate(1, tooltip = $$new_props.tooltip);
		if ("tooltipTrigger" in $$new_props) $$invalidate(2, tooltipTrigger = $$new_props.tooltipTrigger);
		if ("routeProps" in $$new_props) $$invalidate(3, routeProps = $$new_props.routeProps);
		if ("$$scope" in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*href, link*/ 24576) {
			$: $$invalidate(17, hrefComputed = typeof href === "undefined" && link ? "#" : href);
		}

		$: $$invalidate(6, attrs = extend(
			{
				href: hrefComputed,
				target,
				...restProps($$restProps)
			},
			routerAttrs($$props),
			actionsAttrs($$props)
		));

		if ($$self.$$.dirty & /*iconOnly, text, hasTextSlots*/ 4113) {
			$: $$invalidate(18, iconOnlyComputed = iconOnly || !text && !hasTextSlots);
		}

		$: $$invalidate(7, classes = classNames(
			{
				"menu-item": true,
				"menu-item-dropdown": dropdown || dropdown === "",
				"icon-only": iconOnlyComputed
			},
			className,
			colorClasses($$props),
			routerClasses($$props),
			actionsClasses($$props)
		));

		$: $$invalidate(8, icon = useIcon($$props));

		if ($$self.$$.dirty & /*link, href*/ 24576) {
			$: $$invalidate(9, isLink = link || href || href === "");
		}
	};

	$: hasDefaultSlots = $$slots.default;
	$: $$invalidate(4, hasTextSlots = $$slots.text);
	$$props = exclude_internal_props($$props);

	return [
		text,
		tooltip,
		tooltipTrigger,
		routeProps,
		hasTextSlots,
		el,
		attrs,
		classes,
		icon,
		isLink,
		onClick,
		className,
		iconOnly,
		href,
		link,
		target,
		dropdown,
		hrefComputed,
		iconOnlyComputed,
		$$scope,
		slots,
		a_binding,
		div_binding
	];
}

class Menu_item extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 11,
			text: 0,
			iconOnly: 12,
			href: 13,
			link: 14,
			target: 15,
			dropdown: 16,
			tooltip: 1,
			tooltipTrigger: 2,
			routeProps: 3
		});
	}
}

export default Menu_item;