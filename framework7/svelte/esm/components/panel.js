/* panel.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	space,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { onMount, onDestroy, createEventDispatcher } from "svelte";
import { restProps } from "../shared/rest-props";
import { colorClasses } from "../shared/mixins";
import { classNames, noUndefinedProps, createEmitter } from "../shared/utils";
import { app, f7ready } from "../shared/f7";
const get_default_slot_changes = dirty => ({ panel: dirty[0] & /*f7Panel*/ 8 });
const get_default_slot_context = ctx => ({ panel: /*f7Panel*/ ctx[3] });

// (202:2) {#if resizable}
function create_if_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "panel-resize-handler");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t;
	let current;
	const default_slot_template = /*#slots*/ ctx[29].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[28], get_default_slot_context);
	let if_block = /*resizable*/ ctx[0] && create_if_block(ctx);

	let div_levels = [
		{ class: /*classes*/ ctx[4] },
		{ "data-f7-slot": /*f7Slot*/ ctx[1] },
		restProps(/*$$restProps*/ ctx[5])
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(div, t);
			if (if_block) if_block.m(div, null);
			/*div_binding*/ ctx[30](div);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope, f7Panel*/ 268435464)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[28], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}

			if (/*resizable*/ ctx[0]) {
				if (if_block) {
					
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty[0] & /*classes*/ 16) && { class: /*classes*/ ctx[4] },
				(!current || dirty[0] & /*f7Slot*/ 2) && { "data-f7-slot": /*f7Slot*/ ctx[1] },
				dirty[0] & /*$$restProps*/ 32 && restProps(/*$$restProps*/ ctx[5])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			/*div_binding*/ ctx[30](null);
		}
	};
}

function instance_1($$self, $$props, $$invalidate) {
	let sideComputed;
	let effectComputed;
	let classes;

	const omit_props_names = [
		"class","side","effect","cover","reveal","push","left","right","opened","resizable","backdrop","backdropEl","containerEl","visibleBreakpoint","collapsedBreakpoint","swipe","swipeNoFollow","swipeOnlyClose","swipeActiveArea","swipeThreshold","f7Slot","instance"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { side = undefined } = $$props;
	let { effect = undefined } = $$props;
	let { cover = false } = $$props;
	let { reveal = false } = $$props;
	let { push = false } = $$props;
	let { left = false } = $$props;
	let { right = false } = $$props;
	let { opened = false } = $$props;
	let { resizable = false } = $$props;
	let { backdrop = true } = $$props;
	let { backdropEl = undefined } = $$props;
	let { containerEl = undefined } = $$props;
	let { visibleBreakpoint = undefined } = $$props;
	let { collapsedBreakpoint = undefined } = $$props;
	let { swipe = false } = $$props;
	let { swipeNoFollow = false } = $$props;
	let { swipeOnlyClose = false } = $$props;
	let { swipeActiveArea = 0 } = $$props;
	let { swipeThreshold = 0 } = $$props;
	let { f7Slot = "fixed" } = $$props;
	let el;
	let f7Panel;

	const state = {
		isOpened: false,
		isClosing: false,
		isCollapsed: false,
		isBreakpoint: false
	};

	function instance() {
		return f7Panel;
	}

	let resizableOld = resizable;
	let initialWatchedResizable = false;

	function watchResizable(r) {
		if (!initialWatchedResizable) {
			initialWatchedResizable = true;
			return;
		}

		if (f7Panel && r && !resizableOld) {
			f7Panel.enableResizable();
		} else if (f7Panel && !r && resizableOld) {
			f7Panel.disableResizable();
		}

		resizableOld = r;
	}

	let openedOld = opened;
	let initialWatchedOpened = false;

	function watchOpened(o) {
		if (!initialWatchedOpened) {
			initialWatchedOpened = true;
			return;
		}

		if (f7Panel && o && !openedOld) {
			f7Panel.open();
		} else if (f7Panel && !o && openedOld) {
			f7Panel.close();
		}

		openedOld = o;
	}

	function onOpen(...args) {
		Object.assign(state, { isOpened: true, isClosing: false });
		emit("panelOpen", args);
		$$invalidate(6, opened = true);
	}

	function onOpened(...args) {
		emit("panelOpened", args);
	}

	function onClose(...args) {
		Object.assign(state, { isOpened: false, isClosing: true });
		emit("panelClose", args);
	}

	function onClosed(...args) {
		Object.assign(state, { isClosing: false });
		emit("panelClosed", args);
		$$invalidate(6, opened = false);
	}

	function onBackdropClick(...args) {
		emit("panelBackdropClick", args);
	}

	function onSwipe(...args) {
		emit("panelSwipe", args);
	}

	function onSwipeOpen(...args) {
		emit("panelSwipeOpen", args);
	}

	function onBreakpoint(...args) {
		Object.assign(state, { isBreakpoint: true, isCollapsed: false });
		emit("panelBreakpoint", args);
	}

	function onCollapsedBreakpoint(...args) {
		Object.assign(state, { isBreakpoint: false, isCollapsed: true });
		emit("panelCollapsedBreakpoint", args);
	}

	function onResize(...args) {
		emit("panelResize", args);
	}

	onMount(() => {
		f7ready(() => {
			const dom7 = app.f7.$;

			if (dom7(".panel-backdrop").length === 0) {
				dom7("<div class=\"panel-backdrop\"></div>").insertBefore(el);
			}

			const params = noUndefinedProps({
				el,
				resizable,
				backdrop,
				backdropEl,
				containerEl,
				visibleBreakpoint,
				collapsedBreakpoint,
				swipe,
				swipeNoFollow,
				swipeOnlyClose,
				swipeActiveArea,
				swipeThreshold,
				on: {
					open: onOpen,
					opened: onOpened,
					close: onClose,
					closed: onClosed,
					backdropClick: onBackdropClick,
					swipe: onSwipe,
					swipeOpen: onSwipeOpen,
					collapsedBreakpoint: onCollapsedBreakpoint,
					breakpoint: onBreakpoint,
					resize: onResize
				}
			});

			$$invalidate(3, f7Panel = app.f7.panel.create(params));

			if (opened) {
				f7Panel.open(false);
			}
		});
	});

	onDestroy(() => {
		if (f7Panel && f7Panel.destroy) {
			f7Panel.destroy();
		}

		$$invalidate(3, f7Panel = null);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(2, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(49, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(7, className = $$new_props.class);
		if ("side" in $$new_props) $$invalidate(8, side = $$new_props.side);
		if ("effect" in $$new_props) $$invalidate(9, effect = $$new_props.effect);
		if ("cover" in $$new_props) $$invalidate(10, cover = $$new_props.cover);
		if ("reveal" in $$new_props) $$invalidate(11, reveal = $$new_props.reveal);
		if ("push" in $$new_props) $$invalidate(12, push = $$new_props.push);
		if ("left" in $$new_props) $$invalidate(13, left = $$new_props.left);
		if ("right" in $$new_props) $$invalidate(14, right = $$new_props.right);
		if ("opened" in $$new_props) $$invalidate(6, opened = $$new_props.opened);
		if ("resizable" in $$new_props) $$invalidate(0, resizable = $$new_props.resizable);
		if ("backdrop" in $$new_props) $$invalidate(15, backdrop = $$new_props.backdrop);
		if ("backdropEl" in $$new_props) $$invalidate(16, backdropEl = $$new_props.backdropEl);
		if ("containerEl" in $$new_props) $$invalidate(17, containerEl = $$new_props.containerEl);
		if ("visibleBreakpoint" in $$new_props) $$invalidate(18, visibleBreakpoint = $$new_props.visibleBreakpoint);
		if ("collapsedBreakpoint" in $$new_props) $$invalidate(19, collapsedBreakpoint = $$new_props.collapsedBreakpoint);
		if ("swipe" in $$new_props) $$invalidate(20, swipe = $$new_props.swipe);
		if ("swipeNoFollow" in $$new_props) $$invalidate(21, swipeNoFollow = $$new_props.swipeNoFollow);
		if ("swipeOnlyClose" in $$new_props) $$invalidate(22, swipeOnlyClose = $$new_props.swipeOnlyClose);
		if ("swipeActiveArea" in $$new_props) $$invalidate(23, swipeActiveArea = $$new_props.swipeActiveArea);
		if ("swipeThreshold" in $$new_props) $$invalidate(24, swipeThreshold = $$new_props.swipeThreshold);
		if ("f7Slot" in $$new_props) $$invalidate(1, f7Slot = $$new_props.f7Slot);
		if ("$$scope" in $$new_props) $$invalidate(28, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*side, left, right*/ 24832) {
			// eslint-disable-next-line
			$: $$invalidate(26, sideComputed = side || (left ? "left" : right ? "right" : "left"));
		}

		if ($$self.$$.dirty[0] & /*effect, reveal, push*/ 6656) {
			// eslint-disable-next-line
			$: $$invalidate(27, effectComputed = effect || (reveal ? "reveal" : push ? "push" : "cover"));
		}

		$: $$invalidate(4, classes = classNames(
			className,
			"panel",
			{
				"panel-in": state.isOpened && !state.isClosing && !state.isBreakpoint,
				"panel-in-breakpoint": state.isBreakpoint,
				"panel-in-collapsed": state.isCollapsed,
				"panel-resizable": resizable,
				[`panel-${sideComputed}`]: sideComputed,
				[`panel-${effectComputed}`]: effectComputed
			},
			colorClasses($$props)
		));

		if ($$self.$$.dirty[0] & /*resizable*/ 1) {
			$: watchResizable(resizable);
		}

		if ($$self.$$.dirty[0] & /*opened*/ 64) {
			$: watchOpened(opened);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		resizable,
		f7Slot,
		el,
		f7Panel,
		classes,
		$$restProps,
		opened,
		className,
		side,
		effect,
		cover,
		reveal,
		push,
		left,
		right,
		backdrop,
		backdropEl,
		containerEl,
		visibleBreakpoint,
		collapsedBreakpoint,
		swipe,
		swipeNoFollow,
		swipeOnlyClose,
		swipeActiveArea,
		swipeThreshold,
		instance,
		sideComputed,
		effectComputed,
		$$scope,
		slots,
		div_binding
	];
}

class Panel extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance_1,
			create_fragment,
			safe_not_equal,
			{
				class: 7,
				side: 8,
				effect: 9,
				cover: 10,
				reveal: 11,
				push: 12,
				left: 13,
				right: 14,
				opened: 6,
				resizable: 0,
				backdrop: 15,
				backdropEl: 16,
				containerEl: 17,
				visibleBreakpoint: 18,
				collapsedBreakpoint: 19,
				swipe: 20,
				swipeNoFollow: 21,
				swipeOnlyClose: 22,
				swipeActiveArea: 23,
				swipeThreshold: 24,
				f7Slot: 1,
				instance: 25
			},
			[-1, -1]
		);
	}

	get instance() {
		return this.$$.ctx[25];
	}
}

export default Panel;