/* tab.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	empty,
	exclude_internal_props,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_attributes,
	space,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import {
	onMount,
	onDestroy,
	afterUpdate,
	createEventDispatcher,
	tick,
	getContext
} from "svelte";

import { restProps } from "../shared/rest-props";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter, getComponentId } from "../shared/utils";
import { f7ready, app } from "../shared/f7";
import { useTab } from "../shared/use-tab";

function create_if_block(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	const switch_instance_spread_levels = [/*tabContent*/ ctx[2].props];
	var switch_value = /*tabContent*/ ctx[2].component;

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = (dirty & /*tabContent*/ 4)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*tabContent*/ ctx[2].props)])
			: {};

			if (switch_value !== (switch_value = /*tabContent*/ ctx[2].component)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t;
	let current;
	let if_block = /*tabContent*/ ctx[2] && create_if_block(ctx);
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	let div_levels = [
		{ id: /*id*/ ctx[0] },
		{ class: /*classes*/ ctx[3] },
		restProps(/*$$restProps*/ ctx[4])
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[9](div);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*tabContent*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*tabContent*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*id*/ 1) && { id: /*id*/ ctx[0] },
				(!current || dirty & /*classes*/ 8) && { class: /*classes*/ ctx[3] },
				dirty & /*$$restProps*/ 16 && restProps(/*$$restProps*/ ctx[4])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[9](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class","tabActive","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { tabActive = false } = $$props;
	let { id = undefined } = $$props;
	const RouterContext = getContext("RouterContext") || {};
	let el;
	let routerData = null;
	let initialTabContent = null;

	if (!routerData && RouterContext && RouterContext.route && RouterContext.route.route && RouterContext.route.route.tab && RouterContext.route.route.tab.id === id) {
		const { component, asyncComponent, options: tabRouteOptions } = RouterContext.route.route.tab;

		if (component || asyncComponent) {
			const parentProps = RouterContext.route.route.options && RouterContext.route.route.options.props;

			initialTabContent = {
				id: getComponentId(),
				component: component || asyncComponent,
				isAsync: !!asyncComponent,
				props: {
					...parentProps || {},
					...tabRouteOptions && tabRouteOptions.props || {},
					f7router: RouterContext.router,
					f7route: RouterContext.route,
					...RouterContext.route.params
				}
			};
		}
	}

	let tabContent = initialTabContent || null;
	useTab(() => el, emit);

	onMount(() => {
		if (el && initialTabContent) {
			$$invalidate(1, el.f7RouterTabLoaded = true, el);
		}

		f7ready(() => {
			if (!routerData) {
				routerData = {
					el,
					setTabContent(tc) {
						tick().then(() => {
							$$invalidate(2, tabContent = tc);
						});
					}
				};

				app.f7routers.tabs.push(routerData);
			} else {
				routerData.el = el;
			}
		});
	});

	afterUpdate(() => {
		if (!routerData) return;
		app.f7events.emit("tabRouterDidUpdate", routerData);
	});

	onDestroy(() => {
		if (!routerData) return;
		app.f7routers.tabs.splice(app.f7routers.tabs.indexOf(routerData), 1);
		routerData = null;
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(1, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(14, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ("tabActive" in $$new_props) $$invalidate(6, tabActive = $$new_props.tabActive);
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(3, classes = classNames(className, "tab", tabActive && "tab-active", colorClasses($$props)));
	};

	$$props = exclude_internal_props($$props);

	return [
		id,
		el,
		tabContent,
		classes,
		$$restProps,
		className,
		tabActive,
		$$scope,
		slots,
		div_binding
	];
}

class Tab extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { class: 5, tabActive: 6, id: 0 });
	}
}

export default Tab;