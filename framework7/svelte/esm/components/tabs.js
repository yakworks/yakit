/* tabs.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_slot,
	detach,
	element,
	empty,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { onMount } from "svelte";
import { restProps } from "../shared/rest-props";
import { colorClasses } from "../shared/mixins";
import { classNames } from "../shared/utils";

function create_else_block(ctx) {
	let div;
	let div_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let div_levels = [
		{
			class: div_class_value = classNames(/*tabsClasses*/ ctx[5], /*classes*/ ctx[3])
		},
		restProps(/*$$restProps*/ ctx[6])
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*tabsClasses, classes*/ 40 && div_class_value !== (div_class_value = classNames(/*tabsClasses*/ ctx[5], /*classes*/ ctx[3]))) && { class: div_class_value },
				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (34:0) {#if animated || swipeable}
function create_if_block(ctx) {
	let div1;
	let div0;
	let div1_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let div1_levels = [
		{
			class: div1_class_value = classNames(/*wrapClasses*/ ctx[4], /*classes*/ ctx[3])
		},
		restProps(/*$$restProps*/ ctx[6])
	];

	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "class", /*tabsClasses*/ ctx[5]);
			set_attributes(div1, div1_data);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div1_binding*/ ctx[12](div1);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			if (!current || dirty & /*tabsClasses*/ 32) {
				attr(div0, "class", /*tabsClasses*/ ctx[5]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				(!current || dirty & /*wrapClasses, classes*/ 24 && div1_class_value !== (div1_class_value = classNames(/*wrapClasses*/ ctx[4], /*classes*/ ctx[3]))) && { class: div1_class_value },
				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*div1_binding*/ ctx[12](null);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*animated*/ ctx[0] || /*swipeable*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;
	let wrapClasses;
	let tabsClasses;
	const omit_props_names = ["class","animated","swipeable","routable","swiperParams"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { animated = false } = $$props;
	let { swipeable = false } = $$props;
	let { routable = false } = $$props;
	let { swiperParams = undefined } = $$props;
	let wrapEl;

	onMount(() => {
		if (swipeable && swiperParams && wrapEl) {
			$$invalidate(2, wrapEl.f7SwiperParams = swiperParams, wrapEl);
		}
	});

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			wrapEl = $$value;
			$$invalidate(2, wrapEl);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(13, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(7, className = $$new_props.class);
		if ("animated" in $$new_props) $$invalidate(0, animated = $$new_props.animated);
		if ("swipeable" in $$new_props) $$invalidate(1, swipeable = $$new_props.swipeable);
		if ("routable" in $$new_props) $$invalidate(8, routable = $$new_props.routable);
		if ("swiperParams" in $$new_props) $$invalidate(9, swiperParams = $$new_props.swiperParams);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(3, classes = classNames(className, colorClasses($$props)));

		if ($$self.$$.dirty & /*animated, swipeable*/ 3) {
			$: $$invalidate(4, wrapClasses = classNames({
				"tabs-animated-wrap": animated,
				"tabs-swipeable-wrap": swipeable
			}));
		}

		if ($$self.$$.dirty & /*routable*/ 256) {
			$: $$invalidate(5, tabsClasses = classNames({ tabs: true, "tabs-routable": routable }));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		animated,
		swipeable,
		wrapEl,
		classes,
		wrapClasses,
		tabsClasses,
		$$restProps,
		className,
		routable,
		swiperParams,
		$$scope,
		slots,
		div1_binding
	];
}

class Tabs extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 7,
			animated: 0,
			swipeable: 1,
			routable: 8,
			swiperParams: 9
		});
	}
}

export default Tabs;