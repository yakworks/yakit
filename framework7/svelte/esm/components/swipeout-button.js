/* swipeout-button.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	listen,
	safe_not_equal,
	set_attributes,
	set_data,
	space,
	text as text_1,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, plainText, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";

function create_fragment(ctx) {
	let a;
	let t0_value = plainText(/*text*/ ctx[0]) + "";
	let t0;
	let t1;
	let a_href_value;
	let a_data_confirm_value;
	let a_data_confirm_title_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	let a_levels = [
		{
			href: a_href_value = /*href*/ ctx[3] || "#"
		},
		{
			"data-confirm": a_data_confirm_value = /*confirmText*/ ctx[2] || undefined
		},
		{
			"data-confirm-title": a_data_confirm_title_value = /*confirmTitle*/ ctx[1] || undefined
		},
		{ class: /*classes*/ ctx[4] },
		restProps(/*$$restProps*/ ctx[6])
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			t0 = text_1(t0_value);
			t1 = space();
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t0);
			append(a, t1);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*onClick*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*text*/ 1) && t0_value !== (t0_value = plainText(/*text*/ ctx[0]) + "")) set_data(t0, t0_value);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 8 && a_href_value !== (a_href_value = /*href*/ ctx[3] || "#")) && { href: a_href_value },
				(!current || dirty & /*confirmText*/ 4 && a_data_confirm_value !== (a_data_confirm_value = /*confirmText*/ ctx[2] || undefined)) && { "data-confirm": a_data_confirm_value },
				(!current || dirty & /*confirmTitle*/ 2 && a_data_confirm_title_value !== (a_data_confirm_title_value = /*confirmTitle*/ ctx[1] || undefined)) && {
					"data-confirm-title": a_data_confirm_title_value
				},
				(!current || dirty & /*classes*/ 16) && { class: /*classes*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;

	const omit_props_names = [
		"class","text","confirmTitle","confirmText","overswipe","close","delete","href"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { text = undefined } = $$props;
	let { confirmTitle = undefined } = $$props;
	let { confirmText = undefined } = $$props;
	let { overswipe = undefined } = $$props;
	let { close = undefined } = $$props;
	let { delete: deleteProp = undefined } = $$props;
	let { href = undefined } = $$props;

	function onClick() {
		emit("click");
	}

	$$self.$$set = $$new_props => {
		$$invalidate(14, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(7, className = $$new_props.class);
		if ("text" in $$new_props) $$invalidate(0, text = $$new_props.text);
		if ("confirmTitle" in $$new_props) $$invalidate(1, confirmTitle = $$new_props.confirmTitle);
		if ("confirmText" in $$new_props) $$invalidate(2, confirmText = $$new_props.confirmText);
		if ("overswipe" in $$new_props) $$invalidate(8, overswipe = $$new_props.overswipe);
		if ("close" in $$new_props) $$invalidate(9, close = $$new_props.close);
		if ("delete" in $$new_props) $$invalidate(10, deleteProp = $$new_props.delete);
		if ("href" in $$new_props) $$invalidate(3, href = $$new_props.href);
		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(4, classes = classNames(
			className,
			{
				"swipeout-overswipe": overswipe,
				"swipeout-delete": deleteProp,
				"swipeout-close": close
			},
			colorClasses($$props)
		));
	};

	$$props = exclude_internal_props($$props);

	return [
		text,
		confirmTitle,
		confirmText,
		href,
		classes,
		onClick,
		$$restProps,
		className,
		overswipe,
		close,
		deleteProp,
		$$scope,
		slots
	];
}

class Swipeout_button extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 7,
			text: 0,
			confirmTitle: 1,
			confirmText: 2,
			overswipe: 8,
			close: 9,
			delete: 10,
			href: 3
		});
	}
}

export default Swipeout_button;