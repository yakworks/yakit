/* menu-dropdown.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { colorClasses } from "../shared/mixins";
import { classNames } from "../shared/utils";
import { restProps } from "../shared/rest-props";

function create_fragment(ctx) {
	let div1;
	let div0;
	let div0_style_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	let div1_levels = [{ class: /*classes*/ ctx[1] }, restProps(/*$$restProps*/ ctx[2])];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "class", "menu-dropdown-content");
			attr(div0, "style", div0_style_value = /*contentHeight*/ ctx[0] && `height: ${/*contentHeight*/ ctx[0]}`);
			set_attributes(div1, div1_data);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*contentHeight*/ 1 && div0_style_value !== (div0_style_value = /*contentHeight*/ ctx[0] && `height: ${/*contentHeight*/ ctx[0]}`)) {
				attr(div0, "style", div0_style_value);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
				dirty & /*$$restProps*/ 4 && restProps(/*$$restProps*/ ctx[2])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let positionComputed;
	let classes;
	const omit_props_names = ["class","contentHeight","position","left","center","right"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { contentHeight = undefined } = $$props;
	let { position = undefined } = $$props;
	let { left = undefined } = $$props;
	let { center = undefined } = $$props;
	let { right = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ("contentHeight" in $$new_props) $$invalidate(0, contentHeight = $$new_props.contentHeight);
		if ("position" in $$new_props) $$invalidate(4, position = $$new_props.position);
		if ("left" in $$new_props) $$invalidate(5, left = $$new_props.left);
		if ("center" in $$new_props) $$invalidate(6, center = $$new_props.center);
		if ("right" in $$new_props) $$invalidate(7, right = $$new_props.right);
		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*position, left, center, right*/ 240) {
			$: $$invalidate(8, positionComputed = (() => {
				let pos = position || "left";
				if (left) pos = "left";
				if (center) pos = "center";
				if (right) pos = "right";
				return pos;
			})());
		}

		$: $$invalidate(1, classes = classNames("menu-dropdown", `menu-dropdown-${positionComputed}`, colorClasses($$props), className));
	};

	$$props = exclude_internal_props($$props);

	return [
		contentHeight,
		classes,
		$$restProps,
		className,
		position,
		left,
		center,
		right,
		positionComputed,
		$$scope,
		slots
	];
}

class Menu_dropdown extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 3,
			contentHeight: 0,
			position: 4,
			left: 5,
			center: 6,
			right: 7
		});
	}
}

export default Menu_dropdown;