/* navbar.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_attributes,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy, afterUpdate } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, plainText, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { f7ready, app } from "../shared/f7";
import { useTheme } from "../shared/use-theme";
import NavLeft from "./nav-left";
import NavTitle from "./nav-title";
import NavRight from "./nav-right";
const get_after_inner_slot_changes = dirty => ({});
const get_after_inner_slot_context = ctx => ({});
const get_title_large_slot_changes = dirty => ({});
const get_title_large_slot_context = ctx => ({});
const get_right_slot_changes = dirty => ({});
const get_right_slot_context = ctx => ({});
const get_nav_right_slot_changes = dirty => ({});
const get_nav_right_slot_context = ctx => ({});
const get_title_slot_changes = dirty => ({});
const get_title_slot_context = ctx => ({});
const get_left_slot_changes = dirty => ({});
const get_left_slot_context = ctx => ({});
const get_nav_left_slot_changes = dirty => ({});
const get_nav_left_slot_context = ctx => ({});
const get_before_inner_slot_changes = dirty => ({});
const get_before_inner_slot_context = ctx => ({});

// (197:4) {#if backLink || hasLeftSlots}
function create_if_block_3(ctx) {
	let navleft;
	let current;

	navleft = new NavLeft({
			props: {
				backLink: /*backLink*/ ctx[0],
				backLinkUrl: /*backLinkUrl*/ ctx[1],
				backLinkForce: /*backLinkForce*/ ctx[2],
				backLinkShowText: /*backLinkShowText*/ ctx[3],
				onBackClick: /*onBackClick*/ ctx[15],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(navleft.$$.fragment);
		},
		m(target, anchor) {
			mount_component(navleft, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const navleft_changes = {};
			if (dirty[0] & /*backLink*/ 1) navleft_changes.backLink = /*backLink*/ ctx[0];
			if (dirty[0] & /*backLinkUrl*/ 2) navleft_changes.backLinkUrl = /*backLinkUrl*/ ctx[1];
			if (dirty[0] & /*backLinkForce*/ 4) navleft_changes.backLinkForce = /*backLinkForce*/ ctx[2];
			if (dirty[0] & /*backLinkShowText*/ 8) navleft_changes.backLinkShowText = /*backLinkShowText*/ ctx[3];

			if (dirty[1] & /*$$scope*/ 16384) {
				navleft_changes.$$scope = { dirty, ctx };
			}

			navleft.$set(navleft_changes);
		},
		i(local) {
			if (current) return;
			transition_in(navleft.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navleft.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(navleft, detaching);
		}
	};
}

// (198:6) <NavLeft {backLink} {backLinkUrl} {backLinkForce} {backLinkShowText} {onBackClick}>
function create_default_slot_2(ctx) {
	let t;
	let current;
	const nav_left_slot_template = /*#slots*/ ctx[43]["nav-left"];
	const nav_left_slot = create_slot(nav_left_slot_template, ctx, /*$$scope*/ ctx[45], get_nav_left_slot_context);
	const left_slot_template = /*#slots*/ ctx[43].left;
	const left_slot = create_slot(left_slot_template, ctx, /*$$scope*/ ctx[45], get_left_slot_context);

	return {
		c() {
			if (nav_left_slot) nav_left_slot.c();
			t = space();
			if (left_slot) left_slot.c();
		},
		m(target, anchor) {
			if (nav_left_slot) {
				nav_left_slot.m(target, anchor);
			}

			insert(target, t, anchor);

			if (left_slot) {
				left_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (nav_left_slot) {
				if (nav_left_slot.p && (!current || dirty[1] & /*$$scope*/ 16384)) {
					update_slot(nav_left_slot, nav_left_slot_template, ctx, /*$$scope*/ ctx[45], dirty, get_nav_left_slot_changes, get_nav_left_slot_context);
				}
			}

			if (left_slot) {
				if (left_slot.p && (!current || dirty[1] & /*$$scope*/ 16384)) {
					update_slot(left_slot, left_slot_template, ctx, /*$$scope*/ ctx[45], dirty, get_left_slot_changes, get_left_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(nav_left_slot, local);
			transition_in(left_slot, local);
			current = true;
		},
		o(local) {
			transition_out(nav_left_slot, local);
			transition_out(left_slot, local);
			current = false;
		},
		d(detaching) {
			if (nav_left_slot) nav_left_slot.d(detaching);
			if (detaching) detach(t);
			if (left_slot) left_slot.d(detaching);
		}
	};
}

// (203:4) {#if title || subtitle || hasTitleSlots}
function create_if_block_2(ctx) {
	let navtitle;
	let current;

	navtitle = new NavTitle({
			props: {
				title: /*title*/ ctx[4],
				subtitle: /*subtitle*/ ctx[5],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(navtitle.$$.fragment);
		},
		m(target, anchor) {
			mount_component(navtitle, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const navtitle_changes = {};
			if (dirty[0] & /*title*/ 16) navtitle_changes.title = /*title*/ ctx[4];
			if (dirty[0] & /*subtitle*/ 32) navtitle_changes.subtitle = /*subtitle*/ ctx[5];

			if (dirty[1] & /*$$scope*/ 16384) {
				navtitle_changes.$$scope = { dirty, ctx };
			}

			navtitle.$set(navtitle_changes);
		},
		i(local) {
			if (current) return;
			transition_in(navtitle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navtitle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(navtitle, detaching);
		}
	};
}

// (204:6) <NavTitle {title} {subtitle}>
function create_default_slot_1(ctx) {
	let current;
	const title_slot_template = /*#slots*/ ctx[43].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[45], get_title_slot_context);

	return {
		c() {
			if (title_slot) title_slot.c();
		},
		m(target, anchor) {
			if (title_slot) {
				title_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (title_slot) {
				if (title_slot.p && (!current || dirty[1] & /*$$scope*/ 16384)) {
					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[45], dirty, get_title_slot_changes, get_title_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_slot, local);
			current = true;
		},
		o(local) {
			transition_out(title_slot, local);
			current = false;
		},
		d(detaching) {
			if (title_slot) title_slot.d(detaching);
		}
	};
}

// (208:4) {#if hasRightSlots}
function create_if_block_1(ctx) {
	let navright;
	let current;

	navright = new NavRight({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(navright.$$.fragment);
		},
		m(target, anchor) {
			mount_component(navright, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const navright_changes = {};

			if (dirty[1] & /*$$scope*/ 16384) {
				navright_changes.$$scope = { dirty, ctx };
			}

			navright.$set(navright_changes);
		},
		i(local) {
			if (current) return;
			transition_in(navright.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navright.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(navright, detaching);
		}
	};
}

// (209:6) <NavRight>
function create_default_slot(ctx) {
	let t;
	let current;
	const nav_right_slot_template = /*#slots*/ ctx[43]["nav-right"];
	const nav_right_slot = create_slot(nav_right_slot_template, ctx, /*$$scope*/ ctx[45], get_nav_right_slot_context);
	const right_slot_template = /*#slots*/ ctx[43].right;
	const right_slot = create_slot(right_slot_template, ctx, /*$$scope*/ ctx[45], get_right_slot_context);

	return {
		c() {
			if (nav_right_slot) nav_right_slot.c();
			t = space();
			if (right_slot) right_slot.c();
		},
		m(target, anchor) {
			if (nav_right_slot) {
				nav_right_slot.m(target, anchor);
			}

			insert(target, t, anchor);

			if (right_slot) {
				right_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (nav_right_slot) {
				if (nav_right_slot.p && (!current || dirty[1] & /*$$scope*/ 16384)) {
					update_slot(nav_right_slot, nav_right_slot_template, ctx, /*$$scope*/ ctx[45], dirty, get_nav_right_slot_changes, get_nav_right_slot_context);
				}
			}

			if (right_slot) {
				if (right_slot.p && (!current || dirty[1] & /*$$scope*/ 16384)) {
					update_slot(right_slot, right_slot_template, ctx, /*$$scope*/ ctx[45], dirty, get_right_slot_changes, get_right_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(nav_right_slot, local);
			transition_in(right_slot, local);
			current = true;
		},
		o(local) {
			transition_out(nav_right_slot, local);
			transition_out(right_slot, local);
			current = false;
		},
		d(detaching) {
			if (nav_right_slot) nav_right_slot.d(detaching);
			if (detaching) detach(t);
			if (right_slot) right_slot.d(detaching);
		}
	};
}

// (214:4) {#if largeTitle || hasTitleLargeSlots}
function create_if_block(ctx) {
	let div1;
	let div0;
	let t0_value = plainText(/*largeTitle*/ ctx[11]) + "";
	let t0;
	let t1;
	let current;
	const title_large_slot_template = /*#slots*/ ctx[43]["title-large"];
	const title_large_slot = create_slot(title_large_slot_template, ctx, /*$$scope*/ ctx[45], get_title_large_slot_context);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (title_large_slot) title_large_slot.c();
			attr(div0, "class", "title-large-text");
			attr(div1, "class", "title-large");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, t0);
			append(div0, t1);

			if (title_large_slot) {
				title_large_slot.m(div0, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*largeTitle*/ 2048) && t0_value !== (t0_value = plainText(/*largeTitle*/ ctx[11]) + "")) set_data(t0, t0_value);

			if (title_large_slot) {
				if (title_large_slot.p && (!current || dirty[1] & /*$$scope*/ 16384)) {
					update_slot(title_large_slot, title_large_slot_template, ctx, /*$$scope*/ ctx[45], dirty, get_title_large_slot_changes, get_title_large_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_large_slot, local);
			current = true;
		},
		o(local) {
			transition_out(title_large_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (title_large_slot) title_large_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let t0;
	let t1;
	let div1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let current;
	const before_inner_slot_template = /*#slots*/ ctx[43]["before-inner"];
	const before_inner_slot = create_slot(before_inner_slot_template, ctx, /*$$scope*/ ctx[45], get_before_inner_slot_context);
	let if_block0 = (/*backLink*/ ctx[0] || /*hasLeftSlots*/ ctx[8]) && create_if_block_3(ctx);
	let if_block1 = (/*title*/ ctx[4] || /*subtitle*/ ctx[5] || /*hasTitleSlots*/ ctx[10]) && create_if_block_2(ctx);
	let if_block2 = /*hasRightSlots*/ ctx[9] && create_if_block_1(ctx);
	let if_block3 = (/*largeTitle*/ ctx[11] || /*hasTitleLargeSlots*/ ctx[12]) && create_if_block(ctx);
	const default_slot_template = /*#slots*/ ctx[43].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[45], null);
	const after_inner_slot_template = /*#slots*/ ctx[43]["after-inner"];
	const after_inner_slot = create_slot(after_inner_slot_template, ctx, /*$$scope*/ ctx[45], get_after_inner_slot_context);

	let div2_levels = [
		{ class: /*classes*/ ctx[13] },
		{ "data-f7-slot": /*f7Slot*/ ctx[6] },
		restProps(/*$$restProps*/ ctx[16])
	];

	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t0 = space();
			if (before_inner_slot) before_inner_slot.c();
			t1 = space();
			div1 = element("div");
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (default_slot) default_slot.c();
			t6 = space();
			if (after_inner_slot) after_inner_slot.c();
			attr(div0, "class", "navbar-bg");
			attr(div1, "class", /*innerClasses*/ ctx[14]);
			set_attributes(div2, div2_data);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t0);

			if (before_inner_slot) {
				before_inner_slot.m(div2, null);
			}

			append(div2, t1);
			append(div2, div1);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t2);
			if (if_block1) if_block1.m(div1, null);
			append(div1, t3);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t4);
			if (if_block3) if_block3.m(div1, null);
			append(div1, t5);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div2, t6);

			if (after_inner_slot) {
				after_inner_slot.m(div2, null);
			}

			/*div2_binding*/ ctx[44](div2);
			current = true;
		},
		p(ctx, dirty) {
			if (before_inner_slot) {
				if (before_inner_slot.p && (!current || dirty[1] & /*$$scope*/ 16384)) {
					update_slot(before_inner_slot, before_inner_slot_template, ctx, /*$$scope*/ ctx[45], dirty, get_before_inner_slot_changes, get_before_inner_slot_context);
				}
			}

			if (/*backLink*/ ctx[0] || /*hasLeftSlots*/ ctx[8]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*backLink, hasLeftSlots*/ 257) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t2);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*title*/ ctx[4] || /*subtitle*/ ctx[5] || /*hasTitleSlots*/ ctx[10]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*title, subtitle, hasTitleSlots*/ 1072) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*hasRightSlots*/ ctx[9]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*hasRightSlots*/ 512) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div1, t4);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*largeTitle*/ ctx[11] || /*hasTitleLargeSlots*/ ctx[12]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*largeTitle, hasTitleLargeSlots*/ 6144) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div1, t5);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 16384)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[45], dirty, null, null);
				}
			}

			if (!current || dirty[0] & /*innerClasses*/ 16384) {
				attr(div1, "class", /*innerClasses*/ ctx[14]);
			}

			if (after_inner_slot) {
				if (after_inner_slot.p && (!current || dirty[1] & /*$$scope*/ 16384)) {
					update_slot(after_inner_slot, after_inner_slot_template, ctx, /*$$scope*/ ctx[45], dirty, get_after_inner_slot_changes, get_after_inner_slot_context);
				}
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
				(!current || dirty[0] & /*classes*/ 8192) && { class: /*classes*/ ctx[13] },
				(!current || dirty[0] & /*f7Slot*/ 64) && { "data-f7-slot": /*f7Slot*/ ctx[6] },
				dirty[0] & /*$$restProps*/ 65536 && restProps(/*$$restProps*/ ctx[16])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(before_inner_slot, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(default_slot, local);
			transition_in(after_inner_slot, local);
			current = true;
		},
		o(local) {
			transition_out(before_inner_slot, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(default_slot, local);
			transition_out(after_inner_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (before_inner_slot) before_inner_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (default_slot) default_slot.d(detaching);
			if (after_inner_slot) after_inner_slot.d(detaching);
			/*div2_binding*/ ctx[44](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let hasLeftSlots;
	let hasRightSlots;
	let hasTitleSlots;
	let largeTitle;
	let hasTitleLargeSlots;
	let addLeftTitleClass;
	let addCenterTitleClass;
	let isLarge;
	let isTransparent;
	let isTransparentVisible;
	let classes;
	let innerClasses;

	const omit_props_names = [
		"class","backLink","backLinkUrl","backLinkForce","backLinkShowText","sliding","title","subtitle","hidden","noShadow","noHairline","innerClass","innerClassName","large","largeTransparent","transparent","titleLarge","f7Slot","hide","show","size"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { backLink = undefined } = $$props;
	let { backLinkUrl = undefined } = $$props;
	let { backLinkForce = false } = $$props;
	let { backLinkShowText = undefined } = $$props;
	let { sliding = true } = $$props;
	let { title = undefined } = $$props;
	let { subtitle = undefined } = $$props;
	let { hidden = false } = $$props;
	let { noShadow = false } = $$props;
	let { noHairline = false } = $$props;
	let { innerClass = undefined } = $$props;
	let { innerClassName = undefined } = $$props;
	let { large = false } = $$props;
	let { largeTransparent = false } = $$props;
	let { transparent = false } = $$props;
	let { titleLarge = undefined } = $$props;
	let { f7Slot = "fixed" } = $$props;
	let el;

	let theme = useTheme(t => {
		$$invalidate(31, theme = t);
	});

	let routerPositionClass = "";
	let largeCollapsed = false;
	let routerNavbarRole = null;
	let routerNavbarRoleDetailRoot = false;
	let routerNavbarMasterStack = false;
	let transparentVisible = false;

	function hide(animate) {
		app.f7.navbar.hide(el, animate);
	}

	function show(animate) {
		app.f7.navbar.show(el, animate);
	}

	function size() {
		app.f7.navbar.size(el);
	}

	function onHide(navbarEl) {
		if (el !== navbarEl) return;
		emit("navbarHide");
	}

	function onShow(navbarEl) {
		if (el !== navbarEl) return;
		emit("navbarShow");
	}

	function onNavbarTransparentShow(navbarEl) {
		if (el !== navbarEl) return;
		$$invalidate(37, transparentVisible = true);
		emit("navbarTransparentShow");
	}

	function onNavbarTransparentHide(navbarEl) {
		if (el !== navbarEl) return;
		$$invalidate(37, transparentVisible = false);
		emit("navbarTransparentHide");
	}

	function onExpand(navbarEl) {
		if (el !== navbarEl) return;
		$$invalidate(33, largeCollapsed = false);
		emit("navbarExpand");
	}

	function onCollapse(navbarEl) {
		if (el !== navbarEl) return;
		$$invalidate(33, largeCollapsed = true);
		emit("navbarCollapse");
	}

	function onNavbarPosition(navbarEl, position) {
		if (el !== navbarEl) return;
		$$invalidate(32, routerPositionClass = position ? `navbar-${position}` : position);
	}

	function onNavbarRole(navbarEl, rolesData) {
		if (el !== navbarEl) return;
		$$invalidate(34, routerNavbarRole = rolesData.role);
		$$invalidate(35, routerNavbarRoleDetailRoot = rolesData.detailRoot);
	}

	function onNavbarMasterStack(navbarEl) {
		if (el !== navbarEl) return;
		$$invalidate(36, routerNavbarMasterStack = true);
	}

	function onNavbarMasterUnstack(navbarEl) {
		if (el !== navbarEl) return;
		$$invalidate(36, routerNavbarMasterStack = false);
	}

	function onBackClick() {
		emit("clickBack");
	}

	function mountNavbar() {
		app.f7.on("navbarShow", onShow);
		app.f7.on("navbarHide", onHide);
		app.f7.on("navbarCollapse", onCollapse);
		app.f7.on("navbarExpand", onExpand);
		app.f7.on("navbarPosition", onNavbarPosition);
		app.f7.on("navbarRole", onNavbarRole);
		app.f7.on("navbarMasterStack", onNavbarMasterStack);
		app.f7.on("navbarMasterUnstack", onNavbarMasterUnstack);
		app.f7.on("navbarTransparentShow", onNavbarTransparentShow);
		app.f7.on("navbarTransparentHide", onNavbarTransparentHide);
	}

	function destroyNavbar() {
		app.f7.off("navbarShow", onShow);
		app.f7.off("navbarHide", onHide);
		app.f7.off("navbarCollapse", onCollapse);
		app.f7.off("navbarExpand", onExpand);
		app.f7.off("navbarPosition", onNavbarPosition);
		app.f7.off("navbarRole", onNavbarRole);
		app.f7.off("navbarMasterStack", onNavbarMasterStack);
		app.f7.off("navbarMasterUnstack", onNavbarMasterUnstack);
		app.f7.off("navbarTransparentShow", onNavbarTransparentShow);
		app.f7.off("navbarTransparentHide", onNavbarTransparentHide);
	}

	onMount(() => {
		f7ready(() => {
			mountNavbar();
		});
	});

	afterUpdate(() => {
		if (!app.f7) return;
		app.f7.navbar.size(el);
	});

	onDestroy(() => {
		if (!app.f7) return;
		destroyNavbar();
	});

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(7, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(59, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(17, className = $$new_props.class);
		if ("backLink" in $$new_props) $$invalidate(0, backLink = $$new_props.backLink);
		if ("backLinkUrl" in $$new_props) $$invalidate(1, backLinkUrl = $$new_props.backLinkUrl);
		if ("backLinkForce" in $$new_props) $$invalidate(2, backLinkForce = $$new_props.backLinkForce);
		if ("backLinkShowText" in $$new_props) $$invalidate(3, backLinkShowText = $$new_props.backLinkShowText);
		if ("sliding" in $$new_props) $$invalidate(18, sliding = $$new_props.sliding);
		if ("title" in $$new_props) $$invalidate(4, title = $$new_props.title);
		if ("subtitle" in $$new_props) $$invalidate(5, subtitle = $$new_props.subtitle);
		if ("hidden" in $$new_props) $$invalidate(19, hidden = $$new_props.hidden);
		if ("noShadow" in $$new_props) $$invalidate(20, noShadow = $$new_props.noShadow);
		if ("noHairline" in $$new_props) $$invalidate(21, noHairline = $$new_props.noHairline);
		if ("innerClass" in $$new_props) $$invalidate(22, innerClass = $$new_props.innerClass);
		if ("innerClassName" in $$new_props) $$invalidate(23, innerClassName = $$new_props.innerClassName);
		if ("large" in $$new_props) $$invalidate(24, large = $$new_props.large);
		if ("largeTransparent" in $$new_props) $$invalidate(25, largeTransparent = $$new_props.largeTransparent);
		if ("transparent" in $$new_props) $$invalidate(26, transparent = $$new_props.transparent);
		if ("titleLarge" in $$new_props) $$invalidate(27, titleLarge = $$new_props.titleLarge);
		if ("f7Slot" in $$new_props) $$invalidate(6, f7Slot = $$new_props.f7Slot);
		if ("$$scope" in $$new_props) $$invalidate(45, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*titleLarge, large, title*/ 150994960) {
			$: $$invalidate(11, largeTitle = titleLarge || large && title);
		}

		if ($$self.$$.dirty[1] & /*theme*/ 1) {
			$: $$invalidate(38, addLeftTitleClass = theme && theme.ios && app.f7 && !app.f7.params.navbar.iosCenterTitle);
		}

		if ($$self.$$.dirty[1] & /*theme*/ 1) {
			$: $$invalidate(39, addCenterTitleClass = theme && theme.md && app.f7 && app.f7.params.navbar.mdCenterTitle || theme && theme.aurora && app.f7 && app.f7.params.navbar.auroraCenterTitle);
		}

		if ($$self.$$.dirty[0] & /*large, largeTransparent*/ 50331648) {
			$: $$invalidate(40, isLarge = large || largeTransparent);
		}

		if ($$self.$$.dirty[0] & /*transparent, largeTransparent*/ 100663296 | $$self.$$.dirty[1] & /*isLarge*/ 512) {
			$: $$invalidate(41, isTransparent = transparent || isLarge && largeTransparent);
		}

		if ($$self.$$.dirty[1] & /*isTransparent, transparentVisible*/ 1088) {
			$: $$invalidate(42, isTransparentVisible = isTransparent && transparentVisible);
		}

		$: $$invalidate(13, classes = classNames(
			className,
			"navbar",
			routerPositionClass,
			{
				"navbar-hidden": hidden,
				"navbar-large": isLarge,
				"navbar-large-collapsed": isLarge && largeCollapsed,
				"navbar-transparent": isTransparent,
				"navbar-transparent-visible": isTransparentVisible,
				"navbar-master": routerNavbarRole === "master",
				"navbar-master-detail": routerNavbarRole === "detail",
				"navbar-master-detail-root": routerNavbarRoleDetailRoot === true,
				"navbar-master-stacked": routerNavbarMasterStack === true,
				"no-shadow": noShadow,
				"no-hairline": noHairline
			},
			colorClasses($$props)
		));

		if ($$self.$$.dirty[0] & /*innerClass, innerClassName, sliding*/ 12845056 | $$self.$$.dirty[1] & /*addLeftTitleClass, addCenterTitleClass*/ 384) {
			$: $$invalidate(14, innerClasses = classNames("navbar-inner", innerClass, innerClassName, {
				sliding,
				"navbar-inner-left-title": addLeftTitleClass,
				"navbar-inner-centered-title": addCenterTitleClass
			}));
		}
	};

	$: $$invalidate(8, hasLeftSlots = $$slots["nav-left"] || $$slots["left"]);

	// eslint-disable-next-line
	$: $$invalidate(9, hasRightSlots = $$slots["nav-right"] || $$slots["right"]);

	// eslint-disable-next-line
	$: $$invalidate(10, hasTitleSlots = $$slots["title"]);

	// eslint-disable-next-line
	$: $$invalidate(12, hasTitleLargeSlots = $$slots["title-large"]);

	$$props = exclude_internal_props($$props);

	return [
		backLink,
		backLinkUrl,
		backLinkForce,
		backLinkShowText,
		title,
		subtitle,
		f7Slot,
		el,
		hasLeftSlots,
		hasRightSlots,
		hasTitleSlots,
		largeTitle,
		hasTitleLargeSlots,
		classes,
		innerClasses,
		onBackClick,
		$$restProps,
		className,
		sliding,
		hidden,
		noShadow,
		noHairline,
		innerClass,
		innerClassName,
		large,
		largeTransparent,
		transparent,
		titleLarge,
		hide,
		show,
		size,
		theme,
		routerPositionClass,
		largeCollapsed,
		routerNavbarRole,
		routerNavbarRoleDetailRoot,
		routerNavbarMasterStack,
		transparentVisible,
		addLeftTitleClass,
		addCenterTitleClass,
		isLarge,
		isTransparent,
		isTransparentVisible,
		slots,
		div2_binding,
		$$scope
	];
}

class Navbar extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				class: 17,
				backLink: 0,
				backLinkUrl: 1,
				backLinkForce: 2,
				backLinkShowText: 3,
				sliding: 18,
				title: 4,
				subtitle: 5,
				hidden: 19,
				noShadow: 20,
				noHairline: 21,
				innerClass: 22,
				innerClassName: 23,
				large: 24,
				largeTransparent: 25,
				transparent: 26,
				titleLarge: 27,
				f7Slot: 6,
				hide: 28,
				show: 29,
				size: 30
			},
			[-1, -1]
		);
	}

	get hide() {
		return this.$$.ctx[28];
	}

	get show() {
		return this.$$.ctx[29];
	}

	get size() {
		return this.$$.ctx[30];
	}
}

export default Navbar;