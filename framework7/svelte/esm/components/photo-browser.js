/* photo-browser.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	assign,
	exclude_internal_props,
	init as init_1,
	safe_not_equal
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy } from "svelte";
import { extend, createEmitter } from "../shared/utils";
import { app, f7ready } from "../shared/f7";

function instance_1($$self, $$props, $$invalidate) {
	const emit = createEmitter(createEventDispatcher, $$props);
	let { init = true } = $$props;
	let { params = undefined } = $$props;
	let { photos = undefined } = $$props;
	let { exposition = true } = $$props;
	let { expositionHideCaptions = false } = $$props;
	let { type = undefined } = $$props;
	let { navbar = true } = $$props;
	let { toolbar = true } = $$props;
	let { theme = undefined } = $$props;
	let { captionsTheme = undefined } = $$props;
	let { iconsColor = undefined } = $$props;
	let { swipeToClose = true } = $$props;
	let { pageBackLinkText = undefined } = $$props;
	let { popupCloseLinkText = undefined } = $$props;
	let { navbarOfText = undefined } = $$props;
	let { navbarShowCount = undefined } = $$props;
	let { swiper = undefined } = $$props;
	let { url = undefined } = $$props;
	let { routableModals = false } = $$props;
	let { virtualSlides = true } = $$props;
	let { view = undefined } = $$props;
	let { renderNavbar = undefined } = $$props;
	let { renderToolbar = undefined } = $$props;
	let { renderCaption = undefined } = $$props;
	let { renderObject = undefined } = $$props;
	let { renderLazyPhoto = undefined } = $$props;
	let { renderPhoto = undefined } = $$props;
	let { renderPage = undefined } = $$props;
	let { renderPopup = undefined } = $$props;
	let { renderStandalone = undefined } = $$props;
	let f7PhotoBrowser;

	function instance() {
		return f7PhotoBrowser;
	}

	function open(index) {
		return f7PhotoBrowser.open(index);
	}

	function close() {
		return f7PhotoBrowser.close();
	}

	function expositionToggle() {
		return f7PhotoBrowser.expositionToggle();
	}

	function expositionEnable() {
		return f7PhotoBrowser.expositionEnable();
	}

	function expositionDisable() {
		return f7PhotoBrowser.expositionDisable();
	}

	let initialWatched = false;

	function watchPhotos(newValue) {
		if (!initialWatched) {
			initialWatched = true;
			return;
		}

		if (!f7PhotoBrowser) return;
		f7PhotoBrowser.params.photos = newValue;

		if (f7PhotoBrowser.opened && f7PhotoBrowser.swiper) {
			f7PhotoBrowser.swiper.update();
		}
	}

	onMount(() => {
		if (!init) return;

		f7ready(() => {
			let pbParams;

			if (typeof params !== "undefined") pbParams = params; else {
				pbParams = {
					photos,
					exposition,
					expositionHideCaptions,
					type,
					navbar,
					toolbar,
					theme,
					captionsTheme,
					iconsColor,
					swipeToClose,
					pageBackLinkText,
					popupCloseLinkText,
					navbarOfText,
					navbarShowCount,
					swiper,
					url,
					routableModals,
					virtualSlides,
					view,
					renderNavbar,
					renderToolbar,
					renderCaption,
					renderObject,
					renderLazyPhoto,
					renderPhoto,
					renderPage,
					renderPopup,
					renderStandalone
				};
			}

			Object.keys(pbParams).forEach(param => {
				if (typeof pbParams[param] === "undefined" || pbParams[param] === "") delete pbParams[param];
			});

			pbParams = extend({}, pbParams, {
				on: {
					open() {
						emit("photoBrowserOpen");
					},
					close() {
						emit("photoBrowserClose");
					},
					opened() {
						emit("photoBrowserOpened");
					},
					closed() {
						emit("photoBrowserClosed");
					},
					swipeToClose() {
						emit("photoBrowserSwipeToClose");
					}
				}
			});

			f7PhotoBrowser = app.f7.photoBrowser.create(pbParams);
		});
	});

	onDestroy(() => {
		if (f7PhotoBrowser && f7PhotoBrowser.destroy) {
			f7PhotoBrowser.destroy();
			f7PhotoBrowser = null;
		}
	});

	$$self.$$set = $$new_props => {
		$$invalidate(40, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("init" in $$new_props) $$invalidate(0, init = $$new_props.init);
		if ("params" in $$new_props) $$invalidate(1, params = $$new_props.params);
		if ("photos" in $$new_props) $$invalidate(2, photos = $$new_props.photos);
		if ("exposition" in $$new_props) $$invalidate(3, exposition = $$new_props.exposition);
		if ("expositionHideCaptions" in $$new_props) $$invalidate(4, expositionHideCaptions = $$new_props.expositionHideCaptions);
		if ("type" in $$new_props) $$invalidate(5, type = $$new_props.type);
		if ("navbar" in $$new_props) $$invalidate(6, navbar = $$new_props.navbar);
		if ("toolbar" in $$new_props) $$invalidate(7, toolbar = $$new_props.toolbar);
		if ("theme" in $$new_props) $$invalidate(8, theme = $$new_props.theme);
		if ("captionsTheme" in $$new_props) $$invalidate(9, captionsTheme = $$new_props.captionsTheme);
		if ("iconsColor" in $$new_props) $$invalidate(10, iconsColor = $$new_props.iconsColor);
		if ("swipeToClose" in $$new_props) $$invalidate(11, swipeToClose = $$new_props.swipeToClose);
		if ("pageBackLinkText" in $$new_props) $$invalidate(12, pageBackLinkText = $$new_props.pageBackLinkText);
		if ("popupCloseLinkText" in $$new_props) $$invalidate(13, popupCloseLinkText = $$new_props.popupCloseLinkText);
		if ("navbarOfText" in $$new_props) $$invalidate(14, navbarOfText = $$new_props.navbarOfText);
		if ("navbarShowCount" in $$new_props) $$invalidate(15, navbarShowCount = $$new_props.navbarShowCount);
		if ("swiper" in $$new_props) $$invalidate(16, swiper = $$new_props.swiper);
		if ("url" in $$new_props) $$invalidate(17, url = $$new_props.url);
		if ("routableModals" in $$new_props) $$invalidate(18, routableModals = $$new_props.routableModals);
		if ("virtualSlides" in $$new_props) $$invalidate(19, virtualSlides = $$new_props.virtualSlides);
		if ("view" in $$new_props) $$invalidate(20, view = $$new_props.view);
		if ("renderNavbar" in $$new_props) $$invalidate(21, renderNavbar = $$new_props.renderNavbar);
		if ("renderToolbar" in $$new_props) $$invalidate(22, renderToolbar = $$new_props.renderToolbar);
		if ("renderCaption" in $$new_props) $$invalidate(23, renderCaption = $$new_props.renderCaption);
		if ("renderObject" in $$new_props) $$invalidate(24, renderObject = $$new_props.renderObject);
		if ("renderLazyPhoto" in $$new_props) $$invalidate(25, renderLazyPhoto = $$new_props.renderLazyPhoto);
		if ("renderPhoto" in $$new_props) $$invalidate(26, renderPhoto = $$new_props.renderPhoto);
		if ("renderPage" in $$new_props) $$invalidate(27, renderPage = $$new_props.renderPage);
		if ("renderPopup" in $$new_props) $$invalidate(28, renderPopup = $$new_props.renderPopup);
		if ("renderStandalone" in $$new_props) $$invalidate(29, renderStandalone = $$new_props.renderStandalone);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*photos*/ 4) {
			$: watchPhotos(photos);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		init,
		params,
		photos,
		exposition,
		expositionHideCaptions,
		type,
		navbar,
		toolbar,
		theme,
		captionsTheme,
		iconsColor,
		swipeToClose,
		pageBackLinkText,
		popupCloseLinkText,
		navbarOfText,
		navbarShowCount,
		swiper,
		url,
		routableModals,
		virtualSlides,
		view,
		renderNavbar,
		renderToolbar,
		renderCaption,
		renderObject,
		renderLazyPhoto,
		renderPhoto,
		renderPage,
		renderPopup,
		renderStandalone,
		instance,
		open,
		close,
		expositionToggle,
		expositionEnable,
		expositionDisable
	];
}

class Photo_browser extends SvelteComponent {
	constructor(options) {
		super();

		init_1(
			this,
			options,
			instance_1,
			null,
			safe_not_equal,
			{
				init: 0,
				params: 1,
				photos: 2,
				exposition: 3,
				expositionHideCaptions: 4,
				type: 5,
				navbar: 6,
				toolbar: 7,
				theme: 8,
				captionsTheme: 9,
				iconsColor: 10,
				swipeToClose: 11,
				pageBackLinkText: 12,
				popupCloseLinkText: 13,
				navbarOfText: 14,
				navbarShowCount: 15,
				swiper: 16,
				url: 17,
				routableModals: 18,
				virtualSlides: 19,
				view: 20,
				renderNavbar: 21,
				renderToolbar: 22,
				renderCaption: 23,
				renderObject: 24,
				renderLazyPhoto: 25,
				renderPhoto: 26,
				renderPage: 27,
				renderPopup: 28,
				renderStandalone: 29,
				instance: 30,
				open: 31,
				close: 32,
				expositionToggle: 33,
				expositionEnable: 34,
				expositionDisable: 35
			},
			[-1, -1]
		);
	}

	get instance() {
		return this.$$.ctx[30];
	}

	get open() {
		return this.$$.ctx[31];
	}

	get close() {
		return this.$$.ctx[32];
	}

	get expositionToggle() {
		return this.$$.ctx[33];
	}

	get expositionEnable() {
		return this.$$.ctx[34];
	}

	get expositionDisable() {
		return this.$$.ctx[35];
	}
}

export default Photo_browser;