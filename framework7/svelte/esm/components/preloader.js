/* preloader.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	assign,
	attr,
	compute_rest_props,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	noop,
	safe_not_equal,
	set_attributes
} from "svelte/internal";

import { restProps } from "../shared/rest-props";
import { colorClasses } from "../shared/mixins";
import { classNames } from "../shared/utils";
import { useTheme } from "../shared/use-theme";

function create_else_block(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			attr(span, "class", "preloader-inner");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (48:34) 
function create_if_block_2(ctx) {
	let span1;

	return {
		c() {
			span1 = element("span");
			span1.innerHTML = `<span class="preloader-inner-circle"></span>`;
			attr(span1, "class", "preloader-inner");
		},
		m(target, anchor) {
			insert(target, span1, anchor);
		},
		d(detaching) {
			if (detaching) detach(span1);
		}
	};
}

// (37:31) 
function create_if_block_1(ctx) {
	let span8;

	return {
		c() {
			span8 = element("span");

			span8.innerHTML = `<span class="preloader-inner-line"></span> 
      <span class="preloader-inner-line"></span> 
      <span class="preloader-inner-line"></span> 
      <span class="preloader-inner-line"></span> 
      <span class="preloader-inner-line"></span> 
      <span class="preloader-inner-line"></span> 
      <span class="preloader-inner-line"></span> 
      <span class="preloader-inner-line"></span>`;

			attr(span8, "class", "preloader-inner");
		},
		m(target, anchor) {
			insert(target, span8, anchor);
		},
		d(detaching) {
			if (detaching) detach(span8);
		}
	};
}

// (31:2) {#if theme && theme.md}
function create_if_block(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			span.innerHTML = `<svg viewBox="0 0 36 36"><circle cx="18" cy="18" r="16"></circle></svg>`;
			attr(span, "class", "preloader-inner");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let span;

	function select_block_type(ctx, dirty) {
		if (/*theme*/ ctx[0] && /*theme*/ ctx[0].md) return create_if_block;
		if (/*theme*/ ctx[0] && /*theme*/ ctx[0].ios) return create_if_block_1;
		if (/*theme*/ ctx[0] && /*theme*/ ctx[0].aurora) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	let span_levels = [
		{ style: /*preloaderStyle*/ ctx[1] },
		{ class: /*classes*/ ctx[2] },
		restProps(/*$$restProps*/ ctx[3])
	];

	let span_data = {};

	for (let i = 0; i < span_levels.length; i += 1) {
		span_data = assign(span_data, span_levels[i]);
	}

	return {
		c() {
			span = element("span");
			if_block.c();
			set_attributes(span, span_data);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if_block.m(span, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span, null);
				}
			}

			set_attributes(span, span_data = get_spread_update(span_levels, [
				dirty & /*preloaderStyle*/ 2 && { style: /*preloaderStyle*/ ctx[1] },
				dirty & /*classes*/ 4 && { class: /*classes*/ ctx[2] },
				dirty & /*$$restProps*/ 8 && restProps(/*$$restProps*/ ctx[3])
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(span);
			if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let sizeComputed;
	let preloaderStyle;
	let classes;
	const omit_props_names = ["style","class","size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { style = undefined } = $$props;
	let { class: className = undefined } = $$props;
	let { size = undefined } = $$props;

	let theme = useTheme(t => {
		$$invalidate(0, theme = t);
	});

	$$self.$$set = $$new_props => {
		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("style" in $$new_props) $$invalidate(4, style = $$new_props.style);
		if ("class" in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ("size" in $$new_props) $$invalidate(6, size = $$new_props.size);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*size*/ 64) {
			$: $$invalidate(7, sizeComputed = size && typeof size === "string" && size.indexOf("px") >= 0
			? size.replace("px", "")
			: size);
		}

		if ($$self.$$.dirty & /*style, sizeComputed*/ 144) {
			$: $$invalidate(1, preloaderStyle = ((style || "") + (sizeComputed
			? `;width: ${sizeComputed}px; height: ${sizeComputed}px; --f7-preloader-size: ${sizeComputed}px`
			: "")).replace(";;", ";"));
		}

		$: $$invalidate(2, classes = classNames(className, "preloader", colorClasses($$props)));
	};

	$$props = exclude_internal_props($$props);

	return [
		theme,
		preloaderStyle,
		classes,
		$$restProps,
		style,
		className,
		size,
		sizeComputed
	];
}

class Preloader extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { style: 4, class: 5, size: 6 });
	}
}

export default Preloader;