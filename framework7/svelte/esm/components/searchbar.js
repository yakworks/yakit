/* searchbar.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_slot,
	detach,
	element,
	empty,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init as init_1,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_attributes,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, noUndefinedProps, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app, f7ready } from "../shared/f7";

const get_after_inner_slot_changes_1 = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_after_inner_slot_context_1 = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_default_slot_changes_1 = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_default_slot_context_1 = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_inner_end_slot_changes_1 = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_inner_end_slot_context_1 = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_input_wrap_end_slot_changes_1 = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_input_wrap_end_slot_context_1 = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_input_wrap_start_slot_changes_1 = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_input_wrap_start_slot_context_1 = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_inner_start_slot_changes_1 = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_inner_start_slot_context_1 = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_before_inner_slot_changes_1 = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_before_inner_slot_context_1 = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_after_inner_slot_changes = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_after_inner_slot_context = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_default_slot_changes = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_default_slot_context = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_inner_end_slot_changes = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_inner_end_slot_context = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_input_wrap_end_slot_changes = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_input_wrap_end_slot_context = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_input_wrap_start_slot_changes = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_input_wrap_start_slot_context = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_inner_start_slot_changes = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_inner_start_slot_context = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

const get_before_inner_slot_changes = dirty => ({
	searchbar: dirty[0] & /*f7Searchbar*/ 512
});

const get_before_inner_slot_context = ctx => ({ searchbar: /*f7Searchbar*/ ctx[9] });

// (210:0) {:else}
function create_else_block(ctx) {
	let div2;
	let t0;
	let div1;
	let t1;
	let div0;
	let t2;
	let input;
	let input_value_value;
	let t3;
	let i;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let current;
	let mounted;
	let dispose;
	const before_inner_slot_template = /*#slots*/ ctx[49]["before-inner"];
	const before_inner_slot = create_slot(before_inner_slot_template, ctx, /*$$scope*/ ctx[48], get_before_inner_slot_context_1);
	const inner_start_slot_template = /*#slots*/ ctx[49]["inner-start"];
	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[48], get_inner_start_slot_context_1);
	const input_wrap_start_slot_template = /*#slots*/ ctx[49]["input-wrap-start"];
	const input_wrap_start_slot = create_slot(input_wrap_start_slot_template, ctx, /*$$scope*/ ctx[48], get_input_wrap_start_slot_context_1);
	let if_block0 = /*clearButton*/ ctx[6] && create_if_block_4(ctx);
	const input_wrap_end_slot_template = /*#slots*/ ctx[49]["input-wrap-end"];
	const input_wrap_end_slot = create_slot(input_wrap_end_slot_template, ctx, /*$$scope*/ ctx[48], get_input_wrap_end_slot_context_1);
	let if_block1 = /*disableButton*/ ctx[4] && create_if_block_3(ctx);
	const inner_end_slot_template = /*#slots*/ ctx[49]["inner-end"];
	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[48], get_inner_end_slot_context_1);
	const default_slot_template = /*#slots*/ ctx[49].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[48], get_default_slot_context_1);
	const after_inner_slot_template = /*#slots*/ ctx[49]["after-inner"];
	const after_inner_slot = create_slot(after_inner_slot_template, ctx, /*$$scope*/ ctx[48], get_after_inner_slot_context_1);

	let div2_levels = [
		{ class: /*classes*/ ctx[10] },
		{ "data-f7-slot": /*f7Slot*/ ctx[7] },
		restProps(/*$$restProps*/ ctx[18])
	];

	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			if (before_inner_slot) before_inner_slot.c();
			t0 = space();
			div1 = element("div");
			if (inner_start_slot) inner_start_slot.c();
			t1 = space();
			div0 = element("div");
			if (input_wrap_start_slot) input_wrap_start_slot.c();
			t2 = space();
			input = element("input");
			t3 = space();
			i = element("i");
			t4 = space();
			if (if_block0) if_block0.c();
			t5 = space();
			if (input_wrap_end_slot) input_wrap_end_slot.c();
			t6 = space();
			if (if_block1) if_block1.c();
			t7 = space();
			if (inner_end_slot) inner_end_slot.c();
			t8 = space();
			if (default_slot) default_slot.c();
			t9 = space();
			if (after_inner_slot) after_inner_slot.c();

			input.value = input_value_value = typeof /*value*/ ctx[0] === "undefined"
			? ""
			: /*value*/ ctx[0];

			attr(input, "placeholder", /*placeholder*/ ctx[2]);
			attr(input, "spellcheck", /*spellcheck*/ ctx[3]);
			attr(input, "type", "search");
			attr(i, "class", "searchbar-icon");
			attr(div0, "class", "searchbar-input-wrap");
			attr(div1, "class", "searchbar-inner");
			set_attributes(div2, div2_data);
		},
		m(target, anchor) {
			insert(target, div2, anchor);

			if (before_inner_slot) {
				before_inner_slot.m(div2, null);
			}

			append(div2, t0);
			append(div2, div1);

			if (inner_start_slot) {
				inner_start_slot.m(div1, null);
			}

			append(div1, t1);
			append(div1, div0);

			if (input_wrap_start_slot) {
				input_wrap_start_slot.m(div0, null);
			}

			append(div0, t2);
			append(div0, input);
			append(div0, t3);
			append(div0, i);
			append(div0, t4);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t5);

			if (input_wrap_end_slot) {
				input_wrap_end_slot.m(div0, null);
			}

			append(div1, t6);
			if (if_block1) if_block1.m(div1, null);
			append(div1, t7);

			if (inner_end_slot) {
				inner_end_slot.m(div1, null);
			}

			append(div1, t8);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div2, t9);

			if (after_inner_slot) {
				after_inner_slot.m(div2, null);
			}

			/*div2_binding*/ ctx[51](div2);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*onInput*/ ctx[12]),
					listen(input, "change", /*onChange*/ ctx[11]),
					listen(input, "focus", /*onFocus*/ ctx[13]),
					listen(input, "blur", /*onBlur*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (before_inner_slot) {
				if (before_inner_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(before_inner_slot, before_inner_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_before_inner_slot_changes_1, get_before_inner_slot_context_1);
				}
			}

			if (inner_start_slot) {
				if (inner_start_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(inner_start_slot, inner_start_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_inner_start_slot_changes_1, get_inner_start_slot_context_1);
				}
			}

			if (input_wrap_start_slot) {
				if (input_wrap_start_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(input_wrap_start_slot, input_wrap_start_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_input_wrap_start_slot_changes_1, get_input_wrap_start_slot_context_1);
				}
			}

			if (!current || dirty[0] & /*value*/ 1 && input_value_value !== (input_value_value = typeof /*value*/ ctx[0] === "undefined"
			? ""
			: /*value*/ ctx[0])) {
				input.value = input_value_value;
			}

			if (!current || dirty[0] & /*placeholder*/ 4) {
				attr(input, "placeholder", /*placeholder*/ ctx[2]);
			}

			if (!current || dirty[0] & /*spellcheck*/ 8) {
				attr(input, "spellcheck", /*spellcheck*/ ctx[3]);
			}

			if (/*clearButton*/ ctx[6]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(div0, t5);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (input_wrap_end_slot) {
				if (input_wrap_end_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(input_wrap_end_slot, input_wrap_end_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_input_wrap_end_slot_changes_1, get_input_wrap_end_slot_context_1);
				}
			}

			if (/*disableButton*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(div1, t7);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (inner_end_slot) {
				if (inner_end_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(inner_end_slot, inner_end_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_inner_end_slot_changes_1, get_inner_end_slot_context_1);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_default_slot_changes_1, get_default_slot_context_1);
				}
			}

			if (after_inner_slot) {
				if (after_inner_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(after_inner_slot, after_inner_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_after_inner_slot_changes_1, get_after_inner_slot_context_1);
				}
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
				(!current || dirty[0] & /*classes*/ 1024) && { class: /*classes*/ ctx[10] },
				(!current || dirty[0] & /*f7Slot*/ 128) && { "data-f7-slot": /*f7Slot*/ ctx[7] },
				dirty[0] & /*$$restProps*/ 262144 && restProps(/*$$restProps*/ ctx[18])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(before_inner_slot, local);
			transition_in(inner_start_slot, local);
			transition_in(input_wrap_start_slot, local);
			transition_in(input_wrap_end_slot, local);
			transition_in(inner_end_slot, local);
			transition_in(default_slot, local);
			transition_in(after_inner_slot, local);
			current = true;
		},
		o(local) {
			transition_out(before_inner_slot, local);
			transition_out(inner_start_slot, local);
			transition_out(input_wrap_start_slot, local);
			transition_out(input_wrap_end_slot, local);
			transition_out(inner_end_slot, local);
			transition_out(default_slot, local);
			transition_out(after_inner_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (before_inner_slot) before_inner_slot.d(detaching);
			if (inner_start_slot) inner_start_slot.d(detaching);
			if (input_wrap_start_slot) input_wrap_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (input_wrap_end_slot) input_wrap_end_slot.d(detaching);
			if (if_block1) if_block1.d();
			if (inner_end_slot) inner_end_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
			if (after_inner_slot) after_inner_slot.d(detaching);
			/*div2_binding*/ ctx[51](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (173:0) {#if form}
function create_if_block(ctx) {
	let form_1;
	let t0;
	let div1;
	let t1;
	let div0;
	let t2;
	let input;
	let input_value_value;
	let t3;
	let i;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let current;
	let mounted;
	let dispose;
	const before_inner_slot_template = /*#slots*/ ctx[49]["before-inner"];
	const before_inner_slot = create_slot(before_inner_slot_template, ctx, /*$$scope*/ ctx[48], get_before_inner_slot_context);
	const inner_start_slot_template = /*#slots*/ ctx[49]["inner-start"];
	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[48], get_inner_start_slot_context);
	const input_wrap_start_slot_template = /*#slots*/ ctx[49]["input-wrap-start"];
	const input_wrap_start_slot = create_slot(input_wrap_start_slot_template, ctx, /*$$scope*/ ctx[48], get_input_wrap_start_slot_context);
	let if_block0 = /*clearButton*/ ctx[6] && create_if_block_2(ctx);
	const input_wrap_end_slot_template = /*#slots*/ ctx[49]["input-wrap-end"];
	const input_wrap_end_slot = create_slot(input_wrap_end_slot_template, ctx, /*$$scope*/ ctx[48], get_input_wrap_end_slot_context);
	let if_block1 = /*disableButton*/ ctx[4] && create_if_block_1(ctx);
	const inner_end_slot_template = /*#slots*/ ctx[49]["inner-end"];
	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[48], get_inner_end_slot_context);
	const default_slot_template = /*#slots*/ ctx[49].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[48], get_default_slot_context);
	const after_inner_slot_template = /*#slots*/ ctx[49]["after-inner"];
	const after_inner_slot = create_slot(after_inner_slot_template, ctx, /*$$scope*/ ctx[48], get_after_inner_slot_context);

	let form_1_levels = [
		{ class: /*classes*/ ctx[10] },
		{ "data-f7-slot": /*f7Slot*/ ctx[7] },
		restProps(/*$$restProps*/ ctx[18])
	];

	let form_1_data = {};

	for (let i = 0; i < form_1_levels.length; i += 1) {
		form_1_data = assign(form_1_data, form_1_levels[i]);
	}

	return {
		c() {
			form_1 = element("form");
			if (before_inner_slot) before_inner_slot.c();
			t0 = space();
			div1 = element("div");
			if (inner_start_slot) inner_start_slot.c();
			t1 = space();
			div0 = element("div");
			if (input_wrap_start_slot) input_wrap_start_slot.c();
			t2 = space();
			input = element("input");
			t3 = space();
			i = element("i");
			t4 = space();
			if (if_block0) if_block0.c();
			t5 = space();
			if (input_wrap_end_slot) input_wrap_end_slot.c();
			t6 = space();
			if (if_block1) if_block1.c();
			t7 = space();
			if (inner_end_slot) inner_end_slot.c();
			t8 = space();
			if (default_slot) default_slot.c();
			t9 = space();
			if (after_inner_slot) after_inner_slot.c();

			input.value = input_value_value = typeof /*value*/ ctx[0] === "undefined"
			? ""
			: /*value*/ ctx[0];

			attr(input, "placeholder", /*placeholder*/ ctx[2]);
			attr(input, "spellcheck", /*spellcheck*/ ctx[3]);
			attr(input, "type", "search");
			attr(i, "class", "searchbar-icon");
			attr(div0, "class", "searchbar-input-wrap");
			attr(div1, "class", "searchbar-inner");
			set_attributes(form_1, form_1_data);
		},
		m(target, anchor) {
			insert(target, form_1, anchor);

			if (before_inner_slot) {
				before_inner_slot.m(form_1, null);
			}

			append(form_1, t0);
			append(form_1, div1);

			if (inner_start_slot) {
				inner_start_slot.m(div1, null);
			}

			append(div1, t1);
			append(div1, div0);

			if (input_wrap_start_slot) {
				input_wrap_start_slot.m(div0, null);
			}

			append(div0, t2);
			append(div0, input);
			append(div0, t3);
			append(div0, i);
			append(div0, t4);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t5);

			if (input_wrap_end_slot) {
				input_wrap_end_slot.m(div0, null);
			}

			append(div1, t6);
			if (if_block1) if_block1.m(div1, null);
			append(div1, t7);

			if (inner_end_slot) {
				inner_end_slot.m(div1, null);
			}

			append(div1, t8);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(form_1, t9);

			if (after_inner_slot) {
				after_inner_slot.m(form_1, null);
			}

			/*form_1_binding*/ ctx[50](form_1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*onInput*/ ctx[12]),
					listen(input, "change", /*onChange*/ ctx[11]),
					listen(input, "focus", /*onFocus*/ ctx[13]),
					listen(input, "blur", /*onBlur*/ ctx[14]),
					listen(form_1, "submit", /*onSubmit*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (before_inner_slot) {
				if (before_inner_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(before_inner_slot, before_inner_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_before_inner_slot_changes, get_before_inner_slot_context);
				}
			}

			if (inner_start_slot) {
				if (inner_start_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(inner_start_slot, inner_start_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_inner_start_slot_changes, get_inner_start_slot_context);
				}
			}

			if (input_wrap_start_slot) {
				if (input_wrap_start_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(input_wrap_start_slot, input_wrap_start_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_input_wrap_start_slot_changes, get_input_wrap_start_slot_context);
				}
			}

			if (!current || dirty[0] & /*value*/ 1 && input_value_value !== (input_value_value = typeof /*value*/ ctx[0] === "undefined"
			? ""
			: /*value*/ ctx[0])) {
				input.value = input_value_value;
			}

			if (!current || dirty[0] & /*placeholder*/ 4) {
				attr(input, "placeholder", /*placeholder*/ ctx[2]);
			}

			if (!current || dirty[0] & /*spellcheck*/ 8) {
				attr(input, "spellcheck", /*spellcheck*/ ctx[3]);
			}

			if (/*clearButton*/ ctx[6]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(div0, t5);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (input_wrap_end_slot) {
				if (input_wrap_end_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(input_wrap_end_slot, input_wrap_end_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_input_wrap_end_slot_changes, get_input_wrap_end_slot_context);
				}
			}

			if (/*disableButton*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div1, t7);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (inner_end_slot) {
				if (inner_end_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(inner_end_slot, inner_end_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_inner_end_slot_changes, get_inner_end_slot_context);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}

			if (after_inner_slot) {
				if (after_inner_slot.p && (!current || dirty[0] & /*f7Searchbar*/ 512 | dirty[1] & /*$$scope*/ 131072)) {
					update_slot(after_inner_slot, after_inner_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_after_inner_slot_changes, get_after_inner_slot_context);
				}
			}

			set_attributes(form_1, form_1_data = get_spread_update(form_1_levels, [
				(!current || dirty[0] & /*classes*/ 1024) && { class: /*classes*/ ctx[10] },
				(!current || dirty[0] & /*f7Slot*/ 128) && { "data-f7-slot": /*f7Slot*/ ctx[7] },
				dirty[0] & /*$$restProps*/ 262144 && restProps(/*$$restProps*/ ctx[18])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(before_inner_slot, local);
			transition_in(inner_start_slot, local);
			transition_in(input_wrap_start_slot, local);
			transition_in(input_wrap_end_slot, local);
			transition_in(inner_end_slot, local);
			transition_in(default_slot, local);
			transition_in(after_inner_slot, local);
			current = true;
		},
		o(local) {
			transition_out(before_inner_slot, local);
			transition_out(inner_start_slot, local);
			transition_out(input_wrap_start_slot, local);
			transition_out(input_wrap_end_slot, local);
			transition_out(inner_end_slot, local);
			transition_out(default_slot, local);
			transition_out(after_inner_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(form_1);
			if (before_inner_slot) before_inner_slot.d(detaching);
			if (inner_start_slot) inner_start_slot.d(detaching);
			if (input_wrap_start_slot) input_wrap_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (input_wrap_end_slot) input_wrap_end_slot.d(detaching);
			if (if_block1) if_block1.d();
			if (inner_end_slot) inner_end_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
			if (after_inner_slot) after_inner_slot.d(detaching);
			/*form_1_binding*/ ctx[50](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (228:8) {#if clearButton}
function create_if_block_4(ctx) {
	let span;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			attr(span, "class", "input-clear-button");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (!mounted) {
				dispose = listen(span, "click", /*onClearButtonClick*/ ctx[16]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			dispose();
		}
	};
}

// (231:6) {#if disableButton}
function create_if_block_3(ctx) {
	let span;
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			t = text(/*disableButtonText*/ ctx[5]);
			attr(span, "class", "searchbar-disable-button");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);

			if (!mounted) {
				dispose = listen(span, "click", /*onDisableButtonClick*/ ctx[17]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*disableButtonText*/ 32) set_data(t, /*disableButtonText*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			dispose();
		}
	};
}

// (197:8) {#if clearButton}
function create_if_block_2(ctx) {
	let span;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			attr(span, "class", "input-clear-button");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (!mounted) {
				dispose = listen(span, "click", /*onClearButtonClick*/ ctx[16]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			dispose();
		}
	};
}

// (200:6) {#if disableButton}
function create_if_block_1(ctx) {
	let span;
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			t = text(/*disableButtonText*/ ctx[5]);
			attr(span, "class", "searchbar-disable-button");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);

			if (!mounted) {
				dispose = listen(span, "click", /*onDisableButtonClick*/ ctx[17]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*disableButtonText*/ 32) set_data(t, /*disableButtonText*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*form*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, [-1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance_1($$self, $$props, $$invalidate) {
	let classes;

	const omit_props_names = [
		"class","noShadow","noHairline","form","placeholder","spellcheck","disableButton","disableButtonText","clearButton","value","inputEvents","expandable","inline","searchContainer","searchIn","searchItem","searchGroup","searchGroupTitle","foundEl","notFoundEl","backdrop","backdropEl","hideOnEnableEl","hideOnSearchEl","ignore","customSearch","removeDiacritics","hideDividers","hideGroups","init","f7Slot","instance","search","enable","disable","toggle","clear"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { noShadow = false } = $$props;
	let { noHairline = false } = $$props;
	let { form = true } = $$props;
	let { placeholder = "Search" } = $$props;
	let { spellcheck = undefined } = $$props;
	let { disableButton = true } = $$props;
	let { disableButtonText = "Cancel" } = $$props;
	let { clearButton = true } = $$props;
	let { value = undefined } = $$props;
	let { inputEvents = "change input compositionend" } = $$props;
	let { expandable = false } = $$props;
	let { inline = false } = $$props;
	let { searchContainer = undefined } = $$props;
	let { searchIn = ".item-title" } = $$props;
	let { searchItem = "li" } = $$props;
	let { searchGroup = ".list-group" } = $$props;
	let { searchGroupTitle = ".item-divider, .list-group-title" } = $$props;
	let { foundEl = ".searchbar-found" } = $$props;
	let { notFoundEl = ".searchbar-not-found" } = $$props;
	let { backdrop = undefined } = $$props;
	let { backdropEl = undefined } = $$props;
	let { hideOnEnableEl = ".searchbar-hide-on-enable" } = $$props;
	let { hideOnSearchEl = ".searchbar-hide-on-search" } = $$props;
	let { ignore = ".searchbar-ignore" } = $$props;
	let { customSearch = false } = $$props;
	let { removeDiacritics = false } = $$props;
	let { hideDividers = true } = $$props;
	let { hideGroups = true } = $$props;
	let { init = true } = $$props;
	let { f7Slot = "fixed" } = $$props;
	let el;
	let f7Searchbar;

	function instance() {
		return f7Searchbar;
	}

	function search(query) {
		if (!f7Searchbar) return undefined;
		return f7Searchbar.search(query);
	}

	function enable() {
		if (!f7Searchbar) return undefined;
		return f7Searchbar.enable();
	}

	function disable() {
		if (!f7Searchbar) return undefined;
		return f7Searchbar.disable();
	}

	function toggle() {
		if (!f7Searchbar) return undefined;
		return f7Searchbar.toggle();
	}

	function clear() {
		if (!f7Searchbar) return undefined;
		return f7Searchbar.clear();
	}

	function onChange(event) {
		emit("change", [event]);
	}

	function onInput(event) {
		emit("input", [event]);
		$$invalidate(0, value = event.target.value);
	}

	function onFocus(event) {
		emit("focus", [event]);
	}

	function onBlur(event) {
		emit("blur", [event]);
	}

	function onSubmit(event) {
		emit("submit", [event]);
	}

	function onClearButtonClick(event) {
		emit("click:clear", [event]);
	}

	function onDisableButtonClick(event) {
		emit("click:disable", [event]);
	}

	onMount(() => {
		if (!init) return;

		f7ready(() => {
			const params = noUndefinedProps({
				el,
				inputEvents,
				searchContainer,
				searchIn,
				searchItem,
				searchGroup,
				searchGroupTitle,
				hideOnEnableEl,
				hideOnSearchEl,
				foundEl,
				notFoundEl,
				backdrop,
				backdropEl,
				disableButton,
				ignore,
				customSearch,
				removeDiacritics,
				hideDividers,
				hideGroups,
				expandable,
				inline,
				on: {
					search(searchbar, query, previousQuery) {
						emit("searchbarSearch", [searchbar, query, previousQuery]);
					},
					clear(searchbar, previousQuery) {
						emit("searchbarClear", [searchbar, previousQuery]);
					},
					enable(searchbar) {
						emit("searchbarEnable", [searchbar]);
					},
					disable(searchbar) {
						emit("searchbarDisable", [searchbar]);
					}
				}
			});

			Object.keys(params).forEach(key => {
				if (params[key] === "") {
					delete params[key];
				}
			});

			$$invalidate(9, f7Searchbar = app.f7.searchbar.create(params));
		});
	});

	onDestroy(() => {
		if (f7Searchbar && f7Searchbar.destroy) {
			f7Searchbar.destroy();
			$$invalidate(9, f7Searchbar = null);
		}
	});

	function form_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(8, el);
		});
	}

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(8, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(53, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(19, className = $$new_props.class);
		if ("noShadow" in $$new_props) $$invalidate(20, noShadow = $$new_props.noShadow);
		if ("noHairline" in $$new_props) $$invalidate(21, noHairline = $$new_props.noHairline);
		if ("form" in $$new_props) $$invalidate(1, form = $$new_props.form);
		if ("placeholder" in $$new_props) $$invalidate(2, placeholder = $$new_props.placeholder);
		if ("spellcheck" in $$new_props) $$invalidate(3, spellcheck = $$new_props.spellcheck);
		if ("disableButton" in $$new_props) $$invalidate(4, disableButton = $$new_props.disableButton);
		if ("disableButtonText" in $$new_props) $$invalidate(5, disableButtonText = $$new_props.disableButtonText);
		if ("clearButton" in $$new_props) $$invalidate(6, clearButton = $$new_props.clearButton);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("inputEvents" in $$new_props) $$invalidate(22, inputEvents = $$new_props.inputEvents);
		if ("expandable" in $$new_props) $$invalidate(23, expandable = $$new_props.expandable);
		if ("inline" in $$new_props) $$invalidate(24, inline = $$new_props.inline);
		if ("searchContainer" in $$new_props) $$invalidate(25, searchContainer = $$new_props.searchContainer);
		if ("searchIn" in $$new_props) $$invalidate(26, searchIn = $$new_props.searchIn);
		if ("searchItem" in $$new_props) $$invalidate(27, searchItem = $$new_props.searchItem);
		if ("searchGroup" in $$new_props) $$invalidate(28, searchGroup = $$new_props.searchGroup);
		if ("searchGroupTitle" in $$new_props) $$invalidate(29, searchGroupTitle = $$new_props.searchGroupTitle);
		if ("foundEl" in $$new_props) $$invalidate(30, foundEl = $$new_props.foundEl);
		if ("notFoundEl" in $$new_props) $$invalidate(31, notFoundEl = $$new_props.notFoundEl);
		if ("backdrop" in $$new_props) $$invalidate(32, backdrop = $$new_props.backdrop);
		if ("backdropEl" in $$new_props) $$invalidate(33, backdropEl = $$new_props.backdropEl);
		if ("hideOnEnableEl" in $$new_props) $$invalidate(34, hideOnEnableEl = $$new_props.hideOnEnableEl);
		if ("hideOnSearchEl" in $$new_props) $$invalidate(35, hideOnSearchEl = $$new_props.hideOnSearchEl);
		if ("ignore" in $$new_props) $$invalidate(36, ignore = $$new_props.ignore);
		if ("customSearch" in $$new_props) $$invalidate(37, customSearch = $$new_props.customSearch);
		if ("removeDiacritics" in $$new_props) $$invalidate(38, removeDiacritics = $$new_props.removeDiacritics);
		if ("hideDividers" in $$new_props) $$invalidate(39, hideDividers = $$new_props.hideDividers);
		if ("hideGroups" in $$new_props) $$invalidate(40, hideGroups = $$new_props.hideGroups);
		if ("init" in $$new_props) $$invalidate(41, init = $$new_props.init);
		if ("f7Slot" in $$new_props) $$invalidate(7, f7Slot = $$new_props.f7Slot);
		if ("$$scope" in $$new_props) $$invalidate(48, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(10, classes = classNames(
			className,
			"searchbar",
			{
				"searchbar-inline": inline,
				"no-shadow": noShadow,
				"no-hairline": noHairline,
				"searchbar-expandable": expandable
			},
			colorClasses($$props)
		));
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		form,
		placeholder,
		spellcheck,
		disableButton,
		disableButtonText,
		clearButton,
		f7Slot,
		el,
		f7Searchbar,
		classes,
		onChange,
		onInput,
		onFocus,
		onBlur,
		onSubmit,
		onClearButtonClick,
		onDisableButtonClick,
		$$restProps,
		className,
		noShadow,
		noHairline,
		inputEvents,
		expandable,
		inline,
		searchContainer,
		searchIn,
		searchItem,
		searchGroup,
		searchGroupTitle,
		foundEl,
		notFoundEl,
		backdrop,
		backdropEl,
		hideOnEnableEl,
		hideOnSearchEl,
		ignore,
		customSearch,
		removeDiacritics,
		hideDividers,
		hideGroups,
		init,
		instance,
		search,
		enable,
		disable,
		toggle,
		clear,
		$$scope,
		slots,
		form_1_binding,
		div2_binding
	];
}

class Searchbar extends SvelteComponent {
	constructor(options) {
		super();

		init_1(
			this,
			options,
			instance_1,
			create_fragment,
			safe_not_equal,
			{
				class: 19,
				noShadow: 20,
				noHairline: 21,
				form: 1,
				placeholder: 2,
				spellcheck: 3,
				disableButton: 4,
				disableButtonText: 5,
				clearButton: 6,
				value: 0,
				inputEvents: 22,
				expandable: 23,
				inline: 24,
				searchContainer: 25,
				searchIn: 26,
				searchItem: 27,
				searchGroup: 28,
				searchGroupTitle: 29,
				foundEl: 30,
				notFoundEl: 31,
				backdrop: 32,
				backdropEl: 33,
				hideOnEnableEl: 34,
				hideOnSearchEl: 35,
				ignore: 36,
				customSearch: 37,
				removeDiacritics: 38,
				hideDividers: 39,
				hideGroups: 40,
				init: 41,
				f7Slot: 7,
				instance: 42,
				search: 43,
				enable: 44,
				disable: 45,
				toggle: 46,
				clear: 47
			},
			[-1, -1]
		);
	}

	get instance() {
		return this.$$.ctx[42];
	}

	get search() {
		return this.$$.ctx[43];
	}

	get enable() {
		return this.$$.ctx[44];
	}

	get disable() {
		return this.$$.ctx[45];
	}

	get toggle() {
		return this.$$.ctx[46];
	}

	get clear() {
		return this.$$.ctx[47];
	}
}

export default Searchbar;