/* button.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	assign,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	empty,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_attributes,
	set_data,
	space,
	text as text_1,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher } from "svelte";

import {
	colorClasses,
	routerAttrs,
	routerClasses,
	actionsAttrs,
	actionsClasses
} from "../shared/mixins";

import {
	classNames,
	extend,
	isStringProp,
	plainText,
	createEmitter
} from "../shared/utils";

import { restProps } from "../shared/rest-props";
import { useTooltip } from "../shared/use-tooltip";
import { useRouteProps } from "../shared/use-route-props";
import { useIcon } from "../shared/use-icon";
import UseIcon from "./use-icon";
import Preloader from "./preloader";

function create_else_block_1(ctx) {
	let a;
	let current_block_type_index;
	let if_block;
	let useRouteProps_action;
	let useTooltip_action;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_6, create_else_block_2];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*preloader*/ ctx[4]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx, [-1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let a_levels = [{ class: /*classes*/ ctx[9] }, /*attrs*/ ctx[8]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if_block.c();
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			if_blocks[current_block_type_index].m(a, null);
			/*a_binding*/ ctx[50](a);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(useRouteProps_action = useRouteProps.call(null, a, /*routeProps*/ ctx[3])),
					listen(a, "click", /*onClick*/ ctx[12]),
					action_destroyer(useTooltip_action = useTooltip.call(null, a, {
						tooltip: /*tooltip*/ ctx[1],
						tooltipTrigger: /*tooltipTrigger*/ ctx[2]
					}))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(a, null);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty[0] & /*classes*/ 512) && { class: /*classes*/ ctx[9] },
				dirty[0] & /*attrs*/ 256 && /*attrs*/ ctx[8]
			]));

			if (useRouteProps_action && is_function(useRouteProps_action.update) && dirty[0] & /*routeProps*/ 8) useRouteProps_action.update.call(null, /*routeProps*/ ctx[3]);

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty[0] & /*tooltip, tooltipTrigger*/ 6) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[1],
				tooltipTrigger: /*tooltipTrigger*/ ctx[2]
			});
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if_blocks[current_block_type_index].d();
			/*a_binding*/ ctx[50](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (132:0) {#if tagName === 'button'}
function create_if_block(ctx) {
	let button;
	let current_block_type_index;
	let if_block;
	let useRouteProps_action;
	let useTooltip_action;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*preloader*/ ctx[4]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, [-1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let button_levels = [{ class: /*classes*/ ctx[9] }, /*attrs*/ ctx[8]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if_block.c();
			set_attributes(button, button_data);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if_blocks[current_block_type_index].m(button, null);
			/*button_binding*/ ctx[49](button);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(useRouteProps_action = useRouteProps.call(null, button, /*routeProps*/ ctx[3])),
					listen(button, "click", /*onClick*/ ctx[12]),
					action_destroyer(useTooltip_action = useTooltip.call(null, button, {
						tooltip: /*tooltip*/ ctx[1],
						tooltipTrigger: /*tooltipTrigger*/ ctx[2]
					}))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(button, null);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				(!current || dirty[0] & /*classes*/ 512) && { class: /*classes*/ ctx[9] },
				dirty[0] & /*attrs*/ 256 && /*attrs*/ ctx[8]
			]));

			if (useRouteProps_action && is_function(useRouteProps_action.update) && dirty[0] & /*routeProps*/ 8) useRouteProps_action.update.call(null, /*routeProps*/ ctx[3]);

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty[0] & /*tooltip, tooltipTrigger*/ 6) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[1],
				tooltipTrigger: /*tooltipTrigger*/ ctx[2]
			});
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if_blocks[current_block_type_index].d();
			/*button_binding*/ ctx[49](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (183:4) {:else}
function create_else_block_2(ctx) {
	let t0;
	let t1;
	let current;
	let if_block0 = /*icon*/ ctx[11] && create_if_block_10(ctx);
	let if_block1 = typeof /*text*/ ctx[0] !== "undefined" && create_if_block_9(ctx);
	const default_slot_template = /*#slots*/ ctx[48].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[47], null);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*icon*/ 2048) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_10(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (typeof /*text*/ ctx[0] !== "undefined") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_9(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 65536)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[47], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (172:4) {#if preloader}
function create_if_block_6(ctx) {
	let preloader_1;
	let t0;
	let span;
	let t1;
	let t2;
	let current;

	preloader_1 = new Preloader({
			props: {
				size: /*preloaderSize*/ ctx[5],
				color: /*preloaderColor*/ ctx[6]
			}
		});

	let if_block0 = /*icon*/ ctx[11] && create_if_block_8(ctx);
	let if_block1 = typeof /*text*/ ctx[0] !== "undefined" && create_if_block_7(ctx);
	const default_slot_template = /*#slots*/ ctx[48].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[47], null);

	return {
		c() {
			create_component(preloader_1.$$.fragment);
			t0 = space();
			span = element("span");
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			mount_component(preloader_1, target, anchor);
			insert(target, t0, anchor);
			insert(target, span, anchor);
			if (if_block0) if_block0.m(span, null);
			append(span, t1);
			if (if_block1) if_block1.m(span, null);
			append(span, t2);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			const preloader_1_changes = {};
			if (dirty[0] & /*preloaderSize*/ 32) preloader_1_changes.size = /*preloaderSize*/ ctx[5];
			if (dirty[0] & /*preloaderColor*/ 64) preloader_1_changes.color = /*preloaderColor*/ ctx[6];
			preloader_1.$set(preloader_1_changes);

			if (/*icon*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*icon*/ 2048) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_8(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(span, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (typeof /*text*/ ctx[0] !== "undefined") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_7(ctx);
					if_block1.c();
					if_block1.m(span, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 65536)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[47], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(preloader_1.$$.fragment, local);
			transition_in(if_block0);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(preloader_1.$$.fragment, local);
			transition_out(if_block0);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			destroy_component(preloader_1, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(span);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (184:6) {#if icon}
function create_if_block_10(ctx) {
	let useicon;
	let current;
	useicon = new UseIcon({ props: { icon: /*icon*/ ctx[11] } });

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty[0] & /*icon*/ 2048) useicon_changes.icon = /*icon*/ ctx[11];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (187:6) {#if typeof text !== 'undefined'}
function create_if_block_9(ctx) {
	let span;
	let t_value = plainText(/*text*/ ctx[0]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text_1(t_value);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*text*/ 1 && t_value !== (t_value = plainText(/*text*/ ctx[0]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (175:8) {#if icon}
function create_if_block_8(ctx) {
	let useicon;
	let current;
	useicon = new UseIcon({ props: { icon: /*icon*/ ctx[11] } });

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty[0] & /*icon*/ 2048) useicon_changes.icon = /*icon*/ ctx[11];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (178:8) {#if typeof text !== 'undefined'}
function create_if_block_7(ctx) {
	let span;
	let t_value = plainText(/*text*/ ctx[0]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text_1(t_value);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*text*/ 1 && t_value !== (t_value = plainText(/*text*/ ctx[0]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (152:4) {:else}
function create_else_block(ctx) {
	let t0;
	let t1;
	let current;
	let if_block0 = /*icon*/ ctx[11] && create_if_block_5(ctx);
	let if_block1 = typeof /*text*/ ctx[0] !== "undefined" && create_if_block_4(ctx);
	const default_slot_template = /*#slots*/ ctx[48].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[47], null);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*icon*/ 2048) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (typeof /*text*/ ctx[0] !== "undefined") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 65536)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[47], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (141:4) {#if preloader}
function create_if_block_1(ctx) {
	let preloader_1;
	let t0;
	let span;
	let t1;
	let t2;
	let current;

	preloader_1 = new Preloader({
			props: {
				size: /*preloaderSize*/ ctx[5],
				color: /*preloaderColor*/ ctx[6]
			}
		});

	let if_block0 = /*icon*/ ctx[11] && create_if_block_3(ctx);
	let if_block1 = typeof /*text*/ ctx[0] !== "undefined" && create_if_block_2(ctx);
	const default_slot_template = /*#slots*/ ctx[48].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[47], null);

	return {
		c() {
			create_component(preloader_1.$$.fragment);
			t0 = space();
			span = element("span");
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			mount_component(preloader_1, target, anchor);
			insert(target, t0, anchor);
			insert(target, span, anchor);
			if (if_block0) if_block0.m(span, null);
			append(span, t1);
			if (if_block1) if_block1.m(span, null);
			append(span, t2);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			const preloader_1_changes = {};
			if (dirty[0] & /*preloaderSize*/ 32) preloader_1_changes.size = /*preloaderSize*/ ctx[5];
			if (dirty[0] & /*preloaderColor*/ 64) preloader_1_changes.color = /*preloaderColor*/ ctx[6];
			preloader_1.$set(preloader_1_changes);

			if (/*icon*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*icon*/ 2048) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(span, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (typeof /*text*/ ctx[0] !== "undefined") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					if_block1.m(span, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 65536)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[47], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(preloader_1.$$.fragment, local);
			transition_in(if_block0);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(preloader_1.$$.fragment, local);
			transition_out(if_block0);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			destroy_component(preloader_1, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(span);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (153:6) {#if icon}
function create_if_block_5(ctx) {
	let useicon;
	let current;
	useicon = new UseIcon({ props: { icon: /*icon*/ ctx[11] } });

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty[0] & /*icon*/ 2048) useicon_changes.icon = /*icon*/ ctx[11];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (156:6) {#if typeof text !== 'undefined'}
function create_if_block_4(ctx) {
	let span;
	let t_value = plainText(/*text*/ ctx[0]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text_1(t_value);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*text*/ 1 && t_value !== (t_value = plainText(/*text*/ ctx[0]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (144:8) {#if icon}
function create_if_block_3(ctx) {
	let useicon;
	let current;
	useicon = new UseIcon({ props: { icon: /*icon*/ ctx[11] } });

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty[0] & /*icon*/ 2048) useicon_changes.icon = /*icon*/ ctx[11];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (147:8) {#if typeof text !== 'undefined'}
function create_if_block_2(ctx) {
	let span;
	let t_value = plainText(/*text*/ ctx[0]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text_1(t_value);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*text*/ 1 && t_value !== (t_value = plainText(/*text*/ ctx[0]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*tagName*/ ctx[10] === "button") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, [-1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let hrefComputed;
	let attrs;
	let classes;
	let tagName;
	let icon;

	const omit_props_names = [
		"class","text","tabLink","tabLinkActive","type","href","target","round","roundMd","roundIos","roundAurora","fill","fillMd","fillIos","fillAurora","large","largeMd","largeIos","largeAurora","small","smallMd","smallIos","smallAurora","raised","raisedMd","raisedIos","raisedAurora","outline","outlineMd","outlineIos","outlineAurora","active","disabled","tooltip","tooltipTrigger","routeProps","preloader","preloaderSize","preloaderColor","loading"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { text = undefined } = $$props;
	let { tabLink = undefined } = $$props;
	let { tabLinkActive = false } = $$props;
	let { type = undefined } = $$props;
	let { href = "#" } = $$props;
	let { target = undefined } = $$props;
	let { round = false } = $$props;
	let { roundMd = false } = $$props;
	let { roundIos = false } = $$props;
	let { roundAurora = false } = $$props;
	let { fill = false } = $$props;
	let { fillMd = false } = $$props;
	let { fillIos = false } = $$props;
	let { fillAurora = false } = $$props;
	let { large = false } = $$props;
	let { largeMd = false } = $$props;
	let { largeIos = false } = $$props;
	let { largeAurora = false } = $$props;
	let { small = false } = $$props;
	let { smallMd = false } = $$props;
	let { smallIos = false } = $$props;
	let { smallAurora = false } = $$props;
	let { raised = false } = $$props;
	let { raisedMd = false } = $$props;
	let { raisedIos = false } = $$props;
	let { raisedAurora = false } = $$props;
	let { outline = false } = $$props;
	let { outlineMd = false } = $$props;
	let { outlineIos = false } = $$props;
	let { outlineAurora = false } = $$props;
	let { active = false } = $$props;
	let { disabled = false } = $$props;
	let { tooltip = undefined } = $$props;
	let { tooltipTrigger = undefined } = $$props;
	let { routeProps = undefined } = $$props;
	let { preloader = false } = $$props;
	let { preloaderSize = undefined } = $$props;
	let { preloaderColor = undefined } = $$props;
	let { loading = false } = $$props;
	let el;

	function onClick() {
		emit("click");
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(7, el);
		});
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(7, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(52, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(53, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(13, className = $$new_props.class);
		if ("text" in $$new_props) $$invalidate(0, text = $$new_props.text);
		if ("tabLink" in $$new_props) $$invalidate(14, tabLink = $$new_props.tabLink);
		if ("tabLinkActive" in $$new_props) $$invalidate(15, tabLinkActive = $$new_props.tabLinkActive);
		if ("type" in $$new_props) $$invalidate(16, type = $$new_props.type);
		if ("href" in $$new_props) $$invalidate(17, href = $$new_props.href);
		if ("target" in $$new_props) $$invalidate(18, target = $$new_props.target);
		if ("round" in $$new_props) $$invalidate(19, round = $$new_props.round);
		if ("roundMd" in $$new_props) $$invalidate(20, roundMd = $$new_props.roundMd);
		if ("roundIos" in $$new_props) $$invalidate(21, roundIos = $$new_props.roundIos);
		if ("roundAurora" in $$new_props) $$invalidate(22, roundAurora = $$new_props.roundAurora);
		if ("fill" in $$new_props) $$invalidate(23, fill = $$new_props.fill);
		if ("fillMd" in $$new_props) $$invalidate(24, fillMd = $$new_props.fillMd);
		if ("fillIos" in $$new_props) $$invalidate(25, fillIos = $$new_props.fillIos);
		if ("fillAurora" in $$new_props) $$invalidate(26, fillAurora = $$new_props.fillAurora);
		if ("large" in $$new_props) $$invalidate(27, large = $$new_props.large);
		if ("largeMd" in $$new_props) $$invalidate(28, largeMd = $$new_props.largeMd);
		if ("largeIos" in $$new_props) $$invalidate(29, largeIos = $$new_props.largeIos);
		if ("largeAurora" in $$new_props) $$invalidate(30, largeAurora = $$new_props.largeAurora);
		if ("small" in $$new_props) $$invalidate(31, small = $$new_props.small);
		if ("smallMd" in $$new_props) $$invalidate(32, smallMd = $$new_props.smallMd);
		if ("smallIos" in $$new_props) $$invalidate(33, smallIos = $$new_props.smallIos);
		if ("smallAurora" in $$new_props) $$invalidate(34, smallAurora = $$new_props.smallAurora);
		if ("raised" in $$new_props) $$invalidate(35, raised = $$new_props.raised);
		if ("raisedMd" in $$new_props) $$invalidate(36, raisedMd = $$new_props.raisedMd);
		if ("raisedIos" in $$new_props) $$invalidate(37, raisedIos = $$new_props.raisedIos);
		if ("raisedAurora" in $$new_props) $$invalidate(38, raisedAurora = $$new_props.raisedAurora);
		if ("outline" in $$new_props) $$invalidate(39, outline = $$new_props.outline);
		if ("outlineMd" in $$new_props) $$invalidate(40, outlineMd = $$new_props.outlineMd);
		if ("outlineIos" in $$new_props) $$invalidate(41, outlineIos = $$new_props.outlineIos);
		if ("outlineAurora" in $$new_props) $$invalidate(42, outlineAurora = $$new_props.outlineAurora);
		if ("active" in $$new_props) $$invalidate(43, active = $$new_props.active);
		if ("disabled" in $$new_props) $$invalidate(44, disabled = $$new_props.disabled);
		if ("tooltip" in $$new_props) $$invalidate(1, tooltip = $$new_props.tooltip);
		if ("tooltipTrigger" in $$new_props) $$invalidate(2, tooltipTrigger = $$new_props.tooltipTrigger);
		if ("routeProps" in $$new_props) $$invalidate(3, routeProps = $$new_props.routeProps);
		if ("preloader" in $$new_props) $$invalidate(4, preloader = $$new_props.preloader);
		if ("preloaderSize" in $$new_props) $$invalidate(5, preloaderSize = $$new_props.preloaderSize);
		if ("preloaderColor" in $$new_props) $$invalidate(6, preloaderColor = $$new_props.preloaderColor);
		if ("loading" in $$new_props) $$invalidate(45, loading = $$new_props.loading);
		if ("$$scope" in $$new_props) $$invalidate(47, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*href*/ 131072) {
			$: $$invalidate(46, hrefComputed = href === true ? "#" : href || undefined);
		}

		$: $$invalidate(8, attrs = extend(
			{
				href: hrefComputed,
				target,
				type,
				"data-tab": isStringProp(tabLink) && tabLink || undefined,
				...restProps($$restProps)
			},
			routerAttrs($$props),
			actionsAttrs($$props)
		));

		$: $$invalidate(9, classes = classNames(
			className,
			"button",
			{
				"tab-link": tabLink || tabLink === "",
				"tab-link-active": tabLinkActive,
				"button-round": round,
				"button-round-ios": roundIos,
				"button-round-aurora": roundAurora,
				"button-round-md": roundMd,
				"button-fill": fill,
				"button-fill-ios": fillIos,
				"button-fill-aurora": fillAurora,
				"button-fill-md": fillMd,
				"button-large": large,
				"button-large-ios": largeIos,
				"button-large-aurora": largeAurora,
				"button-large-md": largeMd,
				"button-small": small,
				"button-small-ios": smallIos,
				"button-small-aurora": smallAurora,
				"button-small-md": smallMd,
				"button-raised": raised,
				"button-raised-ios": raisedIos,
				"button-raised-aurora": raisedAurora,
				"button-raised-md": raisedMd,
				"button-active": active,
				"button-outline": outline,
				"button-outline-ios": outlineIos,
				"button-outline-aurora": outlineAurora,
				"button-outline-md": outlineMd,
				"button-preloader": preloader,
				"button-loading": loading,
				disabled
			},
			colorClasses($$props),
			routerClasses($$props),
			actionsClasses($$props)
		));

		if ($$self.$$.dirty[0] & /*type*/ 65536) {
			$: $$invalidate(10, tagName = type === "submit" || type === "reset" || type === "button"
			? "button"
			: "a");
		}

		$: $$invalidate(11, icon = useIcon($$props));
	};

	$$props = exclude_internal_props($$props);

	return [
		text,
		tooltip,
		tooltipTrigger,
		routeProps,
		preloader,
		preloaderSize,
		preloaderColor,
		el,
		attrs,
		classes,
		tagName,
		icon,
		onClick,
		className,
		tabLink,
		tabLinkActive,
		type,
		href,
		target,
		round,
		roundMd,
		roundIos,
		roundAurora,
		fill,
		fillMd,
		fillIos,
		fillAurora,
		large,
		largeMd,
		largeIos,
		largeAurora,
		small,
		smallMd,
		smallIos,
		smallAurora,
		raised,
		raisedMd,
		raisedIos,
		raisedAurora,
		outline,
		outlineMd,
		outlineIos,
		outlineAurora,
		active,
		disabled,
		loading,
		hrefComputed,
		$$scope,
		slots,
		button_binding,
		a_binding
	];
}

class Button extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				class: 13,
				text: 0,
				tabLink: 14,
				tabLinkActive: 15,
				type: 16,
				href: 17,
				target: 18,
				round: 19,
				roundMd: 20,
				roundIos: 21,
				roundAurora: 22,
				fill: 23,
				fillMd: 24,
				fillIos: 25,
				fillAurora: 26,
				large: 27,
				largeMd: 28,
				largeIos: 29,
				largeAurora: 30,
				small: 31,
				smallMd: 32,
				smallIos: 33,
				smallAurora: 34,
				raised: 35,
				raisedMd: 36,
				raisedIos: 37,
				raisedAurora: 38,
				outline: 39,
				outlineMd: 40,
				outlineIos: 41,
				outlineAurora: 42,
				active: 43,
				disabled: 44,
				tooltip: 1,
				tooltipTrigger: 2,
				routeProps: 3,
				preloader: 4,
				preloaderSize: 5,
				preloaderColor: 6,
				loading: 45
			},
			[-1, -1]
		);
	}
}

export default Button;