/* page-content.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_attributes,
	space,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { onMount, onDestroy, createEventDispatcher } from "svelte";
import { restProps } from "../shared/rest-props";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter } from "../shared/utils";
import { app, f7ready } from "../shared/f7";
import { useTab } from "../shared/use-tab";
import Preloader from "./preloader";

function create_if_block_3(ctx) {
	let div1;
	let preloader;
	let t;
	let div0;
	let current;
	preloader = new Preloader({});

	return {
		c() {
			div1 = element("div");
			create_component(preloader.$$.fragment);
			t = space();
			div0 = element("div");
			attr(div0, "class", "ptr-arrow");
			attr(div1, "class", "ptr-preloader");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			mount_component(preloader, div1, null);
			append(div1, t);
			append(div1, div0);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(preloader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(preloader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(preloader);
		}
	};
}

// (131:2) {#if infinite && infiniteTop && infinitePreloader}
function create_if_block_2(ctx) {
	let preloader;
	let current;

	preloader = new Preloader({
			props: { class: "infinite-scroll-preloader" }
		});

	return {
		c() {
			create_component(preloader.$$.fragment);
		},
		m(target, anchor) {
			mount_component(preloader, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(preloader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(preloader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(preloader, detaching);
		}
	};
}

// (135:2) {#if infinite && !infiniteTop && infinitePreloader}
function create_if_block_1(ctx) {
	let preloader;
	let current;

	preloader = new Preloader({
			props: { class: "infinite-scroll-preloader" }
		});

	return {
		c() {
			create_component(preloader.$$.fragment);
		},
		m(target, anchor) {
			mount_component(preloader, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(preloader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(preloader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(preloader, detaching);
		}
	};
}

// (138:2) {#if ptr && ptrPreloader && ptrBottom}
function create_if_block(ctx) {
	let div1;
	let preloader;
	let t;
	let div0;
	let current;
	preloader = new Preloader({});

	return {
		c() {
			div1 = element("div");
			create_component(preloader.$$.fragment);
			t = space();
			div0 = element("div");
			attr(div0, "class", "ptr-arrow");
			attr(div1, "class", "ptr-preloader");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			mount_component(preloader, div1, null);
			append(div1, t);
			append(div1, div0);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(preloader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(preloader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(preloader);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let div_data_ptr_mousewheel_value;
	let div_data_infinite_distance_value;
	let current;
	let if_block0 = /*ptr*/ ctx[0] && /*ptrPreloader*/ ctx[2] && !/*ptrBottom*/ ctx[3] && create_if_block_3(ctx);
	let if_block1 = /*infinite*/ ctx[5] && /*infiniteTop*/ ctx[6] && /*infinitePreloader*/ ctx[8] && create_if_block_2(ctx);
	const default_slot_template = /*#slots*/ ctx[21].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);
	let if_block2 = /*infinite*/ ctx[5] && !/*infiniteTop*/ ctx[6] && /*infinitePreloader*/ ctx[8] && create_if_block_1(ctx);
	let if_block3 = /*ptr*/ ctx[0] && /*ptrPreloader*/ ctx[2] && /*ptrBottom*/ ctx[3] && create_if_block(ctx);

	let div_levels = [
		{ class: /*pageContentClasses*/ ctx[10] },
		{
			"data-ptr-distance": /*ptrDistance*/ ctx[1]
		},
		{
			"data-ptr-mousewheel": div_data_ptr_mousewheel_value = /*ptrMousewheel*/ ctx[4] || undefined
		},
		{
			"data-infinite-distance": div_data_infinite_distance_value = /*infiniteDistance*/ ctx[7] || undefined
		},
		restProps(/*$$restProps*/ ctx[11])
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(div, t2);
			if (if_block2) if_block2.m(div, null);
			append(div, t3);
			if (if_block3) if_block3.m(div, null);
			/*div_binding*/ ctx[22](div);
			current = true;
		},
		p(ctx, dirty) {
			if (/*ptr*/ ctx[0] && /*ptrPreloader*/ ctx[2] && !/*ptrBottom*/ ctx[3]) {
				if (if_block0) {
					if (dirty[0] & /*ptr, ptrPreloader, ptrBottom*/ 13) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*infinite*/ ctx[5] && /*infiniteTop*/ ctx[6] && /*infinitePreloader*/ ctx[8]) {
				if (if_block1) {
					if (dirty[0] & /*infinite, infiniteTop, infinitePreloader*/ 352) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 1048576)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[20], dirty, null, null);
				}
			}

			if (/*infinite*/ ctx[5] && !/*infiniteTop*/ ctx[6] && /*infinitePreloader*/ ctx[8]) {
				if (if_block2) {
					if (dirty[0] & /*infinite, infiniteTop, infinitePreloader*/ 352) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, t3);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*ptr*/ ctx[0] && /*ptrPreloader*/ ctx[2] && /*ptrBottom*/ ctx[3]) {
				if (if_block3) {
					if (dirty[0] & /*ptr, ptrPreloader, ptrBottom*/ 13) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div, null);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty[0] & /*pageContentClasses*/ 1024) && { class: /*pageContentClasses*/ ctx[10] },
				(!current || dirty[0] & /*ptrDistance*/ 2) && {
					"data-ptr-distance": /*ptrDistance*/ ctx[1]
				},
				(!current || dirty[0] & /*ptrMousewheel*/ 16 && div_data_ptr_mousewheel_value !== (div_data_ptr_mousewheel_value = /*ptrMousewheel*/ ctx[4] || undefined)) && {
					"data-ptr-mousewheel": div_data_ptr_mousewheel_value
				},
				(!current || dirty[0] & /*infiniteDistance*/ 128 && div_data_infinite_distance_value !== (div_data_infinite_distance_value = /*infiniteDistance*/ ctx[7] || undefined)) && {
					"data-infinite-distance": div_data_infinite_distance_value
				},
				dirty[0] & /*$$restProps*/ 2048 && restProps(/*$$restProps*/ ctx[11])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(default_slot, local);
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(default_slot, local);
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			/*div_binding*/ ctx[22](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let pageContentClasses;

	const omit_props_names = [
		"tab","tabActive","ptr","ptrDistance","ptrPreloader","ptrBottom","ptrMousewheel","infinite","infiniteTop","infiniteDistance","infinitePreloader","hideBarsOnScroll","hideNavbarOnScroll","hideToolbarOnScroll","messagesContent","loginScreen","class"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { tab = false } = $$props;
	let { tabActive = false } = $$props;
	let { ptr = false } = $$props;
	let { ptrDistance = undefined } = $$props;
	let { ptrPreloader = true } = $$props;
	let { ptrBottom = false } = $$props;
	let { ptrMousewheel = false } = $$props;
	let { infinite = false } = $$props;
	let { infiniteTop = false } = $$props;
	let { infiniteDistance = undefined } = $$props;
	let { infinitePreloader = true } = $$props;
	let { hideBarsOnScroll = false } = $$props;
	let { hideNavbarOnScroll = false } = $$props;
	let { hideToolbarOnScroll = false } = $$props;
	let { messagesContent = false } = $$props;
	let { loginScreen = false } = $$props;
	let { class: className = undefined } = $$props;
	let pageContentEl;

	// Event handlers
	function onPtrPullStart(ptrEl) {
		if (ptrEl !== pageContentEl) return;
		emit("ptrPullStart");
	}

	function onPtrPullMove(ptrEl) {
		if (ptrEl !== pageContentEl) return;
		emit("ptrPullMove");
	}

	function onPtrPullEnd(ptrEl) {
		if (ptrEl !== pageContentEl) return;
		emit("ptrPullEnd");
	}

	function onPtrRefresh(ptrEl, done) {
		if (ptrEl !== pageContentEl) return;
		emit("ptrRefresh", [done]);
	}

	function onPtrDone(ptrEl) {
		if (ptrEl !== pageContentEl) return;
		emit("ptrDone");
	}

	function onInfinite(infEl) {
		if (infEl !== pageContentEl) return;
		emit("infinite");
	}

	function mountPageContent() {
		if (ptr) {
			app.f7.on("ptrPullStart", onPtrPullStart);
			app.f7.on("ptrPullMove", onPtrPullMove);
			app.f7.on("ptrPullEnd", onPtrPullEnd);
			app.f7.on("ptrRefresh", onPtrRefresh);
			app.f7.on("ptrDone", onPtrDone);
		}

		if (infinite) {
			app.f7.on("infinite", onInfinite);
		}
	}

	function destroyPageContent() {
		if (ptr) {
			app.f7.off("ptrPullStart", onPtrPullStart);
			app.f7.off("ptrPullMove", onPtrPullMove);
			app.f7.off("ptrPullEnd", onPtrPullEnd);
			app.f7.off("ptrRefresh", onPtrRefresh);
			app.f7.off("ptrDone", onPtrDone);
		}

		if (infinite) {
			app.f7.off("infinite", onInfinite);
		}
	}

	useTab(() => pageContentEl, emit);

	onMount(() => {
		f7ready(() => {
			mountPageContent();
		});
	});

	onDestroy(() => {
		if (!app.f7) return;
		destroyPageContent();
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			pageContentEl = $$value;
			$$invalidate(9, pageContentEl);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(32, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("tab" in $$new_props) $$invalidate(12, tab = $$new_props.tab);
		if ("tabActive" in $$new_props) $$invalidate(13, tabActive = $$new_props.tabActive);
		if ("ptr" in $$new_props) $$invalidate(0, ptr = $$new_props.ptr);
		if ("ptrDistance" in $$new_props) $$invalidate(1, ptrDistance = $$new_props.ptrDistance);
		if ("ptrPreloader" in $$new_props) $$invalidate(2, ptrPreloader = $$new_props.ptrPreloader);
		if ("ptrBottom" in $$new_props) $$invalidate(3, ptrBottom = $$new_props.ptrBottom);
		if ("ptrMousewheel" in $$new_props) $$invalidate(4, ptrMousewheel = $$new_props.ptrMousewheel);
		if ("infinite" in $$new_props) $$invalidate(5, infinite = $$new_props.infinite);
		if ("infiniteTop" in $$new_props) $$invalidate(6, infiniteTop = $$new_props.infiniteTop);
		if ("infiniteDistance" in $$new_props) $$invalidate(7, infiniteDistance = $$new_props.infiniteDistance);
		if ("infinitePreloader" in $$new_props) $$invalidate(8, infinitePreloader = $$new_props.infinitePreloader);
		if ("hideBarsOnScroll" in $$new_props) $$invalidate(14, hideBarsOnScroll = $$new_props.hideBarsOnScroll);
		if ("hideNavbarOnScroll" in $$new_props) $$invalidate(15, hideNavbarOnScroll = $$new_props.hideNavbarOnScroll);
		if ("hideToolbarOnScroll" in $$new_props) $$invalidate(16, hideToolbarOnScroll = $$new_props.hideToolbarOnScroll);
		if ("messagesContent" in $$new_props) $$invalidate(17, messagesContent = $$new_props.messagesContent);
		if ("loginScreen" in $$new_props) $$invalidate(18, loginScreen = $$new_props.loginScreen);
		if ("class" in $$new_props) $$invalidate(19, className = $$new_props.class);
		if ("$$scope" in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(10, pageContentClasses = classNames(
			className,
			"page-content",
			{
				tab,
				"tab-active": tabActive,
				"ptr-content": ptr,
				"ptr-bottom": ptrBottom,
				"infinite-scroll-content": infinite,
				"infinite-scroll-top": infiniteTop,
				"hide-bars-on-scroll": hideBarsOnScroll,
				"hide-navbar-on-scroll": hideNavbarOnScroll,
				"hide-toolbar-on-scroll": hideToolbarOnScroll,
				"messages-content": messagesContent,
				"login-screen-content": loginScreen
			},
			colorClasses($$props)
		));
	};

	$$props = exclude_internal_props($$props);

	return [
		ptr,
		ptrDistance,
		ptrPreloader,
		ptrBottom,
		ptrMousewheel,
		infinite,
		infiniteTop,
		infiniteDistance,
		infinitePreloader,
		pageContentEl,
		pageContentClasses,
		$$restProps,
		tab,
		tabActive,
		hideBarsOnScroll,
		hideNavbarOnScroll,
		hideToolbarOnScroll,
		messagesContent,
		loginScreen,
		className,
		$$scope,
		slots,
		div_binding
	];
}

class Page_content extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				tab: 12,
				tabActive: 13,
				ptr: 0,
				ptrDistance: 1,
				ptrPreloader: 2,
				ptrBottom: 3,
				ptrMousewheel: 4,
				infinite: 5,
				infiniteTop: 6,
				infiniteDistance: 7,
				infinitePreloader: 8,
				hideBarsOnScroll: 14,
				hideNavbarOnScroll: 15,
				hideToolbarOnScroll: 16,
				messagesContent: 17,
				loginScreen: 18,
				class: 19
			},
			[-1, -1]
		);
	}
}

export default Page_content;