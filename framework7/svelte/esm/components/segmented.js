/* segmented.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	check_outros,
	compute_rest_props,
	create_slot,
	detach,
	element,
	empty,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	space,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { colorClasses } from "../shared/mixins";
import { classNames } from "../shared/utils";
import { restProps } from "../shared/rest-props";

function create_if_block_2(ctx) {
	let p;
	let t;
	let current;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
	let if_block = (/*strong*/ ctx[0] || /*strongIos*/ ctx[1] || /*strongMd*/ ctx[2] || /*strongAurora*/ ctx[3]) && create_if_block_3(ctx);
	let p_levels = [{ class: /*classes*/ ctx[5] }, restProps(/*$$restProps*/ ctx[6])];
	let p_data = {};

	for (let i = 0; i < p_levels.length; i += 1) {
		p_data = assign(p_data, p_levels[i]);
	}

	return {
		c() {
			p = element("p");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			set_attributes(p, p_data);
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (default_slot) {
				default_slot.m(p, null);
			}

			append(p, t);
			if (if_block) if_block.m(p, null);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 65536)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			if (/*strong*/ ctx[0] || /*strongIos*/ ctx[1] || /*strongMd*/ ctx[2] || /*strongAurora*/ ctx[3]) {
				if (if_block) {
					
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(p, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(p, p_data = get_spread_update(p_levels, [
				(!current || dirty & /*classes*/ 32) && { class: /*classes*/ ctx[5] },
				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
		}
	};
}

// (44:0) {#if tag === 'div'}
function create_if_block(ctx) {
	let div;
	let t;
	let current;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
	let if_block = (/*strong*/ ctx[0] || /*strongIos*/ ctx[1] || /*strongMd*/ ctx[2] || /*strongAurora*/ ctx[3]) && create_if_block_1(ctx);
	let div_levels = [{ class: /*classes*/ ctx[5] }, restProps(/*$$restProps*/ ctx[6])];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(div, t);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 65536)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			if (/*strong*/ ctx[0] || /*strongIos*/ ctx[1] || /*strongMd*/ ctx[2] || /*strongAurora*/ ctx[3]) {
				if (if_block) {
					
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes*/ 32) && { class: /*classes*/ ctx[5] },
				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
		}
	};
}

// (52:4) {#if strong || strongIos || strongMd || strongAurora}
function create_if_block_3(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			attr(span, "class", "segmented-highlight");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (47:4) {#if strong || strongIos || strongMd || strongAurora}
function create_if_block_1(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			attr(span, "class", "segmented-highlight");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_if_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*tag*/ ctx[4] === "div") return 0;
		if (/*tag*/ ctx[4] === "p") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx, -1))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;

	const omit_props_names = [
		"class","raised","raisedIos","raisedMd","raisedAurora","round","roundIos","roundMd","roundAurora","strong","strongIos","strongMd","strongAurora","tag"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { raised = false } = $$props;
	let { raisedIos = false } = $$props;
	let { raisedMd = false } = $$props;
	let { raisedAurora = false } = $$props;
	let { round = false } = $$props;
	let { roundIos = false } = $$props;
	let { roundMd = false } = $$props;
	let { roundAurora = false } = $$props;
	let { strong = false } = $$props;
	let { strongIos = false } = $$props;
	let { strongMd = false } = $$props;
	let { strongAurora = false } = $$props;
	let { tag = "div" } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(7, className = $$new_props.class);
		if ("raised" in $$new_props) $$invalidate(8, raised = $$new_props.raised);
		if ("raisedIos" in $$new_props) $$invalidate(9, raisedIos = $$new_props.raisedIos);
		if ("raisedMd" in $$new_props) $$invalidate(10, raisedMd = $$new_props.raisedMd);
		if ("raisedAurora" in $$new_props) $$invalidate(11, raisedAurora = $$new_props.raisedAurora);
		if ("round" in $$new_props) $$invalidate(12, round = $$new_props.round);
		if ("roundIos" in $$new_props) $$invalidate(13, roundIos = $$new_props.roundIos);
		if ("roundMd" in $$new_props) $$invalidate(14, roundMd = $$new_props.roundMd);
		if ("roundAurora" in $$new_props) $$invalidate(15, roundAurora = $$new_props.roundAurora);
		if ("strong" in $$new_props) $$invalidate(0, strong = $$new_props.strong);
		if ("strongIos" in $$new_props) $$invalidate(1, strongIos = $$new_props.strongIos);
		if ("strongMd" in $$new_props) $$invalidate(2, strongMd = $$new_props.strongMd);
		if ("strongAurora" in $$new_props) $$invalidate(3, strongAurora = $$new_props.strongAurora);
		if ("tag" in $$new_props) $$invalidate(4, tag = $$new_props.tag);
		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(5, classes = classNames(
			className,
			{
				segmented: true,
				"segmented-raised": raised,
				"segmented-raised-ios": raisedIos,
				"segmented-raised-aurora": raisedAurora,
				"segmented-raised-md": raisedMd,
				"segmented-round": round,
				"segmented-round-ios": roundIos,
				"segmented-round-aurora": roundAurora,
				"segmented-round-md": roundMd,
				"segmented-strong": strong,
				"segmented-strong-ios": strongIos,
				"segmented-strong-md": strongMd,
				"segmented-strong-aurora": strongAurora
			},
			colorClasses($$props)
		));
	};

	$$props = exclude_internal_props($$props);

	return [
		strong,
		strongIos,
		strongMd,
		strongAurora,
		tag,
		classes,
		$$restProps,
		className,
		raised,
		raisedIos,
		raisedMd,
		raisedAurora,
		round,
		roundIos,
		roundMd,
		roundAurora,
		$$scope,
		slots
	];
}

class Segmented extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 7,
			raised: 8,
			raisedIos: 9,
			raisedMd: 10,
			raisedAurora: 11,
			round: 12,
			roundIos: 13,
			roundMd: 14,
			roundAurora: 15,
			strong: 0,
			strongIos: 1,
			strongMd: 2,
			strongAurora: 3,
			tag: 4
		});
	}
}

export default Segmented;