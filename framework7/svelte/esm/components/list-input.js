/* list-input.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	empty,
	exclude_internal_props,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	select_option,
	set_attributes,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, afterUpdate, onDestroy } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, extend, plainText, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app, f7ready } from "../shared/f7";
import { getReactiveContext } from "../shared/get-reactive-context";
import TextEditor from "./text-editor";
const get_content_end_slot_changes_1 = dirty => ({});
const get_content_end_slot_context_1 = ctx => ({});
const get_content_slot_changes_1 = dirty => ({});
const get_content_slot_context_1 = ctx => ({});
const get_inner_end_slot_changes_1 = dirty => ({});
const get_inner_end_slot_context_1 = ctx => ({});
const get_inner_slot_changes_1 = dirty => ({});
const get_inner_slot_context_1 = ctx => ({});
const get_info_slot_changes_1 = dirty => ({});
const get_info_slot_context_1 = ctx => ({});
const get_error_message_slot_changes_1 = dirty => ({});
const get_error_message_slot_context_1 = ctx => ({});
const get_input_slot_changes_1 = dirty => ({});
const get_input_slot_context_1 = ctx => ({});
const get_label_slot_changes_1 = dirty => ({});
const get_label_slot_context_1 = ctx => ({});
const get_inner_start_slot_changes_1 = dirty => ({});
const get_inner_start_slot_context_1 = ctx => ({});
const get_media_slot_changes_1 = dirty => ({});
const get_media_slot_context_1 = ctx => ({});
const get_content_start_slot_changes_1 = dirty => ({});
const get_content_start_slot_context_1 = ctx => ({});
const get_root_end_slot_changes = dirty => ({});
const get_root_end_slot_context = ctx => ({});
const get_root_slot_changes = dirty => ({});
const get_root_slot_context = ctx => ({});
const get_content_end_slot_changes = dirty => ({});
const get_content_end_slot_context = ctx => ({});
const get_content_slot_changes = dirty => ({});
const get_content_slot_context = ctx => ({});
const get_inner_end_slot_changes = dirty => ({});
const get_inner_end_slot_context = ctx => ({});
const get_inner_slot_changes = dirty => ({});
const get_inner_slot_context = ctx => ({});
const get_info_slot_changes = dirty => ({});
const get_info_slot_context = ctx => ({});
const get_error_message_slot_changes = dirty => ({});
const get_error_message_slot_context = ctx => ({});
const get_input_slot_changes = dirty => ({});
const get_input_slot_context = ctx => ({});
const get_label_slot_changes = dirty => ({});
const get_label_slot_context = ctx => ({});
const get_inner_start_slot_changes = dirty => ({});
const get_inner_start_slot_context = ctx => ({});
const get_media_slot_changes = dirty => ({});
const get_media_slot_context = ctx => ({});
const get_content_start_slot_changes = dirty => ({});
const get_content_start_slot_context = ctx => ({});
const get_root_start_slot_changes = dirty => ({});
const get_root_start_slot_context = ctx => ({});

// (577:0) {:else}
function create_else_block_1(ctx) {
	let div2;
	let t0;
	let t1;
	let t2;
	let div1;
	let t3;
	let t4;
	let div0;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let t10;
	let t11;
	let t12;
	let current;
	const content_start_slot_template = /*#slots*/ ctx[77]["content-start"];
	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[76], get_content_start_slot_context_1);
	let if_block0 = /*isSortable*/ ctx[42] && /*isSortableOpposite*/ ctx[43] && create_if_block_23(ctx);
	let if_block1 = (/*media*/ ctx[1] || /*hasMediaSlots*/ ctx[45]) && create_if_block_21(ctx);
	const inner_start_slot_template = /*#slots*/ ctx[77]["inner-start"];
	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[76], get_inner_start_slot_context_1);
	let if_block2 = (typeof /*label*/ ctx[36] !== "undefined" || /*hasLabelSlots*/ ctx[46]) && create_if_block_20(ctx);
	let if_block3 = /*input*/ ctx[3] && create_if_block_16(ctx);
	const input_slot_template = /*#slots*/ ctx[77].input;
	const input_slot = create_slot(input_slot_template, ctx, /*$$scope*/ ctx[76], get_input_slot_context_1);
	let if_block4 = /*hasErrorMessage*/ ctx[40] && /*errorMessageForce*/ ctx[34] && create_if_block_15(ctx);
	let if_block5 = /*clearButton*/ ctx[32] && create_if_block_14(ctx);
	let if_block6 = (typeof /*info*/ ctx[35] !== "undefined" || /*hasInfoSlots*/ ctx[39]) && create_if_block_13(ctx);
	const inner_slot_template = /*#slots*/ ctx[77].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[76], get_inner_slot_context_1);
	const inner_end_slot_template = /*#slots*/ ctx[77]["inner-end"];
	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[76], get_inner_end_slot_context_1);
	const content_slot_template = /*#slots*/ ctx[77].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[76], get_content_slot_context_1);
	const content_end_slot_template = /*#slots*/ ctx[77]["content-end"];
	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[76], get_content_end_slot_context_1);
	let div2_levels = [{ class: /*itemContentClasses*/ ctx[48] }, restProps(/*$$restProps*/ ctx[56])];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			if (content_start_slot) content_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			div1 = element("div");
			if (inner_start_slot) inner_start_slot.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			div0 = element("div");
			if (if_block3) if_block3.c();
			t5 = space();
			if (input_slot) input_slot.c();
			t6 = space();
			if (if_block4) if_block4.c();
			t7 = space();
			if (if_block5) if_block5.c();
			t8 = space();
			if (if_block6) if_block6.c();
			t9 = space();
			if (inner_slot) inner_slot.c();
			t10 = space();
			if (inner_end_slot) inner_end_slot.c();
			t11 = space();
			if (content_slot) content_slot.c();
			t12 = space();
			if (content_end_slot) content_end_slot.c();
			attr(div0, "class", /*inputWrapClasses*/ ctx[50]);
			attr(div1, "class", "item-inner");
			set_attributes(div2, div2_data);
		},
		m(target, anchor) {
			insert(target, div2, anchor);

			if (content_start_slot) {
				content_start_slot.m(div2, null);
			}

			append(div2, t0);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t1);
			if (if_block1) if_block1.m(div2, null);
			append(div2, t2);
			append(div2, div1);

			if (inner_start_slot) {
				inner_start_slot.m(div1, null);
			}

			append(div1, t3);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t4);
			append(div1, div0);
			if (if_block3) if_block3.m(div0, null);
			append(div0, t5);

			if (input_slot) {
				input_slot.m(div0, null);
			}

			append(div0, t6);
			if (if_block4) if_block4.m(div0, null);
			append(div0, t7);
			if (if_block5) if_block5.m(div0, null);
			append(div0, t8);
			if (if_block6) if_block6.m(div0, null);
			append(div1, t9);

			if (inner_slot) {
				inner_slot.m(div1, null);
			}

			append(div1, t10);

			if (inner_end_slot) {
				inner_end_slot.m(div1, null);
			}

			append(div2, t11);

			if (content_slot) {
				content_slot.m(div2, null);
			}

			append(div2, t12);

			if (content_end_slot) {
				content_end_slot.m(div2, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (content_start_slot) {
				if (content_start_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(content_start_slot, content_start_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_content_start_slot_changes_1, get_content_start_slot_context_1);
				}
			}

			if (/*isSortable*/ ctx[42] && /*isSortableOpposite*/ ctx[43]) {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_23(ctx);
					if_block0.c();
					if_block0.m(div2, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*media*/ ctx[1] || /*hasMediaSlots*/ ctx[45]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*media*/ 2 | dirty[1] & /*hasMediaSlots*/ 16384) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_21(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div2, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_start_slot) {
				if (inner_start_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(inner_start_slot, inner_start_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_inner_start_slot_changes_1, get_inner_start_slot_context_1);
				}
			}

			if (typeof /*label*/ ctx[36] !== "undefined" || /*hasLabelSlots*/ ctx[46]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[1] & /*label, hasLabelSlots*/ 32800) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_20(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div1, t4);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*input*/ ctx[3]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*input*/ 8) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_16(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div0, t5);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (input_slot) {
				if (input_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(input_slot, input_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_input_slot_changes_1, get_input_slot_context_1);
				}
			}

			if (/*hasErrorMessage*/ ctx[40] && /*errorMessageForce*/ ctx[34]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[1] & /*hasErrorMessage, errorMessageForce*/ 520) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_15(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div0, t7);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (/*clearButton*/ ctx[32]) {
				if (if_block5) {
					
				} else {
					if_block5 = create_if_block_14(ctx);
					if_block5.c();
					if_block5.m(div0, t8);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (typeof /*info*/ ctx[35] !== "undefined" || /*hasInfoSlots*/ ctx[39]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);

					if (dirty[1] & /*info, hasInfoSlots*/ 272) {
						transition_in(if_block6, 1);
					}
				} else {
					if_block6 = create_if_block_13(ctx);
					if_block6.c();
					transition_in(if_block6, 1);
					if_block6.m(div0, null);
				}
			} else if (if_block6) {
				group_outros();

				transition_out(if_block6, 1, 1, () => {
					if_block6 = null;
				});

				check_outros();
			}

			if (!current || dirty[1] & /*inputWrapClasses*/ 524288) {
				attr(div0, "class", /*inputWrapClasses*/ ctx[50]);
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_inner_slot_changes_1, get_inner_slot_context_1);
				}
			}

			if (inner_end_slot) {
				if (inner_end_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(inner_end_slot, inner_end_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_inner_end_slot_changes_1, get_inner_end_slot_context_1);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_content_slot_changes_1, get_content_slot_context_1);
				}
			}

			if (content_end_slot) {
				if (content_end_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(content_end_slot, content_end_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_content_end_slot_changes_1, get_content_end_slot_context_1);
				}
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
				(!current || dirty[1] & /*itemContentClasses*/ 131072) && { class: /*itemContentClasses*/ ctx[48] },
				dirty[1] & /*$$restProps*/ 33554432 && restProps(/*$$restProps*/ ctx[56])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(content_start_slot, local);
			transition_in(if_block1);
			transition_in(inner_start_slot, local);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(input_slot, local);
			transition_in(if_block4);
			transition_in(if_block6);
			transition_in(inner_slot, local);
			transition_in(inner_end_slot, local);
			transition_in(content_slot, local);
			transition_in(content_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(content_start_slot, local);
			transition_out(if_block1);
			transition_out(inner_start_slot, local);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(input_slot, local);
			transition_out(if_block4);
			transition_out(if_block6);
			transition_out(inner_slot, local);
			transition_out(inner_end_slot, local);
			transition_out(content_slot, local);
			transition_out(content_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (content_start_slot) content_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (inner_start_slot) inner_start_slot.d(detaching);
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (input_slot) input_slot.d(detaching);
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (inner_slot) inner_slot.d(detaching);
			if (inner_end_slot) inner_end_slot.d(detaching);
			if (content_slot) content_slot.d(detaching);
			if (content_end_slot) content_end_slot.d(detaching);
		}
	};
}

// (373:0) {#if wrap}
function create_if_block(ctx) {
	let li;
	let t0;
	let div2;
	let t1;
	let t2;
	let t3;
	let div1;
	let t4;
	let t5;
	let div0;
	let t6;
	let t7;
	let t8;
	let t9;
	let t10;
	let t11;
	let t12;
	let t13;
	let t14;
	let t15;
	let t16;
	let current;
	const root_start_slot_template = /*#slots*/ ctx[77]["root-start"];
	const root_start_slot = create_slot(root_start_slot_template, ctx, /*$$scope*/ ctx[76], get_root_start_slot_context);
	const content_start_slot_template = /*#slots*/ ctx[77]["content-start"];
	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[76], get_content_start_slot_context);
	let if_block0 = /*isSortable*/ ctx[42] && /*isSortableOpposite*/ ctx[43] && create_if_block_12(ctx);
	let if_block1 = (/*media*/ ctx[1] || /*hasMediaSlots*/ ctx[45]) && create_if_block_10(ctx);
	const inner_start_slot_template = /*#slots*/ ctx[77]["inner-start"];
	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[76], get_inner_start_slot_context);
	let if_block2 = (typeof /*label*/ ctx[36] !== "undefined" || /*hasLabelSlots*/ ctx[46]) && create_if_block_9(ctx);
	let if_block3 = /*input*/ ctx[3] && create_if_block_5(ctx);
	const input_slot_template = /*#slots*/ ctx[77].input;
	const input_slot = create_slot(input_slot_template, ctx, /*$$scope*/ ctx[76], get_input_slot_context);
	let if_block4 = /*hasErrorMessage*/ ctx[40] && /*errorMessageForce*/ ctx[34] && create_if_block_4(ctx);
	let if_block5 = /*clearButton*/ ctx[32] && create_if_block_3(ctx);
	let if_block6 = (typeof /*info*/ ctx[35] !== "undefined" || /*hasInfoSlots*/ ctx[39]) && create_if_block_2(ctx);
	const inner_slot_template = /*#slots*/ ctx[77].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[76], get_inner_slot_context);
	const inner_end_slot_template = /*#slots*/ ctx[77]["inner-end"];
	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[76], get_inner_end_slot_context);
	const content_slot_template = /*#slots*/ ctx[77].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[76], get_content_slot_context);
	const content_end_slot_template = /*#slots*/ ctx[77]["content-end"];
	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[76], get_content_end_slot_context);
	let if_block7 = /*isSortable*/ ctx[42] && !/*isSortableOpposite*/ ctx[43] && create_if_block_1(ctx);
	const root_slot_template = /*#slots*/ ctx[77].root;
	const root_slot = create_slot(root_slot_template, ctx, /*$$scope*/ ctx[76], get_root_slot_context);
	const root_end_slot_template = /*#slots*/ ctx[77]["root-end"];
	const root_end_slot = create_slot(root_end_slot_template, ctx, /*$$scope*/ ctx[76], get_root_end_slot_context);
	let li_levels = [{ class: /*classes*/ ctx[51] }, restProps(/*$$restProps*/ ctx[56])];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if (root_start_slot) root_start_slot.c();
			t0 = space();
			div2 = element("div");
			if (content_start_slot) content_start_slot.c();
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			div1 = element("div");
			if (inner_start_slot) inner_start_slot.c();
			t4 = space();
			if (if_block2) if_block2.c();
			t5 = space();
			div0 = element("div");
			if (if_block3) if_block3.c();
			t6 = space();
			if (input_slot) input_slot.c();
			t7 = space();
			if (if_block4) if_block4.c();
			t8 = space();
			if (if_block5) if_block5.c();
			t9 = space();
			if (if_block6) if_block6.c();
			t10 = space();
			if (inner_slot) inner_slot.c();
			t11 = space();
			if (inner_end_slot) inner_end_slot.c();
			t12 = space();
			if (content_slot) content_slot.c();
			t13 = space();
			if (content_end_slot) content_end_slot.c();
			t14 = space();
			if (if_block7) if_block7.c();
			t15 = space();
			if (root_slot) root_slot.c();
			t16 = space();
			if (root_end_slot) root_end_slot.c();
			attr(div0, "class", /*inputWrapClasses*/ ctx[50]);
			attr(div1, "class", "item-inner");
			attr(div2, "class", /*itemContentClasses*/ ctx[48]);
			set_attributes(li, li_data);
		},
		m(target, anchor) {
			insert(target, li, anchor);

			if (root_start_slot) {
				root_start_slot.m(li, null);
			}

			append(li, t0);
			append(li, div2);

			if (content_start_slot) {
				content_start_slot.m(div2, null);
			}

			append(div2, t1);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t2);
			if (if_block1) if_block1.m(div2, null);
			append(div2, t3);
			append(div2, div1);

			if (inner_start_slot) {
				inner_start_slot.m(div1, null);
			}

			append(div1, t4);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t5);
			append(div1, div0);
			if (if_block3) if_block3.m(div0, null);
			append(div0, t6);

			if (input_slot) {
				input_slot.m(div0, null);
			}

			append(div0, t7);
			if (if_block4) if_block4.m(div0, null);
			append(div0, t8);
			if (if_block5) if_block5.m(div0, null);
			append(div0, t9);
			if (if_block6) if_block6.m(div0, null);
			append(div1, t10);

			if (inner_slot) {
				inner_slot.m(div1, null);
			}

			append(div1, t11);

			if (inner_end_slot) {
				inner_end_slot.m(div1, null);
			}

			append(div2, t12);

			if (content_slot) {
				content_slot.m(div2, null);
			}

			append(div2, t13);

			if (content_end_slot) {
				content_end_slot.m(div2, null);
			}

			append(li, t14);
			if (if_block7) if_block7.m(li, null);
			append(li, t15);

			if (root_slot) {
				root_slot.m(li, null);
			}

			append(li, t16);

			if (root_end_slot) {
				root_end_slot.m(li, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (root_start_slot) {
				if (root_start_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(root_start_slot, root_start_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_root_start_slot_changes, get_root_start_slot_context);
				}
			}

			if (content_start_slot) {
				if (content_start_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(content_start_slot, content_start_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_content_start_slot_changes, get_content_start_slot_context);
				}
			}

			if (/*isSortable*/ ctx[42] && /*isSortableOpposite*/ ctx[43]) {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_12(ctx);
					if_block0.c();
					if_block0.m(div2, t2);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*media*/ ctx[1] || /*hasMediaSlots*/ ctx[45]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*media*/ 2 | dirty[1] & /*hasMediaSlots*/ 16384) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_10(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div2, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_start_slot) {
				if (inner_start_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(inner_start_slot, inner_start_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_inner_start_slot_changes, get_inner_start_slot_context);
				}
			}

			if (typeof /*label*/ ctx[36] !== "undefined" || /*hasLabelSlots*/ ctx[46]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[1] & /*label, hasLabelSlots*/ 32800) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_9(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div1, t5);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*input*/ ctx[3]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*input*/ 8) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_5(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div0, t6);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (input_slot) {
				if (input_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(input_slot, input_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_input_slot_changes, get_input_slot_context);
				}
			}

			if (/*hasErrorMessage*/ ctx[40] && /*errorMessageForce*/ ctx[34]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[1] & /*hasErrorMessage, errorMessageForce*/ 520) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_4(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div0, t8);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (/*clearButton*/ ctx[32]) {
				if (if_block5) {
					
				} else {
					if_block5 = create_if_block_3(ctx);
					if_block5.c();
					if_block5.m(div0, t9);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (typeof /*info*/ ctx[35] !== "undefined" || /*hasInfoSlots*/ ctx[39]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);

					if (dirty[1] & /*info, hasInfoSlots*/ 272) {
						transition_in(if_block6, 1);
					}
				} else {
					if_block6 = create_if_block_2(ctx);
					if_block6.c();
					transition_in(if_block6, 1);
					if_block6.m(div0, null);
				}
			} else if (if_block6) {
				group_outros();

				transition_out(if_block6, 1, 1, () => {
					if_block6 = null;
				});

				check_outros();
			}

			if (!current || dirty[1] & /*inputWrapClasses*/ 524288) {
				attr(div0, "class", /*inputWrapClasses*/ ctx[50]);
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_inner_slot_changes, get_inner_slot_context);
				}
			}

			if (inner_end_slot) {
				if (inner_end_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(inner_end_slot, inner_end_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_inner_end_slot_changes, get_inner_end_slot_context);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_content_slot_changes, get_content_slot_context);
				}
			}

			if (content_end_slot) {
				if (content_end_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(content_end_slot, content_end_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_content_end_slot_changes, get_content_end_slot_context);
				}
			}

			if (!current || dirty[1] & /*itemContentClasses*/ 131072) {
				attr(div2, "class", /*itemContentClasses*/ ctx[48]);
			}

			if (/*isSortable*/ ctx[42] && !/*isSortableOpposite*/ ctx[43]) {
				if (if_block7) {
					
				} else {
					if_block7 = create_if_block_1(ctx);
					if_block7.c();
					if_block7.m(li, t15);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (root_slot) {
				if (root_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(root_slot, root_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_root_slot_changes, get_root_slot_context);
				}
			}

			if (root_end_slot) {
				if (root_end_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(root_end_slot, root_end_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_root_end_slot_changes, get_root_end_slot_context);
				}
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				(!current || dirty[1] & /*classes*/ 1048576) && { class: /*classes*/ ctx[51] },
				dirty[1] & /*$$restProps*/ 33554432 && restProps(/*$$restProps*/ ctx[56])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(root_start_slot, local);
			transition_in(content_start_slot, local);
			transition_in(if_block1);
			transition_in(inner_start_slot, local);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(input_slot, local);
			transition_in(if_block4);
			transition_in(if_block6);
			transition_in(inner_slot, local);
			transition_in(inner_end_slot, local);
			transition_in(content_slot, local);
			transition_in(content_end_slot, local);
			transition_in(root_slot, local);
			transition_in(root_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(root_start_slot, local);
			transition_out(content_start_slot, local);
			transition_out(if_block1);
			transition_out(inner_start_slot, local);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(input_slot, local);
			transition_out(if_block4);
			transition_out(if_block6);
			transition_out(inner_slot, local);
			transition_out(inner_end_slot, local);
			transition_out(content_slot, local);
			transition_out(content_end_slot, local);
			transition_out(root_slot, local);
			transition_out(root_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (root_start_slot) root_start_slot.d(detaching);
			if (content_start_slot) content_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (inner_start_slot) inner_start_slot.d(detaching);
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (input_slot) input_slot.d(detaching);
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (inner_slot) inner_slot.d(detaching);
			if (inner_end_slot) inner_end_slot.d(detaching);
			if (content_slot) content_slot.d(detaching);
			if (content_end_slot) content_end_slot.d(detaching);
			if (if_block7) if_block7.d();
			if (root_slot) root_slot.d(detaching);
			if (root_end_slot) root_end_slot.d(detaching);
		}
	};
}

// (580:4) {#if isSortable && isSortableOpposite}
function create_if_block_23(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "sortable-handler");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (584:4) {#if media || hasMediaSlots}
function create_if_block_21(ctx) {
	let div;
	let t;
	let current;
	let if_block = typeof /*media*/ ctx[1] !== "undefined" && create_if_block_22(ctx);
	const media_slot_template = /*#slots*/ ctx[77].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[76], get_media_slot_context_1);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (media_slot) media_slot.c();
			attr(div, "class", "item-media");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);

			if (media_slot) {
				media_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (typeof /*media*/ ctx[1] !== "undefined") {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_22(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (media_slot) {
				if (media_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_media_slot_changes_1, get_media_slot_context_1);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(media_slot, local);
			current = true;
		},
		o(local) {
			transition_out(media_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (media_slot) media_slot.d(detaching);
		}
	};
}

// (586:8) {#if typeof media !== 'undefined'}
function create_if_block_22(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			if (img.src !== (img_src_value = /*media*/ ctx[1])) attr(img, "src", img_src_value);
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*media*/ 2 && img.src !== (img_src_value = /*media*/ ctx[1])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (592:6) {#if typeof label !== 'undefined' || hasLabelSlots}
function create_if_block_20(ctx) {
	let div;
	let t0_value = plainText(/*label*/ ctx[36]) + "";
	let t0;
	let t1;
	let current;
	const label_slot_template = /*#slots*/ ctx[77].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[76], get_label_slot_context_1);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (label_slot) label_slot.c();
			attr(div, "class", /*labelClasses*/ ctx[49]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (label_slot) {
				label_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[1] & /*label*/ 32) && t0_value !== (t0_value = plainText(/*label*/ ctx[36]) + "")) set_data(t0, t0_value);

			if (label_slot) {
				if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(label_slot, label_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_label_slot_changes_1, get_label_slot_context_1);
				}
			}

			if (!current || dirty[1] & /*labelClasses*/ 262144) {
				attr(div, "class", /*labelClasses*/ ctx[49]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(label_slot, local);
			current = true;
		},
		o(local) {
			transition_out(label_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (label_slot) label_slot.d(detaching);
		}
	};
}

// (599:8) {#if input}
function create_if_block_16(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	const if_block_creators = [
		create_if_block_17,
		create_if_block_18,
		create_if_block_19,
		create_else_block_2
	];

	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*type*/ ctx[4] === "select") return 0;
		if (/*type*/ ctx[4] === "textarea") return 1;
		if (/*type*/ ctx[4] === "texteditor") return 2;
		return 3;
	}

	current_block_type_index = select_block_type_2(ctx, [-1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (702:10) {:else}
function create_else_block_2(ctx) {
	let input_1;
	let input_1_validate_value;
	let input_1_data_validate_value;
	let input_1_data_validate_on_blur_value;
	let input_1_data_error_message_value;
	let input_1_value_value;
	let mounted;
	let dispose;

	return {
		c() {
			input_1 = element("input");
			attr(input_1, "style", /*inputStyle*/ ctx[26]);
			attr(input_1, "name", /*name*/ ctx[5]);
			attr(input_1, "type", /*inputType*/ ctx[38]);
			attr(input_1, "inputmode", /*inputmode*/ ctx[6]);
			attr(input_1, "placeholder", /*placeholder*/ ctx[10]);
			attr(input_1, "id", /*inputId*/ ctx[11]);
			attr(input_1, "size", /*size*/ ctx[12]);
			attr(input_1, "accept", /*accept*/ ctx[13]);
			attr(input_1, "autocomplete", /*autocomplete*/ ctx[14]);
			attr(input_1, "autocorrect", /*autocorrect*/ ctx[15]);
			attr(input_1, "autocapitalize", /*autocapitalize*/ ctx[16]);
			attr(input_1, "spellcheck", /*spellcheck*/ ctx[17]);
			input_1.autofocus = /*autofocus*/ ctx[18];
			attr(input_1, "autosave", /*autosave*/ ctx[19]);
			input_1.disabled = /*disabled*/ ctx[9];
			attr(input_1, "max", /*max*/ ctx[20]);
			attr(input_1, "maxlength", /*maxlength*/ ctx[23]);
			attr(input_1, "min", /*min*/ ctx[21]);
			attr(input_1, "minlength", /*minlength*/ ctx[24]);
			attr(input_1, "step", /*step*/ ctx[22]);
			input_1.multiple = /*multiple*/ ctx[25];
			input_1.readOnly = /*readonly*/ ctx[7];
			input_1.required = /*required*/ ctx[8];
			attr(input_1, "pattern", /*pattern*/ ctx[27]);

			attr(input_1, "validate", input_1_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined);

			attr(input_1, "data-validate", input_1_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(input_1, "data-validate-on-blur", input_1_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(input_1, "tabindex", /*tabindex*/ ctx[30]);

			attr(input_1, "data-error-message", input_1_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33]);

			attr(input_1, "class", /*inputClasses*/ ctx[47]);

			input_1.value = input_1_value_value = /*type*/ ctx[4] === "datepicker" || /*type*/ ctx[4] === "colorpicker" || /*type*/ ctx[4] === "file"
			? ""
			: /*inputValue*/ ctx[44];
		},
		m(target, anchor) {
			insert(target, input_1, anchor);
			/*input_1_binding_1*/ ctx[83](input_1);

			if (!mounted) {
				dispose = [
					listen(input_1, "focus", /*onFocus*/ ctx[53]),
					listen(input_1, "blur", /*onBlur*/ ctx[54]),
					listen(input_1, "input", /*onInput*/ ctx[52]),
					listen(input_1, "change", /*onChange*/ ctx[55])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*inputStyle*/ 67108864) {
				attr(input_1, "style", /*inputStyle*/ ctx[26]);
			}

			if (dirty[0] & /*name*/ 32) {
				attr(input_1, "name", /*name*/ ctx[5]);
			}

			if (dirty[1] & /*inputType*/ 128) {
				attr(input_1, "type", /*inputType*/ ctx[38]);
			}

			if (dirty[0] & /*inputmode*/ 64) {
				attr(input_1, "inputmode", /*inputmode*/ ctx[6]);
			}

			if (dirty[0] & /*placeholder*/ 1024) {
				attr(input_1, "placeholder", /*placeholder*/ ctx[10]);
			}

			if (dirty[0] & /*inputId*/ 2048) {
				attr(input_1, "id", /*inputId*/ ctx[11]);
			}

			if (dirty[0] & /*size*/ 4096) {
				attr(input_1, "size", /*size*/ ctx[12]);
			}

			if (dirty[0] & /*accept*/ 8192) {
				attr(input_1, "accept", /*accept*/ ctx[13]);
			}

			if (dirty[0] & /*autocomplete*/ 16384) {
				attr(input_1, "autocomplete", /*autocomplete*/ ctx[14]);
			}

			if (dirty[0] & /*autocorrect*/ 32768) {
				attr(input_1, "autocorrect", /*autocorrect*/ ctx[15]);
			}

			if (dirty[0] & /*autocapitalize*/ 65536) {
				attr(input_1, "autocapitalize", /*autocapitalize*/ ctx[16]);
			}

			if (dirty[0] & /*spellcheck*/ 131072) {
				attr(input_1, "spellcheck", /*spellcheck*/ ctx[17]);
			}

			if (dirty[0] & /*autofocus*/ 262144) {
				input_1.autofocus = /*autofocus*/ ctx[18];
			}

			if (dirty[0] & /*autosave*/ 524288) {
				attr(input_1, "autosave", /*autosave*/ ctx[19]);
			}

			if (dirty[0] & /*disabled*/ 512) {
				input_1.disabled = /*disabled*/ ctx[9];
			}

			if (dirty[0] & /*max*/ 1048576) {
				attr(input_1, "max", /*max*/ ctx[20]);
			}

			if (dirty[0] & /*maxlength*/ 8388608) {
				attr(input_1, "maxlength", /*maxlength*/ ctx[23]);
			}

			if (dirty[0] & /*min*/ 2097152) {
				attr(input_1, "min", /*min*/ ctx[21]);
			}

			if (dirty[0] & /*minlength*/ 16777216) {
				attr(input_1, "minlength", /*minlength*/ ctx[24]);
			}

			if (dirty[0] & /*step*/ 4194304) {
				attr(input_1, "step", /*step*/ ctx[22]);
			}

			if (dirty[0] & /*multiple*/ 33554432) {
				input_1.multiple = /*multiple*/ ctx[25];
			}

			if (dirty[0] & /*readonly*/ 128) {
				input_1.readOnly = /*readonly*/ ctx[7];
			}

			if (dirty[0] & /*required*/ 256) {
				input_1.required = /*required*/ ctx[8];
			}

			if (dirty[0] & /*pattern*/ 134217728) {
				attr(input_1, "pattern", /*pattern*/ ctx[27]);
			}

			if (dirty[0] & /*validate*/ 268435456 && input_1_validate_value !== (input_1_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined)) {
				attr(input_1, "validate", input_1_validate_value);
			}

			if (dirty[0] & /*validate, validateOnBlur*/ 805306368 && input_1_data_validate_value !== (input_1_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(input_1, "data-validate", input_1_data_validate_value);
			}

			if (dirty[0] & /*validateOnBlur*/ 536870912 && input_1_data_validate_on_blur_value !== (input_1_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(input_1, "data-validate-on-blur", input_1_data_validate_on_blur_value);
			}

			if (dirty[0] & /*tabindex*/ 1073741824) {
				attr(input_1, "tabindex", /*tabindex*/ ctx[30]);
			}

			if (dirty[1] & /*errorMessageForce, errorMessage*/ 12 && input_1_data_error_message_value !== (input_1_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33])) {
				attr(input_1, "data-error-message", input_1_data_error_message_value);
			}

			if (dirty[1] & /*inputClasses*/ 65536) {
				attr(input_1, "class", /*inputClasses*/ ctx[47]);
			}

			if (dirty[0] & /*type*/ 16 | dirty[1] & /*inputValue*/ 8192 && input_1_value_value !== (input_1_value_value = /*type*/ ctx[4] === "datepicker" || /*type*/ ctx[4] === "colorpicker" || /*type*/ ctx[4] === "file"
			? ""
			: /*inputValue*/ ctx[44]) && input_1.value !== input_1_value_value) {
				input_1.value = input_1_value_value;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input_1);
			/*input_1_binding_1*/ ctx[83](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (691:42) 
function create_if_block_19(ctx) {
	let texteditor;
	let current;

	const texteditor_spread_levels = [
		{
			value: typeof /*value*/ ctx[0] === "undefined"
			? ""
			: /*value*/ ctx[0]
		},
		{ resizable: /*resizable*/ ctx[31] },
		{ placeholder: /*placeholder*/ ctx[10] },
		{ onTextEditorFocus: /*onFocus*/ ctx[53] },
		{ onTextEditorBlur: /*onBlur*/ ctx[54] },
		{ onTextEditorInput: /*onInput*/ ctx[52] },
		{ onTextEditorChange: /*onChange*/ ctx[55] },
		/*textEditorParams*/ ctx[37]
	];

	let texteditor_props = {};

	for (let i = 0; i < texteditor_spread_levels.length; i += 1) {
		texteditor_props = assign(texteditor_props, texteditor_spread_levels[i]);
	}

	texteditor = new TextEditor({ props: texteditor_props });

	return {
		c() {
			create_component(texteditor.$$.fragment);
		},
		m(target, anchor) {
			mount_component(texteditor, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const texteditor_changes = (dirty[0] & /*value, placeholder*/ 1025 | dirty[1] & /*resizable, onFocus, onBlur, onInput, onChange, textEditorParams*/ 31457345)
			? get_spread_update(texteditor_spread_levels, [
					dirty[0] & /*value*/ 1 && {
						value: typeof /*value*/ ctx[0] === "undefined"
						? ""
						: /*value*/ ctx[0]
					},
					dirty[1] & /*resizable*/ 1 && { resizable: /*resizable*/ ctx[31] },
					dirty[0] & /*placeholder*/ 1024 && { placeholder: /*placeholder*/ ctx[10] },
					dirty[1] & /*onFocus*/ 4194304 && { onTextEditorFocus: /*onFocus*/ ctx[53] },
					dirty[1] & /*onBlur*/ 8388608 && { onTextEditorBlur: /*onBlur*/ ctx[54] },
					dirty[1] & /*onInput*/ 2097152 && { onTextEditorInput: /*onInput*/ ctx[52] },
					dirty[1] & /*onChange*/ 16777216 && { onTextEditorChange: /*onChange*/ ctx[55] },
					dirty[1] & /*textEditorParams*/ 64 && get_spread_object(/*textEditorParams*/ ctx[37])
				])
			: {};

			texteditor.$set(texteditor_changes);
		},
		i(local) {
			if (current) return;
			transition_in(texteditor.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(texteditor.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(texteditor, detaching);
		}
	};
}

// (646:40) 
function create_if_block_18(ctx) {
	let textarea;
	let textarea_validate_value;
	let textarea_data_validate_value;
	let textarea_data_validate_on_blur_value;
	let textarea_data_error_message_value;
	let mounted;
	let dispose;

	return {
		c() {
			textarea = element("textarea");
			attr(textarea, "style", /*inputStyle*/ ctx[26]);
			attr(textarea, "name", /*name*/ ctx[5]);
			attr(textarea, "placeholder", /*placeholder*/ ctx[10]);
			attr(textarea, "id", /*inputId*/ ctx[11]);
			attr(textarea, "size", /*size*/ ctx[12]);
			attr(textarea, "inputmode", /*inputmode*/ ctx[6]);
			attr(textarea, "accept", /*accept*/ ctx[13]);
			attr(textarea, "autocomplete", /*autocomplete*/ ctx[14]);
			attr(textarea, "autocorrect", /*autocorrect*/ ctx[15]);
			attr(textarea, "autocapitalize", /*autocapitalize*/ ctx[16]);
			attr(textarea, "spellcheck", /*spellcheck*/ ctx[17]);
			textarea.autofocus = /*autofocus*/ ctx[18];
			attr(textarea, "autosave", /*autosave*/ ctx[19]);
			textarea.disabled = /*disabled*/ ctx[9];
			attr(textarea, "max", /*max*/ ctx[20]);
			attr(textarea, "maxlength", /*maxlength*/ ctx[23]);
			attr(textarea, "min", /*min*/ ctx[21]);
			attr(textarea, "minlength", /*minlength*/ ctx[24]);
			attr(textarea, "step", /*step*/ ctx[22]);
			attr(textarea, "multiple", /*multiple*/ ctx[25]);
			textarea.readOnly = /*readonly*/ ctx[7];
			textarea.required = /*required*/ ctx[8];
			attr(textarea, "pattern", /*pattern*/ ctx[27]);

			attr(textarea, "validate", textarea_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined);

			attr(textarea, "data-validate", textarea_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(textarea, "data-validate-on-blur", textarea_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(textarea, "tabindex", /*tabindex*/ ctx[30]);

			attr(textarea, "data-error-message", textarea_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33]);

			attr(textarea, "class", /*inputClasses*/ ctx[47]);
			textarea.value = /*inputValue*/ ctx[44];
		},
		m(target, anchor) {
			insert(target, textarea, anchor);
			/*textarea_binding_1*/ ctx[82](textarea);

			if (!mounted) {
				dispose = [
					listen(textarea, "focus", /*onFocus*/ ctx[53]),
					listen(textarea, "blur", /*onBlur*/ ctx[54]),
					listen(textarea, "input", /*onInput*/ ctx[52]),
					listen(textarea, "change", /*onChange*/ ctx[55])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*inputStyle*/ 67108864) {
				attr(textarea, "style", /*inputStyle*/ ctx[26]);
			}

			if (dirty[0] & /*name*/ 32) {
				attr(textarea, "name", /*name*/ ctx[5]);
			}

			if (dirty[0] & /*placeholder*/ 1024) {
				attr(textarea, "placeholder", /*placeholder*/ ctx[10]);
			}

			if (dirty[0] & /*inputId*/ 2048) {
				attr(textarea, "id", /*inputId*/ ctx[11]);
			}

			if (dirty[0] & /*size*/ 4096) {
				attr(textarea, "size", /*size*/ ctx[12]);
			}

			if (dirty[0] & /*inputmode*/ 64) {
				attr(textarea, "inputmode", /*inputmode*/ ctx[6]);
			}

			if (dirty[0] & /*accept*/ 8192) {
				attr(textarea, "accept", /*accept*/ ctx[13]);
			}

			if (dirty[0] & /*autocomplete*/ 16384) {
				attr(textarea, "autocomplete", /*autocomplete*/ ctx[14]);
			}

			if (dirty[0] & /*autocorrect*/ 32768) {
				attr(textarea, "autocorrect", /*autocorrect*/ ctx[15]);
			}

			if (dirty[0] & /*autocapitalize*/ 65536) {
				attr(textarea, "autocapitalize", /*autocapitalize*/ ctx[16]);
			}

			if (dirty[0] & /*spellcheck*/ 131072) {
				attr(textarea, "spellcheck", /*spellcheck*/ ctx[17]);
			}

			if (dirty[0] & /*autofocus*/ 262144) {
				textarea.autofocus = /*autofocus*/ ctx[18];
			}

			if (dirty[0] & /*autosave*/ 524288) {
				attr(textarea, "autosave", /*autosave*/ ctx[19]);
			}

			if (dirty[0] & /*disabled*/ 512) {
				textarea.disabled = /*disabled*/ ctx[9];
			}

			if (dirty[0] & /*max*/ 1048576) {
				attr(textarea, "max", /*max*/ ctx[20]);
			}

			if (dirty[0] & /*maxlength*/ 8388608) {
				attr(textarea, "maxlength", /*maxlength*/ ctx[23]);
			}

			if (dirty[0] & /*min*/ 2097152) {
				attr(textarea, "min", /*min*/ ctx[21]);
			}

			if (dirty[0] & /*minlength*/ 16777216) {
				attr(textarea, "minlength", /*minlength*/ ctx[24]);
			}

			if (dirty[0] & /*step*/ 4194304) {
				attr(textarea, "step", /*step*/ ctx[22]);
			}

			if (dirty[0] & /*multiple*/ 33554432) {
				attr(textarea, "multiple", /*multiple*/ ctx[25]);
			}

			if (dirty[0] & /*readonly*/ 128) {
				textarea.readOnly = /*readonly*/ ctx[7];
			}

			if (dirty[0] & /*required*/ 256) {
				textarea.required = /*required*/ ctx[8];
			}

			if (dirty[0] & /*pattern*/ 134217728) {
				attr(textarea, "pattern", /*pattern*/ ctx[27]);
			}

			if (dirty[0] & /*validate*/ 268435456 && textarea_validate_value !== (textarea_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined)) {
				attr(textarea, "validate", textarea_validate_value);
			}

			if (dirty[0] & /*validate, validateOnBlur*/ 805306368 && textarea_data_validate_value !== (textarea_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(textarea, "data-validate", textarea_data_validate_value);
			}

			if (dirty[0] & /*validateOnBlur*/ 536870912 && textarea_data_validate_on_blur_value !== (textarea_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(textarea, "data-validate-on-blur", textarea_data_validate_on_blur_value);
			}

			if (dirty[0] & /*tabindex*/ 1073741824) {
				attr(textarea, "tabindex", /*tabindex*/ ctx[30]);
			}

			if (dirty[1] & /*errorMessageForce, errorMessage*/ 12 && textarea_data_error_message_value !== (textarea_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33])) {
				attr(textarea, "data-error-message", textarea_data_error_message_value);
			}

			if (dirty[1] & /*inputClasses*/ 65536) {
				attr(textarea, "class", /*inputClasses*/ ctx[47]);
			}

			if (dirty[1] & /*inputValue*/ 8192) {
				textarea.value = /*inputValue*/ ctx[44];
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(textarea);
			/*textarea_binding_1*/ ctx[82](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (600:10) {#if type === 'select'}
function create_if_block_17(ctx) {
	let select;
	let select_validate_value;
	let select_data_validate_value;
	let select_data_validate_on_blur_value;
	let select_data_error_message_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[77].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[76], null);

	return {
		c() {
			select = element("select");
			if (default_slot) default_slot.c();
			attr(select, "style", /*inputStyle*/ ctx[26]);
			attr(select, "name", /*name*/ ctx[5]);
			attr(select, "placeholder", /*placeholder*/ ctx[10]);
			attr(select, "id", /*inputId*/ ctx[11]);
			attr(select, "size", /*size*/ ctx[12]);
			attr(select, "accept", /*accept*/ ctx[13]);
			attr(select, "autocomplete", /*autocomplete*/ ctx[14]);
			attr(select, "autocorrect", /*autocorrect*/ ctx[15]);
			attr(select, "autocapitalize", /*autocapitalize*/ ctx[16]);
			attr(select, "spellcheck", /*spellcheck*/ ctx[17]);
			select.autofocus = /*autofocus*/ ctx[18];
			attr(select, "autosave", /*autosave*/ ctx[19]);
			select.disabled = /*disabled*/ ctx[9];
			attr(select, "max", /*max*/ ctx[20]);
			attr(select, "maxlength", /*maxlength*/ ctx[23]);
			attr(select, "min", /*min*/ ctx[21]);
			attr(select, "minlength", /*minlength*/ ctx[24]);
			attr(select, "step", /*step*/ ctx[22]);
			select.multiple = /*multiple*/ ctx[25];
			attr(select, "readonly", /*readonly*/ ctx[7]);
			select.required = /*required*/ ctx[8];
			attr(select, "pattern", /*pattern*/ ctx[27]);

			attr(select, "validate", select_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined);

			attr(select, "data-validate", select_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(select, "data-validate-on-blur", select_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(select, "tabindex", /*tabindex*/ ctx[30]);

			attr(select, "data-error-message", select_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33]);

			attr(select, "class", /*inputClasses*/ ctx[47]);
		},
		m(target, anchor) {
			insert(target, select, anchor);

			if (default_slot) {
				default_slot.m(select, null);
			}

			select_option(select, /*inputValue*/ ctx[44]);
			/*select_binding_1*/ ctx[81](select);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "focus", /*onFocus*/ ctx[53]),
					listen(select, "blur", /*onBlur*/ ctx[54]),
					listen(select, "input", /*onInput*/ ctx[52]),
					listen(select, "change", /*onChange*/ ctx[55])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[76], dirty, null, null);
				}
			}

			if (!current || dirty[0] & /*inputStyle*/ 67108864) {
				attr(select, "style", /*inputStyle*/ ctx[26]);
			}

			if (!current || dirty[0] & /*name*/ 32) {
				attr(select, "name", /*name*/ ctx[5]);
			}

			if (!current || dirty[0] & /*placeholder*/ 1024) {
				attr(select, "placeholder", /*placeholder*/ ctx[10]);
			}

			if (!current || dirty[0] & /*inputId*/ 2048) {
				attr(select, "id", /*inputId*/ ctx[11]);
			}

			if (!current || dirty[0] & /*size*/ 4096) {
				attr(select, "size", /*size*/ ctx[12]);
			}

			if (!current || dirty[0] & /*accept*/ 8192) {
				attr(select, "accept", /*accept*/ ctx[13]);
			}

			if (!current || dirty[0] & /*autocomplete*/ 16384) {
				attr(select, "autocomplete", /*autocomplete*/ ctx[14]);
			}

			if (!current || dirty[0] & /*autocorrect*/ 32768) {
				attr(select, "autocorrect", /*autocorrect*/ ctx[15]);
			}

			if (!current || dirty[0] & /*autocapitalize*/ 65536) {
				attr(select, "autocapitalize", /*autocapitalize*/ ctx[16]);
			}

			if (!current || dirty[0] & /*spellcheck*/ 131072) {
				attr(select, "spellcheck", /*spellcheck*/ ctx[17]);
			}

			if (!current || dirty[0] & /*autofocus*/ 262144) {
				select.autofocus = /*autofocus*/ ctx[18];
			}

			if (!current || dirty[0] & /*autosave*/ 524288) {
				attr(select, "autosave", /*autosave*/ ctx[19]);
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				select.disabled = /*disabled*/ ctx[9];
			}

			if (!current || dirty[0] & /*max*/ 1048576) {
				attr(select, "max", /*max*/ ctx[20]);
			}

			if (!current || dirty[0] & /*maxlength*/ 8388608) {
				attr(select, "maxlength", /*maxlength*/ ctx[23]);
			}

			if (!current || dirty[0] & /*min*/ 2097152) {
				attr(select, "min", /*min*/ ctx[21]);
			}

			if (!current || dirty[0] & /*minlength*/ 16777216) {
				attr(select, "minlength", /*minlength*/ ctx[24]);
			}

			if (!current || dirty[0] & /*step*/ 4194304) {
				attr(select, "step", /*step*/ ctx[22]);
			}

			if (!current || dirty[0] & /*multiple*/ 33554432) {
				select.multiple = /*multiple*/ ctx[25];
			}

			if (!current || dirty[0] & /*readonly*/ 128) {
				attr(select, "readonly", /*readonly*/ ctx[7]);
			}

			if (!current || dirty[0] & /*required*/ 256) {
				select.required = /*required*/ ctx[8];
			}

			if (!current || dirty[0] & /*pattern*/ 134217728) {
				attr(select, "pattern", /*pattern*/ ctx[27]);
			}

			if (!current || dirty[0] & /*validate*/ 268435456 && select_validate_value !== (select_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined)) {
				attr(select, "validate", select_validate_value);
			}

			if (!current || dirty[0] & /*validate, validateOnBlur*/ 805306368 && select_data_validate_value !== (select_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(select, "data-validate", select_data_validate_value);
			}

			if (!current || dirty[0] & /*validateOnBlur*/ 536870912 && select_data_validate_on_blur_value !== (select_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(select, "data-validate-on-blur", select_data_validate_on_blur_value);
			}

			if (!current || dirty[0] & /*tabindex*/ 1073741824) {
				attr(select, "tabindex", /*tabindex*/ ctx[30]);
			}

			if (!current || dirty[1] & /*errorMessageForce, errorMessage*/ 12 && select_data_error_message_value !== (select_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33])) {
				attr(select, "data-error-message", select_data_error_message_value);
			}

			if (!current || dirty[1] & /*inputClasses*/ 65536) {
				attr(select, "class", /*inputClasses*/ ctx[47]);
			}

			if (!current || dirty[1] & /*inputValue*/ 8192) {
				select_option(select, /*inputValue*/ ctx[44]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(select);
			if (default_slot) default_slot.d(detaching);
			/*select_binding_1*/ ctx[81](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (753:8) {#if hasErrorMessage && errorMessageForce}
function create_if_block_15(ctx) {
	let div;
	let t0_value = plainText(/*errorMessage*/ ctx[33]) + "";
	let t0;
	let t1;
	let current;
	const error_message_slot_template = /*#slots*/ ctx[77]["error-message"];
	const error_message_slot = create_slot(error_message_slot_template, ctx, /*$$scope*/ ctx[76], get_error_message_slot_context_1);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (error_message_slot) error_message_slot.c();
			attr(div, "class", "item-input-error-message");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (error_message_slot) {
				error_message_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[1] & /*errorMessage*/ 4) && t0_value !== (t0_value = plainText(/*errorMessage*/ ctx[33]) + "")) set_data(t0, t0_value);

			if (error_message_slot) {
				if (error_message_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(error_message_slot, error_message_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_error_message_slot_changes_1, get_error_message_slot_context_1);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(error_message_slot, local);
			current = true;
		},
		o(local) {
			transition_out(error_message_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (error_message_slot) error_message_slot.d(detaching);
		}
	};
}

// (759:8) {#if clearButton}
function create_if_block_14(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			attr(span, "class", "input-clear-button");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (760:8) {#if typeof info !== 'undefined' || hasInfoSlots}
function create_if_block_13(ctx) {
	let div;
	let t0_value = plainText(/*info*/ ctx[35]) + "";
	let t0;
	let t1;
	let current;
	const info_slot_template = /*#slots*/ ctx[77].info;
	const info_slot = create_slot(info_slot_template, ctx, /*$$scope*/ ctx[76], get_info_slot_context_1);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (info_slot) info_slot.c();
			attr(div, "class", "item-input-info");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (info_slot) {
				info_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[1] & /*info*/ 16) && t0_value !== (t0_value = plainText(/*info*/ ctx[35]) + "")) set_data(t0, t0_value);

			if (info_slot) {
				if (info_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(info_slot, info_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_info_slot_changes_1, get_info_slot_context_1);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(info_slot, local);
			current = true;
		},
		o(local) {
			transition_out(info_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (info_slot) info_slot.d(detaching);
		}
	};
}

// (378:6) {#if isSortable && isSortableOpposite}
function create_if_block_12(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "sortable-handler");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (382:6) {#if media || hasMediaSlots}
function create_if_block_10(ctx) {
	let div;
	let t;
	let current;
	let if_block = typeof /*media*/ ctx[1] !== "undefined" && create_if_block_11(ctx);
	const media_slot_template = /*#slots*/ ctx[77].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[76], get_media_slot_context);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (media_slot) media_slot.c();
			attr(div, "class", "item-media");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);

			if (media_slot) {
				media_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (typeof /*media*/ ctx[1] !== "undefined") {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_11(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (media_slot) {
				if (media_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_media_slot_changes, get_media_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(media_slot, local);
			current = true;
		},
		o(local) {
			transition_out(media_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (media_slot) media_slot.d(detaching);
		}
	};
}

// (384:10) {#if typeof media !== 'undefined'}
function create_if_block_11(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			if (img.src !== (img_src_value = /*media*/ ctx[1])) attr(img, "src", img_src_value);
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*media*/ 2 && img.src !== (img_src_value = /*media*/ ctx[1])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (390:8) {#if typeof label !== 'undefined' || hasLabelSlots}
function create_if_block_9(ctx) {
	let div;
	let t0_value = plainText(/*label*/ ctx[36]) + "";
	let t0;
	let t1;
	let current;
	const label_slot_template = /*#slots*/ ctx[77].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[76], get_label_slot_context);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (label_slot) label_slot.c();
			attr(div, "class", /*labelClasses*/ ctx[49]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (label_slot) {
				label_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[1] & /*label*/ 32) && t0_value !== (t0_value = plainText(/*label*/ ctx[36]) + "")) set_data(t0, t0_value);

			if (label_slot) {
				if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(label_slot, label_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_label_slot_changes, get_label_slot_context);
				}
			}

			if (!current || dirty[1] & /*labelClasses*/ 262144) {
				attr(div, "class", /*labelClasses*/ ctx[49]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(label_slot, local);
			current = true;
		},
		o(local) {
			transition_out(label_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (label_slot) label_slot.d(detaching);
		}
	};
}

// (397:10) {#if input}
function create_if_block_5(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_6, create_if_block_7, create_if_block_8, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*type*/ ctx[4] === "select") return 0;
		if (/*type*/ ctx[4] === "textarea") return 1;
		if (/*type*/ ctx[4] === "texteditor") return 2;
		return 3;
	}

	current_block_type_index = select_block_type_1(ctx, [-1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (500:12) {:else}
function create_else_block(ctx) {
	let input_1;
	let input_1_validate_value;
	let input_1_data_validate_value;
	let input_1_data_validate_on_blur_value;
	let input_1_data_error_message_value;
	let input_1_value_value;
	let mounted;
	let dispose;

	return {
		c() {
			input_1 = element("input");
			attr(input_1, "style", /*inputStyle*/ ctx[26]);
			attr(input_1, "name", /*name*/ ctx[5]);
			attr(input_1, "type", /*inputType*/ ctx[38]);
			attr(input_1, "inputmode", /*inputmode*/ ctx[6]);
			attr(input_1, "placeholder", /*placeholder*/ ctx[10]);
			attr(input_1, "id", /*inputId*/ ctx[11]);
			attr(input_1, "size", /*size*/ ctx[12]);
			attr(input_1, "accept", /*accept*/ ctx[13]);
			attr(input_1, "autocomplete", /*autocomplete*/ ctx[14]);
			attr(input_1, "autocorrect", /*autocorrect*/ ctx[15]);
			attr(input_1, "autocapitalize", /*autocapitalize*/ ctx[16]);
			attr(input_1, "spellcheck", /*spellcheck*/ ctx[17]);
			input_1.autofocus = /*autofocus*/ ctx[18];
			attr(input_1, "autosave", /*autosave*/ ctx[19]);
			input_1.disabled = /*disabled*/ ctx[9];
			attr(input_1, "max", /*max*/ ctx[20]);
			attr(input_1, "maxlength", /*maxlength*/ ctx[23]);
			attr(input_1, "min", /*min*/ ctx[21]);
			attr(input_1, "minlength", /*minlength*/ ctx[24]);
			attr(input_1, "step", /*step*/ ctx[22]);
			input_1.multiple = /*multiple*/ ctx[25];
			input_1.readOnly = /*readonly*/ ctx[7];
			input_1.required = /*required*/ ctx[8];
			attr(input_1, "pattern", /*pattern*/ ctx[27]);

			attr(input_1, "validate", input_1_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined);

			attr(input_1, "data-validate", input_1_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(input_1, "data-validate-on-blur", input_1_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(input_1, "tabindex", /*tabindex*/ ctx[30]);

			attr(input_1, "data-error-message", input_1_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33]);

			attr(input_1, "class", /*inputClasses*/ ctx[47]);

			input_1.value = input_1_value_value = /*type*/ ctx[4] === "datepicker" || /*type*/ ctx[4] === "colorpicker" || /*type*/ ctx[4] === "file"
			? ""
			: /*inputValue*/ ctx[44];
		},
		m(target, anchor) {
			insert(target, input_1, anchor);
			/*input_1_binding*/ ctx[80](input_1);

			if (!mounted) {
				dispose = [
					listen(input_1, "focus", /*onFocus*/ ctx[53]),
					listen(input_1, "blur", /*onBlur*/ ctx[54]),
					listen(input_1, "input", /*onInput*/ ctx[52]),
					listen(input_1, "change", /*onChange*/ ctx[55])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*inputStyle*/ 67108864) {
				attr(input_1, "style", /*inputStyle*/ ctx[26]);
			}

			if (dirty[0] & /*name*/ 32) {
				attr(input_1, "name", /*name*/ ctx[5]);
			}

			if (dirty[1] & /*inputType*/ 128) {
				attr(input_1, "type", /*inputType*/ ctx[38]);
			}

			if (dirty[0] & /*inputmode*/ 64) {
				attr(input_1, "inputmode", /*inputmode*/ ctx[6]);
			}

			if (dirty[0] & /*placeholder*/ 1024) {
				attr(input_1, "placeholder", /*placeholder*/ ctx[10]);
			}

			if (dirty[0] & /*inputId*/ 2048) {
				attr(input_1, "id", /*inputId*/ ctx[11]);
			}

			if (dirty[0] & /*size*/ 4096) {
				attr(input_1, "size", /*size*/ ctx[12]);
			}

			if (dirty[0] & /*accept*/ 8192) {
				attr(input_1, "accept", /*accept*/ ctx[13]);
			}

			if (dirty[0] & /*autocomplete*/ 16384) {
				attr(input_1, "autocomplete", /*autocomplete*/ ctx[14]);
			}

			if (dirty[0] & /*autocorrect*/ 32768) {
				attr(input_1, "autocorrect", /*autocorrect*/ ctx[15]);
			}

			if (dirty[0] & /*autocapitalize*/ 65536) {
				attr(input_1, "autocapitalize", /*autocapitalize*/ ctx[16]);
			}

			if (dirty[0] & /*spellcheck*/ 131072) {
				attr(input_1, "spellcheck", /*spellcheck*/ ctx[17]);
			}

			if (dirty[0] & /*autofocus*/ 262144) {
				input_1.autofocus = /*autofocus*/ ctx[18];
			}

			if (dirty[0] & /*autosave*/ 524288) {
				attr(input_1, "autosave", /*autosave*/ ctx[19]);
			}

			if (dirty[0] & /*disabled*/ 512) {
				input_1.disabled = /*disabled*/ ctx[9];
			}

			if (dirty[0] & /*max*/ 1048576) {
				attr(input_1, "max", /*max*/ ctx[20]);
			}

			if (dirty[0] & /*maxlength*/ 8388608) {
				attr(input_1, "maxlength", /*maxlength*/ ctx[23]);
			}

			if (dirty[0] & /*min*/ 2097152) {
				attr(input_1, "min", /*min*/ ctx[21]);
			}

			if (dirty[0] & /*minlength*/ 16777216) {
				attr(input_1, "minlength", /*minlength*/ ctx[24]);
			}

			if (dirty[0] & /*step*/ 4194304) {
				attr(input_1, "step", /*step*/ ctx[22]);
			}

			if (dirty[0] & /*multiple*/ 33554432) {
				input_1.multiple = /*multiple*/ ctx[25];
			}

			if (dirty[0] & /*readonly*/ 128) {
				input_1.readOnly = /*readonly*/ ctx[7];
			}

			if (dirty[0] & /*required*/ 256) {
				input_1.required = /*required*/ ctx[8];
			}

			if (dirty[0] & /*pattern*/ 134217728) {
				attr(input_1, "pattern", /*pattern*/ ctx[27]);
			}

			if (dirty[0] & /*validate*/ 268435456 && input_1_validate_value !== (input_1_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined)) {
				attr(input_1, "validate", input_1_validate_value);
			}

			if (dirty[0] & /*validate, validateOnBlur*/ 805306368 && input_1_data_validate_value !== (input_1_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(input_1, "data-validate", input_1_data_validate_value);
			}

			if (dirty[0] & /*validateOnBlur*/ 536870912 && input_1_data_validate_on_blur_value !== (input_1_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(input_1, "data-validate-on-blur", input_1_data_validate_on_blur_value);
			}

			if (dirty[0] & /*tabindex*/ 1073741824) {
				attr(input_1, "tabindex", /*tabindex*/ ctx[30]);
			}

			if (dirty[1] & /*errorMessageForce, errorMessage*/ 12 && input_1_data_error_message_value !== (input_1_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33])) {
				attr(input_1, "data-error-message", input_1_data_error_message_value);
			}

			if (dirty[1] & /*inputClasses*/ 65536) {
				attr(input_1, "class", /*inputClasses*/ ctx[47]);
			}

			if (dirty[0] & /*type*/ 16 | dirty[1] & /*inputValue*/ 8192 && input_1_value_value !== (input_1_value_value = /*type*/ ctx[4] === "datepicker" || /*type*/ ctx[4] === "colorpicker" || /*type*/ ctx[4] === "file"
			? ""
			: /*inputValue*/ ctx[44]) && input_1.value !== input_1_value_value) {
				input_1.value = input_1_value_value;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input_1);
			/*input_1_binding*/ ctx[80](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (489:44) 
function create_if_block_8(ctx) {
	let texteditor;
	let current;

	const texteditor_spread_levels = [
		{
			value: typeof /*value*/ ctx[0] === "undefined"
			? ""
			: /*value*/ ctx[0]
		},
		{ resizable: /*resizable*/ ctx[31] },
		{ placeholder: /*placeholder*/ ctx[10] },
		{ onTextEditorFocus: /*onFocus*/ ctx[53] },
		{ onTextEditorBlur: /*onBlur*/ ctx[54] },
		{ onTextEditorInput: /*onInput*/ ctx[52] },
		{ onTextEditorChange: /*onChange*/ ctx[55] },
		/*textEditorParams*/ ctx[37]
	];

	let texteditor_props = {};

	for (let i = 0; i < texteditor_spread_levels.length; i += 1) {
		texteditor_props = assign(texteditor_props, texteditor_spread_levels[i]);
	}

	texteditor = new TextEditor({ props: texteditor_props });

	return {
		c() {
			create_component(texteditor.$$.fragment);
		},
		m(target, anchor) {
			mount_component(texteditor, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const texteditor_changes = (dirty[0] & /*value, placeholder*/ 1025 | dirty[1] & /*resizable, onFocus, onBlur, onInput, onChange, textEditorParams*/ 31457345)
			? get_spread_update(texteditor_spread_levels, [
					dirty[0] & /*value*/ 1 && {
						value: typeof /*value*/ ctx[0] === "undefined"
						? ""
						: /*value*/ ctx[0]
					},
					dirty[1] & /*resizable*/ 1 && { resizable: /*resizable*/ ctx[31] },
					dirty[0] & /*placeholder*/ 1024 && { placeholder: /*placeholder*/ ctx[10] },
					dirty[1] & /*onFocus*/ 4194304 && { onTextEditorFocus: /*onFocus*/ ctx[53] },
					dirty[1] & /*onBlur*/ 8388608 && { onTextEditorBlur: /*onBlur*/ ctx[54] },
					dirty[1] & /*onInput*/ 2097152 && { onTextEditorInput: /*onInput*/ ctx[52] },
					dirty[1] & /*onChange*/ 16777216 && { onTextEditorChange: /*onChange*/ ctx[55] },
					dirty[1] & /*textEditorParams*/ 64 && get_spread_object(/*textEditorParams*/ ctx[37])
				])
			: {};

			texteditor.$set(texteditor_changes);
		},
		i(local) {
			if (current) return;
			transition_in(texteditor.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(texteditor.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(texteditor, detaching);
		}
	};
}

// (444:42) 
function create_if_block_7(ctx) {
	let textarea;
	let textarea_validate_value;
	let textarea_data_validate_value;
	let textarea_data_validate_on_blur_value;
	let textarea_data_error_message_value;
	let mounted;
	let dispose;

	return {
		c() {
			textarea = element("textarea");
			attr(textarea, "style", /*inputStyle*/ ctx[26]);
			attr(textarea, "name", /*name*/ ctx[5]);
			attr(textarea, "placeholder", /*placeholder*/ ctx[10]);
			attr(textarea, "id", /*inputId*/ ctx[11]);
			attr(textarea, "size", /*size*/ ctx[12]);
			attr(textarea, "inputmode", /*inputmode*/ ctx[6]);
			attr(textarea, "accept", /*accept*/ ctx[13]);
			attr(textarea, "autocomplete", /*autocomplete*/ ctx[14]);
			attr(textarea, "autocorrect", /*autocorrect*/ ctx[15]);
			attr(textarea, "autocapitalize", /*autocapitalize*/ ctx[16]);
			attr(textarea, "spellcheck", /*spellcheck*/ ctx[17]);
			textarea.autofocus = /*autofocus*/ ctx[18];
			attr(textarea, "autosave", /*autosave*/ ctx[19]);
			textarea.disabled = /*disabled*/ ctx[9];
			attr(textarea, "max", /*max*/ ctx[20]);
			attr(textarea, "maxlength", /*maxlength*/ ctx[23]);
			attr(textarea, "min", /*min*/ ctx[21]);
			attr(textarea, "minlength", /*minlength*/ ctx[24]);
			attr(textarea, "step", /*step*/ ctx[22]);
			attr(textarea, "multiple", /*multiple*/ ctx[25]);
			textarea.readOnly = /*readonly*/ ctx[7];
			textarea.required = /*required*/ ctx[8];
			attr(textarea, "pattern", /*pattern*/ ctx[27]);

			attr(textarea, "validate", textarea_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined);

			attr(textarea, "data-validate", textarea_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(textarea, "data-validate-on-blur", textarea_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(textarea, "tabindex", /*tabindex*/ ctx[30]);

			attr(textarea, "data-error-message", textarea_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33]);

			attr(textarea, "class", /*inputClasses*/ ctx[47]);
			textarea.value = /*inputValue*/ ctx[44];
		},
		m(target, anchor) {
			insert(target, textarea, anchor);
			/*textarea_binding*/ ctx[79](textarea);

			if (!mounted) {
				dispose = [
					listen(textarea, "focus", /*onFocus*/ ctx[53]),
					listen(textarea, "blur", /*onBlur*/ ctx[54]),
					listen(textarea, "input", /*onInput*/ ctx[52]),
					listen(textarea, "change", /*onChange*/ ctx[55])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*inputStyle*/ 67108864) {
				attr(textarea, "style", /*inputStyle*/ ctx[26]);
			}

			if (dirty[0] & /*name*/ 32) {
				attr(textarea, "name", /*name*/ ctx[5]);
			}

			if (dirty[0] & /*placeholder*/ 1024) {
				attr(textarea, "placeholder", /*placeholder*/ ctx[10]);
			}

			if (dirty[0] & /*inputId*/ 2048) {
				attr(textarea, "id", /*inputId*/ ctx[11]);
			}

			if (dirty[0] & /*size*/ 4096) {
				attr(textarea, "size", /*size*/ ctx[12]);
			}

			if (dirty[0] & /*inputmode*/ 64) {
				attr(textarea, "inputmode", /*inputmode*/ ctx[6]);
			}

			if (dirty[0] & /*accept*/ 8192) {
				attr(textarea, "accept", /*accept*/ ctx[13]);
			}

			if (dirty[0] & /*autocomplete*/ 16384) {
				attr(textarea, "autocomplete", /*autocomplete*/ ctx[14]);
			}

			if (dirty[0] & /*autocorrect*/ 32768) {
				attr(textarea, "autocorrect", /*autocorrect*/ ctx[15]);
			}

			if (dirty[0] & /*autocapitalize*/ 65536) {
				attr(textarea, "autocapitalize", /*autocapitalize*/ ctx[16]);
			}

			if (dirty[0] & /*spellcheck*/ 131072) {
				attr(textarea, "spellcheck", /*spellcheck*/ ctx[17]);
			}

			if (dirty[0] & /*autofocus*/ 262144) {
				textarea.autofocus = /*autofocus*/ ctx[18];
			}

			if (dirty[0] & /*autosave*/ 524288) {
				attr(textarea, "autosave", /*autosave*/ ctx[19]);
			}

			if (dirty[0] & /*disabled*/ 512) {
				textarea.disabled = /*disabled*/ ctx[9];
			}

			if (dirty[0] & /*max*/ 1048576) {
				attr(textarea, "max", /*max*/ ctx[20]);
			}

			if (dirty[0] & /*maxlength*/ 8388608) {
				attr(textarea, "maxlength", /*maxlength*/ ctx[23]);
			}

			if (dirty[0] & /*min*/ 2097152) {
				attr(textarea, "min", /*min*/ ctx[21]);
			}

			if (dirty[0] & /*minlength*/ 16777216) {
				attr(textarea, "minlength", /*minlength*/ ctx[24]);
			}

			if (dirty[0] & /*step*/ 4194304) {
				attr(textarea, "step", /*step*/ ctx[22]);
			}

			if (dirty[0] & /*multiple*/ 33554432) {
				attr(textarea, "multiple", /*multiple*/ ctx[25]);
			}

			if (dirty[0] & /*readonly*/ 128) {
				textarea.readOnly = /*readonly*/ ctx[7];
			}

			if (dirty[0] & /*required*/ 256) {
				textarea.required = /*required*/ ctx[8];
			}

			if (dirty[0] & /*pattern*/ 134217728) {
				attr(textarea, "pattern", /*pattern*/ ctx[27]);
			}

			if (dirty[0] & /*validate*/ 268435456 && textarea_validate_value !== (textarea_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined)) {
				attr(textarea, "validate", textarea_validate_value);
			}

			if (dirty[0] & /*validate, validateOnBlur*/ 805306368 && textarea_data_validate_value !== (textarea_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(textarea, "data-validate", textarea_data_validate_value);
			}

			if (dirty[0] & /*validateOnBlur*/ 536870912 && textarea_data_validate_on_blur_value !== (textarea_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(textarea, "data-validate-on-blur", textarea_data_validate_on_blur_value);
			}

			if (dirty[0] & /*tabindex*/ 1073741824) {
				attr(textarea, "tabindex", /*tabindex*/ ctx[30]);
			}

			if (dirty[1] & /*errorMessageForce, errorMessage*/ 12 && textarea_data_error_message_value !== (textarea_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33])) {
				attr(textarea, "data-error-message", textarea_data_error_message_value);
			}

			if (dirty[1] & /*inputClasses*/ 65536) {
				attr(textarea, "class", /*inputClasses*/ ctx[47]);
			}

			if (dirty[1] & /*inputValue*/ 8192) {
				textarea.value = /*inputValue*/ ctx[44];
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(textarea);
			/*textarea_binding*/ ctx[79](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (398:12) {#if type === 'select'}
function create_if_block_6(ctx) {
	let select;
	let select_validate_value;
	let select_data_validate_value;
	let select_data_validate_on_blur_value;
	let select_data_error_message_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[77].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[76], null);

	return {
		c() {
			select = element("select");
			if (default_slot) default_slot.c();
			attr(select, "style", /*inputStyle*/ ctx[26]);
			attr(select, "name", /*name*/ ctx[5]);
			attr(select, "placeholder", /*placeholder*/ ctx[10]);
			attr(select, "id", /*inputId*/ ctx[11]);
			attr(select, "size", /*size*/ ctx[12]);
			attr(select, "accept", /*accept*/ ctx[13]);
			attr(select, "autocomplete", /*autocomplete*/ ctx[14]);
			attr(select, "autocorrect", /*autocorrect*/ ctx[15]);
			attr(select, "autocapitalize", /*autocapitalize*/ ctx[16]);
			attr(select, "spellcheck", /*spellcheck*/ ctx[17]);
			select.autofocus = /*autofocus*/ ctx[18];
			attr(select, "autosave", /*autosave*/ ctx[19]);
			select.disabled = /*disabled*/ ctx[9];
			attr(select, "max", /*max*/ ctx[20]);
			attr(select, "maxlength", /*maxlength*/ ctx[23]);
			attr(select, "min", /*min*/ ctx[21]);
			attr(select, "minlength", /*minlength*/ ctx[24]);
			attr(select, "step", /*step*/ ctx[22]);
			select.multiple = /*multiple*/ ctx[25];
			attr(select, "readonly", /*readonly*/ ctx[7]);
			select.required = /*required*/ ctx[8];
			attr(select, "pattern", /*pattern*/ ctx[27]);

			attr(select, "validate", select_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined);

			attr(select, "data-validate", select_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(select, "data-validate-on-blur", select_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined);

			attr(select, "tabindex", /*tabindex*/ ctx[30]);

			attr(select, "data-error-message", select_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33]);

			attr(select, "class", /*inputClasses*/ ctx[47]);
		},
		m(target, anchor) {
			insert(target, select, anchor);

			if (default_slot) {
				default_slot.m(select, null);
			}

			select_option(select, /*inputValue*/ ctx[44]);
			/*select_binding*/ ctx[78](select);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "focus", /*onFocus*/ ctx[53]),
					listen(select, "blur", /*onBlur*/ ctx[54]),
					listen(select, "input", /*onInput*/ ctx[52]),
					listen(select, "change", /*onChange*/ ctx[55])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[76], dirty, null, null);
				}
			}

			if (!current || dirty[0] & /*inputStyle*/ 67108864) {
				attr(select, "style", /*inputStyle*/ ctx[26]);
			}

			if (!current || dirty[0] & /*name*/ 32) {
				attr(select, "name", /*name*/ ctx[5]);
			}

			if (!current || dirty[0] & /*placeholder*/ 1024) {
				attr(select, "placeholder", /*placeholder*/ ctx[10]);
			}

			if (!current || dirty[0] & /*inputId*/ 2048) {
				attr(select, "id", /*inputId*/ ctx[11]);
			}

			if (!current || dirty[0] & /*size*/ 4096) {
				attr(select, "size", /*size*/ ctx[12]);
			}

			if (!current || dirty[0] & /*accept*/ 8192) {
				attr(select, "accept", /*accept*/ ctx[13]);
			}

			if (!current || dirty[0] & /*autocomplete*/ 16384) {
				attr(select, "autocomplete", /*autocomplete*/ ctx[14]);
			}

			if (!current || dirty[0] & /*autocorrect*/ 32768) {
				attr(select, "autocorrect", /*autocorrect*/ ctx[15]);
			}

			if (!current || dirty[0] & /*autocapitalize*/ 65536) {
				attr(select, "autocapitalize", /*autocapitalize*/ ctx[16]);
			}

			if (!current || dirty[0] & /*spellcheck*/ 131072) {
				attr(select, "spellcheck", /*spellcheck*/ ctx[17]);
			}

			if (!current || dirty[0] & /*autofocus*/ 262144) {
				select.autofocus = /*autofocus*/ ctx[18];
			}

			if (!current || dirty[0] & /*autosave*/ 524288) {
				attr(select, "autosave", /*autosave*/ ctx[19]);
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				select.disabled = /*disabled*/ ctx[9];
			}

			if (!current || dirty[0] & /*max*/ 1048576) {
				attr(select, "max", /*max*/ ctx[20]);
			}

			if (!current || dirty[0] & /*maxlength*/ 8388608) {
				attr(select, "maxlength", /*maxlength*/ ctx[23]);
			}

			if (!current || dirty[0] & /*min*/ 2097152) {
				attr(select, "min", /*min*/ ctx[21]);
			}

			if (!current || dirty[0] & /*minlength*/ 16777216) {
				attr(select, "minlength", /*minlength*/ ctx[24]);
			}

			if (!current || dirty[0] & /*step*/ 4194304) {
				attr(select, "step", /*step*/ ctx[22]);
			}

			if (!current || dirty[0] & /*multiple*/ 33554432) {
				select.multiple = /*multiple*/ ctx[25];
			}

			if (!current || dirty[0] & /*readonly*/ 128) {
				attr(select, "readonly", /*readonly*/ ctx[7]);
			}

			if (!current || dirty[0] & /*required*/ 256) {
				select.required = /*required*/ ctx[8];
			}

			if (!current || dirty[0] & /*pattern*/ 134217728) {
				attr(select, "pattern", /*pattern*/ ctx[27]);
			}

			if (!current || dirty[0] & /*validate*/ 268435456 && select_validate_value !== (select_validate_value = typeof /*validate*/ ctx[28] === "string" && /*validate*/ ctx[28].length
			? /*validate*/ ctx[28]
			: undefined)) {
				attr(select, "validate", select_validate_value);
			}

			if (!current || dirty[0] & /*validate, validateOnBlur*/ 805306368 && select_data_validate_value !== (select_data_validate_value = /*validate*/ ctx[28] === true || /*validate*/ ctx[28] === "" || /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(select, "data-validate", select_data_validate_value);
			}

			if (!current || dirty[0] & /*validateOnBlur*/ 536870912 && select_data_validate_on_blur_value !== (select_data_validate_on_blur_value = /*validateOnBlur*/ ctx[29] === true || /*validateOnBlur*/ ctx[29] === ""
			? true
			: undefined)) {
				attr(select, "data-validate-on-blur", select_data_validate_on_blur_value);
			}

			if (!current || dirty[0] & /*tabindex*/ 1073741824) {
				attr(select, "tabindex", /*tabindex*/ ctx[30]);
			}

			if (!current || dirty[1] & /*errorMessageForce, errorMessage*/ 12 && select_data_error_message_value !== (select_data_error_message_value = /*errorMessageForce*/ ctx[34]
			? undefined
			: /*errorMessage*/ ctx[33])) {
				attr(select, "data-error-message", select_data_error_message_value);
			}

			if (!current || dirty[1] & /*inputClasses*/ 65536) {
				attr(select, "class", /*inputClasses*/ ctx[47]);
			}

			if (!current || dirty[1] & /*inputValue*/ 8192) {
				select_option(select, /*inputValue*/ ctx[44]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(select);
			if (default_slot) default_slot.d(detaching);
			/*select_binding*/ ctx[78](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (551:10) {#if hasErrorMessage && errorMessageForce}
function create_if_block_4(ctx) {
	let div;
	let t0_value = plainText(/*errorMessage*/ ctx[33]) + "";
	let t0;
	let t1;
	let current;
	const error_message_slot_template = /*#slots*/ ctx[77]["error-message"];
	const error_message_slot = create_slot(error_message_slot_template, ctx, /*$$scope*/ ctx[76], get_error_message_slot_context);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (error_message_slot) error_message_slot.c();
			attr(div, "class", "item-input-error-message");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (error_message_slot) {
				error_message_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[1] & /*errorMessage*/ 4) && t0_value !== (t0_value = plainText(/*errorMessage*/ ctx[33]) + "")) set_data(t0, t0_value);

			if (error_message_slot) {
				if (error_message_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(error_message_slot, error_message_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_error_message_slot_changes, get_error_message_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(error_message_slot, local);
			current = true;
		},
		o(local) {
			transition_out(error_message_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (error_message_slot) error_message_slot.d(detaching);
		}
	};
}

// (557:10) {#if clearButton}
function create_if_block_3(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			attr(span, "class", "input-clear-button");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (558:10) {#if typeof info !== 'undefined' || hasInfoSlots}
function create_if_block_2(ctx) {
	let div;
	let t0_value = plainText(/*info*/ ctx[35]) + "";
	let t0;
	let t1;
	let current;
	const info_slot_template = /*#slots*/ ctx[77].info;
	const info_slot = create_slot(info_slot_template, ctx, /*$$scope*/ ctx[76], get_info_slot_context);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (info_slot) info_slot.c();
			attr(div, "class", "item-input-info");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (info_slot) {
				info_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[1] & /*info*/ 16) && t0_value !== (t0_value = plainText(/*info*/ ctx[35]) + "")) set_data(t0, t0_value);

			if (info_slot) {
				if (info_slot.p && (!current || dirty[2] & /*$$scope*/ 16384)) {
					update_slot(info_slot, info_slot_template, ctx, /*$$scope*/ ctx[76], dirty, get_info_slot_changes, get_info_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(info_slot, local);
			current = true;
		},
		o(local) {
			transition_out(info_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (info_slot) info_slot.d(detaching);
		}
	};
}

// (571:4) {#if isSortable && !isSortableOpposite}
function create_if_block_1(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "sortable-handler");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*wrap*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, [-1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let isSortable;
	let isSortableOpposite;
	let inputType;
	let needsValue;
	let inputValue;
	let hasInfoSlots;
	let hasErrorSlots;
	let hasMediaSlots;
	let hasLabelSlots;
	let hasErrorMessage;
	let inputClasses;
	let itemContentClasses;
	let labelClasses;
	let inputWrapClasses;
	let classes;

	const omit_props_names = [
		"class","sortable","sortableOpposite","media","dropdown","wrap","input","type","name","value","inputmode","readonly","required","disabled","placeholder","inputId","size","accept","autocomplete","autocorrect","autocapitalize","spellcheck","autofocus","autosave","max","min","step","maxlength","minlength","multiple","inputStyle","pattern","validate","validateOnBlur","onValidate","tabindex","resizable","clearButton","noFormStoreData","noStoreData","ignoreStoreData","errorMessage","errorMessageForce","info","outline","label","inlineLabel","floatingLabel","calendarParams","colorPickerParams","textEditorParams","calendarInstance","colorPickerInstance"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { sortable = undefined } = $$props;
	let { sortableOpposite = undefined } = $$props;
	let { media = undefined } = $$props;
	let { dropdown = "auto" } = $$props;
	let { wrap = true } = $$props;
	let { input = true } = $$props;
	let { type = "text" } = $$props;
	let { name = undefined } = $$props;
	let { value = undefined } = $$props;
	let { inputmode = undefined } = $$props;
	let { readonly = undefined } = $$props;
	let { required = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { placeholder = undefined } = $$props;
	let { inputId = undefined } = $$props;
	let { size = undefined } = $$props;
	let { accept = undefined } = $$props;
	let { autocomplete = undefined } = $$props;
	let { autocorrect = undefined } = $$props;
	let { autocapitalize = undefined } = $$props;
	let { spellcheck = undefined } = $$props;
	let { autofocus = undefined } = $$props;
	let { autosave = undefined } = $$props;
	let { max = undefined } = $$props;
	let { min = undefined } = $$props;
	let { step = undefined } = $$props;
	let { maxlength = undefined } = $$props;
	let { minlength = undefined } = $$props;
	let { multiple = undefined } = $$props;
	let { inputStyle = undefined } = $$props;
	let { pattern = undefined } = $$props;
	let { validate = undefined } = $$props;
	let { validateOnBlur = undefined } = $$props;
	let { onValidate = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { resizable = undefined } = $$props;
	let { clearButton = undefined } = $$props;
	let { noFormStoreData = undefined } = $$props;
	let { noStoreData = undefined } = $$props;
	let { ignoreStoreData = undefined } = $$props;
	let { errorMessage = undefined } = $$props;
	let { errorMessageForce = undefined } = $$props;
	let { info = undefined } = $$props;
	let { outline = undefined } = $$props;
	let { label = undefined } = $$props;
	let { inlineLabel = undefined } = $$props;
	let { floatingLabel = undefined } = $$props;
	let { calendarParams = undefined } = $$props;
	let { colorPickerParams = undefined } = $$props;
	let { textEditorParams = undefined } = $$props;

	// State
	let inputEl;

	let inputFocused = false;
	let inputInvalid = false;
	let updateInputOnDidUpdate = false;
	let f7Calendar;
	let f7ColorPicker;

	function calendarInstance() {
		return f7Calendar;
	}

	function colorPickerInstance() {
		return f7ColorPicker;
	}

	let ListContext = getReactiveContext("ListContext", newValue => {
		$$invalidate(74, ListContext = newValue || {});
	}) || {};

	function domValue() {
		if (!inputEl) return undefined;
		return inputEl.value;
	}

	function inputHasValue() {
		if (type === "datepicker" && Array.isArray(value) && value.length === 0) {
			return false;
		}

		const domV = domValue();

		return typeof value === "undefined"
		? domV || domV === 0
		: value || value === 0;
	}

	function validateInput() {
		if (!app.f7 || !inputEl) return;
		const validity = inputEl.validity;
		if (!validity) return;

		if (!validity.valid) {
			if (onValidate) onValidate(false);

			if (inputInvalid !== true) {
				$$invalidate(73, inputInvalid = true);
			}
		} else {
			if (onValidate) onValidate(true);

			if (inputInvalid !== false) {
				$$invalidate(73, inputInvalid = false);
			}
		}
	}

	let initialWatched = false;

	function watchValue() {
		if (!initialWatched) {
			initialWatched = true;
			return;
		}

		if (type === "range" || type === "toggle") return;
		if (!app.f7) return;
		updateInputOnDidUpdate = true;

		if (f7Calendar) {
			f7Calendar.setValue(value);
		}

		if (f7ColorPicker) {
			f7ColorPicker.setValue(value);
		}
	}

	function watchColorPickerParams() {
		if (!app.f7 || !f7ColorPicker) return;
		extend(f7ColorPicker.params, colorPickerParams || {});
	}

	function watchCalendarParams() {
		if (!app.f7 || !f7Calendar) return;
		extend(f7Calendar.params, calendarParams || {});
	}

	function onTextareaResize(event) {
		emit("textareaResize", [event]);
	}

	function onInputNotEmpty(event) {
		emit("inputNotEmpty", [event]);
	}

	function onInputEmpty(event) {
		emit("inputEmpty", [event]);
	}

	function onInputClear(event) {
		emit("inputClear", [event]);
	}

	function onInput(...args) {
		emit("input", [...args]);

		if (!(validateOnBlur || validateOnBlur === "") && (validate || validate === "") && inputEl) {
			validateInput(inputEl);
		}

		if (inputEl && type !== "texteditor" && type !== "colorpicker" && type !== "datepicker") {
			$$invalidate(0, value = inputEl.value);
		}
	}

	function onFocus(...args) {
		emit("focus", [...args]);
		$$invalidate(72, inputFocused = true);
	}

	function onBlur(...args) {
		emit("blur", [...args]);

		if ((validate || validate === "" || validateOnBlur || validateOnBlur === "") && inputEl) {
			validateInput();
		}

		$$invalidate(72, inputFocused = false);
	}

	function onChange(...args) {
		emit("change", [...args]);

		if (type === "texteditor") {
			emit("textEditorChange", [args[0]]);
			$$invalidate(0, value = args[1]);
		}
	}

	onMount(() => {
		f7ready(() => {
			if (type === "range" || type === "toggle") return;
			if (!inputEl) return;
			inputEl.addEventListener("input:notempty", onInputNotEmpty, false);

			if (type === "textarea" && resizable) {
				inputEl.addEventListener("textarea:resize", onTextareaResize, false);
			}

			if (clearButton) {
				inputEl.addEventListener("input:empty", onInputEmpty, false);
				inputEl.addEventListener("input:clear", onInputClear, false);
			}

			if (type === "datepicker") {
				f7Calendar = app.f7.calendar.create({
					inputEl,
					value,
					on: {
						change(calendar, calendarValue) {
							emit("calendarChange", [calendarValue]);
							$$invalidate(0, value = calendarValue);
						}
					},
					...calendarParams || {}
				});
			}

			if (type === "colorpicker") {
				f7ColorPicker = app.f7.colorPicker.create({
					inputEl,
					value,
					on: {
						change(colorPicker, colorPickerValue) {
							emit("colorPickerChange", [colorPickerValue]);
							$$invalidate(0, value = colorPickerValue);
						}
					},
					...colorPickerParams || {}
				});
			}

			app.f7.input.checkEmptyState(inputEl);

			if (!(validateOnBlur || validateOnBlur === "") && (validate || validate === "") && typeof value !== "undefined" && value !== null && value !== "") {
				setTimeout(
					() => {
						validateInput();
					},
					0
				);
			}

			if (resizable) {
				app.f7.input.resizeTextarea(inputEl);
			}
		});
	});

	afterUpdate(() => {
		if (!app.f7) return;

		if (updateInputOnDidUpdate) {
			if (!inputEl) return;
			updateInputOnDidUpdate = false;
			app.f7.input.checkEmptyState(inputEl);

			if (validate && !validateOnBlur) {
				validateInput();
			}

			if (resizable) {
				app.f7.input.resizeTextarea(inputEl);
			}
		}
	});

	onDestroy(() => {
		if (type === "range" || type === "toggle") return;
		if (!inputEl) return;
		inputEl.removeEventListener("input:notempty", onInputNotEmpty, false);

		if (type === "textarea" && resizable) {
			inputEl.removeEventListener("textarea:resize", onTextareaResize, false);
		}

		if (clearButton) {
			inputEl.removeEventListener("input:empty", onInputEmpty, false);
			inputEl.removeEventListener("input:clear", onInputClear, false);
		}

		if (f7Calendar && f7Calendar.destroy) {
			f7Calendar.destroy();
		}

		if (f7ColorPicker && f7ColorPicker.destroy) {
			f7ColorPicker.destroy();
		}

		f7Calendar = null;
		f7ColorPicker = null;
	});

	function select_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(41, inputEl);
		});
	}

	function textarea_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(41, inputEl);
		});
	}

	function input_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(41, inputEl);
		});
	}

	function select_binding_1($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(41, inputEl);
		});
	}

	function textarea_binding_1($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(41, inputEl);
		});
	}

	function input_1_binding_1($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(41, inputEl);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(100, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(56, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(57, className = $$new_props.class);
		if ("sortable" in $$new_props) $$invalidate(58, sortable = $$new_props.sortable);
		if ("sortableOpposite" in $$new_props) $$invalidate(59, sortableOpposite = $$new_props.sortableOpposite);
		if ("media" in $$new_props) $$invalidate(1, media = $$new_props.media);
		if ("dropdown" in $$new_props) $$invalidate(60, dropdown = $$new_props.dropdown);
		if ("wrap" in $$new_props) $$invalidate(2, wrap = $$new_props.wrap);
		if ("input" in $$new_props) $$invalidate(3, input = $$new_props.input);
		if ("type" in $$new_props) $$invalidate(4, type = $$new_props.type);
		if ("name" in $$new_props) $$invalidate(5, name = $$new_props.name);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("inputmode" in $$new_props) $$invalidate(6, inputmode = $$new_props.inputmode);
		if ("readonly" in $$new_props) $$invalidate(7, readonly = $$new_props.readonly);
		if ("required" in $$new_props) $$invalidate(8, required = $$new_props.required);
		if ("disabled" in $$new_props) $$invalidate(9, disabled = $$new_props.disabled);
		if ("placeholder" in $$new_props) $$invalidate(10, placeholder = $$new_props.placeholder);
		if ("inputId" in $$new_props) $$invalidate(11, inputId = $$new_props.inputId);
		if ("size" in $$new_props) $$invalidate(12, size = $$new_props.size);
		if ("accept" in $$new_props) $$invalidate(13, accept = $$new_props.accept);
		if ("autocomplete" in $$new_props) $$invalidate(14, autocomplete = $$new_props.autocomplete);
		if ("autocorrect" in $$new_props) $$invalidate(15, autocorrect = $$new_props.autocorrect);
		if ("autocapitalize" in $$new_props) $$invalidate(16, autocapitalize = $$new_props.autocapitalize);
		if ("spellcheck" in $$new_props) $$invalidate(17, spellcheck = $$new_props.spellcheck);
		if ("autofocus" in $$new_props) $$invalidate(18, autofocus = $$new_props.autofocus);
		if ("autosave" in $$new_props) $$invalidate(19, autosave = $$new_props.autosave);
		if ("max" in $$new_props) $$invalidate(20, max = $$new_props.max);
		if ("min" in $$new_props) $$invalidate(21, min = $$new_props.min);
		if ("step" in $$new_props) $$invalidate(22, step = $$new_props.step);
		if ("maxlength" in $$new_props) $$invalidate(23, maxlength = $$new_props.maxlength);
		if ("minlength" in $$new_props) $$invalidate(24, minlength = $$new_props.minlength);
		if ("multiple" in $$new_props) $$invalidate(25, multiple = $$new_props.multiple);
		if ("inputStyle" in $$new_props) $$invalidate(26, inputStyle = $$new_props.inputStyle);
		if ("pattern" in $$new_props) $$invalidate(27, pattern = $$new_props.pattern);
		if ("validate" in $$new_props) $$invalidate(28, validate = $$new_props.validate);
		if ("validateOnBlur" in $$new_props) $$invalidate(29, validateOnBlur = $$new_props.validateOnBlur);
		if ("onValidate" in $$new_props) $$invalidate(61, onValidate = $$new_props.onValidate);
		if ("tabindex" in $$new_props) $$invalidate(30, tabindex = $$new_props.tabindex);
		if ("resizable" in $$new_props) $$invalidate(31, resizable = $$new_props.resizable);
		if ("clearButton" in $$new_props) $$invalidate(32, clearButton = $$new_props.clearButton);
		if ("noFormStoreData" in $$new_props) $$invalidate(62, noFormStoreData = $$new_props.noFormStoreData);
		if ("noStoreData" in $$new_props) $$invalidate(63, noStoreData = $$new_props.noStoreData);
		if ("ignoreStoreData" in $$new_props) $$invalidate(64, ignoreStoreData = $$new_props.ignoreStoreData);
		if ("errorMessage" in $$new_props) $$invalidate(33, errorMessage = $$new_props.errorMessage);
		if ("errorMessageForce" in $$new_props) $$invalidate(34, errorMessageForce = $$new_props.errorMessageForce);
		if ("info" in $$new_props) $$invalidate(35, info = $$new_props.info);
		if ("outline" in $$new_props) $$invalidate(65, outline = $$new_props.outline);
		if ("label" in $$new_props) $$invalidate(36, label = $$new_props.label);
		if ("inlineLabel" in $$new_props) $$invalidate(66, inlineLabel = $$new_props.inlineLabel);
		if ("floatingLabel" in $$new_props) $$invalidate(67, floatingLabel = $$new_props.floatingLabel);
		if ("calendarParams" in $$new_props) $$invalidate(68, calendarParams = $$new_props.calendarParams);
		if ("colorPickerParams" in $$new_props) $$invalidate(69, colorPickerParams = $$new_props.colorPickerParams);
		if ("textEditorParams" in $$new_props) $$invalidate(37, textEditorParams = $$new_props.textEditorParams);
		if ("$$scope" in $$new_props) $$invalidate(76, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[1] & /*sortable*/ 134217728 | $$self.$$.dirty[2] & /*ListContext*/ 4096) {
			$: $$invalidate(42, isSortable = sortable === true || sortable === false
			? sortable
			: ListContext.listIsSortable);
		}

		if ($$self.$$.dirty[1] & /*sortableOpposite*/ 268435456 | $$self.$$.dirty[2] & /*ListContext*/ 4096) {
			$: $$invalidate(43, isSortableOpposite = sortableOpposite || ListContext.listIsSortableOpposite);
		}

		if ($$self.$$.dirty[0] & /*value*/ 1) {
			$: watchValue(value);
		}

		if ($$self.$$.dirty[2] & /*colorPickerParams*/ 128) {
			$: watchColorPickerParams(colorPickerParams);
		}

		if ($$self.$$.dirty[2] & /*calendarParams*/ 64) {
			$: watchCalendarParams(calendarParams);
		}

		if ($$self.$$.dirty[0] & /*type*/ 16) {
			$: $$invalidate(38, inputType = type === "datepicker" || type === "colorpicker"
			? "text"
			: type);
		}

		if ($$self.$$.dirty[0] & /*type*/ 16) {
			$: needsValue = type !== "file" && type !== "datepicker" && type !== "colorpicker";
		}

		if ($$self.$$.dirty[0] & /*value*/ 1) {
			$: $$invalidate(44, inputValue = (() => {
				let v;

				if (typeof value !== "undefined") {
					v = value;
				} else {
					v = domValue();
				}

				if (typeof v === "undefined" || v === null) return "";
				return v;
			})());
		}

		if ($$self.$$.dirty[1] & /*errorMessage*/ 4 | $$self.$$.dirty[2] & /*hasErrorSlots*/ 8192) {
			$: $$invalidate(40, hasErrorMessage = !!errorMessage || hasErrorSlots);
		}

		if ($$self.$$.dirty[1] & /*inputType, resizable, errorMessage, errorMessageForce*/ 141 | $$self.$$.dirty[2] & /*noFormStoreData, noStoreData, ignoreStoreData, inputInvalid, inputFocused*/ 3079) {
			$: $$invalidate(47, inputClasses = classNames({
				resizable: inputType === "textarea" && resizable,
				"no-store-data": noFormStoreData || noStoreData || ignoreStoreData,
				"input-invalid": errorMessage && errorMessageForce || inputInvalid,
				"input-with-value": inputHasValue(),
				"input-focused": inputFocused
			}));
		}

		$: $$invalidate(48, itemContentClasses = classNames("item-content item-input", !wrap && className, !wrap && { disabled }, !wrap && colorClasses($$props), {
			"inline-label": inlineLabel,
			"item-input-outline": outline,
			"item-input-focused": inputFocused,
			"item-input-with-info": !!info || hasInfoSlots,
			"item-input-with-value": inputHasValue(),
			"item-input-with-error-message": hasErrorMessage && errorMessageForce || inputInvalid,
			"item-input-invalid": hasErrorMessage && errorMessageForce || inputInvalid
		}));

		if ($$self.$$.dirty[2] & /*floatingLabel*/ 32) {
			$: $$invalidate(49, labelClasses = classNames("item-title item-label", { "item-floating-label": floatingLabel }));
		}

		if ($$self.$$.dirty[0] & /*type*/ 16 | $$self.$$.dirty[1] & /*dropdown*/ 536870912) {
			$: $$invalidate(50, inputWrapClasses = classNames("item-input-wrap", {
				"input-dropdown": dropdown === "auto" ? type === "select" : dropdown
			}));
		}

		$: $$invalidate(51, classes = classNames(className, { disabled }, colorClasses($$props)));
	};

	$: $$invalidate(39, hasInfoSlots = $$slots.info);
	$: $$invalidate(75, hasErrorSlots = $$slots["error-message"]);
	$: $$invalidate(45, hasMediaSlots = $$slots.media);
	$: $$invalidate(46, hasLabelSlots = $$slots.label);
	$$props = exclude_internal_props($$props);

	return [
		value,
		media,
		wrap,
		input,
		type,
		name,
		inputmode,
		readonly,
		required,
		disabled,
		placeholder,
		inputId,
		size,
		accept,
		autocomplete,
		autocorrect,
		autocapitalize,
		spellcheck,
		autofocus,
		autosave,
		max,
		min,
		step,
		maxlength,
		minlength,
		multiple,
		inputStyle,
		pattern,
		validate,
		validateOnBlur,
		tabindex,
		resizable,
		clearButton,
		errorMessage,
		errorMessageForce,
		info,
		label,
		textEditorParams,
		inputType,
		hasInfoSlots,
		hasErrorMessage,
		inputEl,
		isSortable,
		isSortableOpposite,
		inputValue,
		hasMediaSlots,
		hasLabelSlots,
		inputClasses,
		itemContentClasses,
		labelClasses,
		inputWrapClasses,
		classes,
		onInput,
		onFocus,
		onBlur,
		onChange,
		$$restProps,
		className,
		sortable,
		sortableOpposite,
		dropdown,
		onValidate,
		noFormStoreData,
		noStoreData,
		ignoreStoreData,
		outline,
		inlineLabel,
		floatingLabel,
		calendarParams,
		colorPickerParams,
		calendarInstance,
		colorPickerInstance,
		inputFocused,
		inputInvalid,
		ListContext,
		hasErrorSlots,
		$$scope,
		slots,
		select_binding,
		textarea_binding,
		input_1_binding,
		select_binding_1,
		textarea_binding_1,
		input_1_binding_1
	];
}

class List_input extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				class: 57,
				sortable: 58,
				sortableOpposite: 59,
				media: 1,
				dropdown: 60,
				wrap: 2,
				input: 3,
				type: 4,
				name: 5,
				value: 0,
				inputmode: 6,
				readonly: 7,
				required: 8,
				disabled: 9,
				placeholder: 10,
				inputId: 11,
				size: 12,
				accept: 13,
				autocomplete: 14,
				autocorrect: 15,
				autocapitalize: 16,
				spellcheck: 17,
				autofocus: 18,
				autosave: 19,
				max: 20,
				min: 21,
				step: 22,
				maxlength: 23,
				minlength: 24,
				multiple: 25,
				inputStyle: 26,
				pattern: 27,
				validate: 28,
				validateOnBlur: 29,
				onValidate: 61,
				tabindex: 30,
				resizable: 31,
				clearButton: 32,
				noFormStoreData: 62,
				noStoreData: 63,
				ignoreStoreData: 64,
				errorMessage: 33,
				errorMessageForce: 34,
				info: 35,
				outline: 65,
				label: 36,
				inlineLabel: 66,
				floatingLabel: 67,
				calendarParams: 68,
				colorPickerParams: 69,
				textEditorParams: 37,
				calendarInstance: 70,
				colorPickerInstance: 71
			},
			[-1, -1, -1, -1]
		);
	}

	get calendarInstance() {
		return this.$$.ctx[70];
	}

	get colorPickerInstance() {
		return this.$$.ctx[71];
	}
}

export default List_input;