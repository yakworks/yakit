/* progressbar.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	compute_rest_props,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	noop,
	safe_not_equal,
	set_attributes
} from "svelte/internal";

import { colorClasses } from "../shared/mixins";
import { classNames } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app } from "../shared/f7";

function create_fragment(ctx) {
	let span1;
	let span0;

	let span1_levels = [
		{ class: /*classes*/ ctx[2] },
		{ "data-progress": /*progress*/ ctx[0] },
		restProps(/*$$restProps*/ ctx[4])
	];

	let span1_data = {};

	for (let i = 0; i < span1_levels.length; i += 1) {
		span1_data = assign(span1_data, span1_levels[i]);
	}

	return {
		c() {
			span1 = element("span");
			span0 = element("span");
			attr(span0, "style", /*transformStyle*/ ctx[3]);
			set_attributes(span1, span1_data);
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, span0);
			/*span1_binding*/ ctx[8](span1);
		},
		p(ctx, [dirty]) {
			if (dirty & /*transformStyle*/ 8) {
				attr(span0, "style", /*transformStyle*/ ctx[3]);
			}

			set_attributes(span1, span1_data = get_spread_update(span1_levels, [
				dirty & /*classes*/ 4 && { class: /*classes*/ ctx[2] },
				dirty & /*progress*/ 1 && { "data-progress": /*progress*/ ctx[0] },
				dirty & /*$$restProps*/ 16 && restProps(/*$$restProps*/ ctx[4])
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(span1);
			/*span1_binding*/ ctx[8](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;
	let transformStyle;
	const omit_props_names = ["class","progress","infinite","set"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { class: className = undefined } = $$props;
	let { progress = 0 } = $$props;
	let { infinite = false } = $$props;
	let el;

	function set(progress, speed) {
		if (!app.f7) return;
		app.f7.progressbar.set(el, progress, speed);
	}

	function span1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(1, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ("progress" in $$new_props) $$invalidate(0, progress = $$new_props.progress);
		if ("infinite" in $$new_props) $$invalidate(6, infinite = $$new_props.infinite);
	};

	$$self.$$.update = () => {
		$: $$invalidate(2, classes = classNames(className, "progressbar", { "progressbar-infinite": infinite }, colorClasses($$props)));

		if ($$self.$$.dirty & /*progress*/ 1) {
			$: $$invalidate(3, transformStyle = {
				transform: progress ? `translate3d(${-100 + progress}%, 0, 0)` : "",
				WebkitTransform: progress ? `translate3d(${-100 + progress}%, 0, 0)` : ""
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		progress,
		el,
		classes,
		transformStyle,
		$$restProps,
		className,
		infinite,
		set,
		span1_binding
	];
}

class Progressbar extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 5,
			progress: 0,
			infinite: 6,
			set: 7
		});
	}

	get set() {
		return this.$$.ctx[7];
	}
}

export default Progressbar;