/* treeview-item.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_attributes,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy } from "svelte";

import {
	colorClasses,
	routerAttrs,
	routerClasses,
	actionsClasses,
	actionsAttrs
} from "../shared/mixins";

import { classNames, extend, plainText, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app, f7ready } from "../shared/f7";
import { useIcon } from "../shared/use-icon";
import UseIcon from "./use-icon";
const get_children_slot_changes = dirty => ({});
const get_children_slot_context = ctx => ({});
const get_children_start_slot_changes = dirty => ({});
const get_children_start_slot_context = ctx => ({});
const get_root_end_slot_changes_1 = dirty => ({});
const get_root_end_slot_context_1 = ctx => ({});
const get_root_slot_changes_1 = dirty => ({});
const get_root_slot_context_1 = ctx => ({});
const get_content_end_slot_changes_1 = dirty => ({});
const get_content_end_slot_context_1 = ctx => ({});
const get_content_slot_changes_1 = dirty => ({});
const get_content_slot_context_1 = ctx => ({});
const get_label_slot_changes_1 = dirty => ({});
const get_label_slot_context_1 = ctx => ({});
const get_label_start_slot_changes_1 = dirty => ({});
const get_label_start_slot_context_1 = ctx => ({});
const get_media_slot_changes_1 = dirty => ({});
const get_media_slot_context_1 = ctx => ({});
const get_content_start_slot_changes_1 = dirty => ({});
const get_content_start_slot_context_1 = ctx => ({});
const get_root_start_slot_changes_1 = dirty => ({});
const get_root_start_slot_context_1 = ctx => ({});
const get_root_end_slot_changes = dirty => ({});
const get_root_end_slot_context = ctx => ({});
const get_root_slot_changes = dirty => ({});
const get_root_slot_context = ctx => ({});
const get_content_end_slot_changes = dirty => ({});
const get_content_end_slot_context = ctx => ({});
const get_content_slot_changes = dirty => ({});
const get_content_slot_context = ctx => ({});
const get_label_slot_changes = dirty => ({});
const get_label_slot_context = ctx => ({});
const get_label_start_slot_changes = dirty => ({});
const get_label_start_slot_context = ctx => ({});
const get_media_slot_changes = dirty => ({});
const get_media_slot_context = ctx => ({});
const get_content_start_slot_changes = dirty => ({});
const get_content_start_slot_context = ctx => ({});
const get_root_start_slot_changes = dirty => ({});
const get_root_start_slot_context = ctx => ({});

// (130:2) {:else}
function create_else_block(ctx) {
	let a;
	let t0;
	let t1;
	let div1;
	let t2;
	let t3;
	let t4;
	let div0;
	let t5;
	let t6_value = plainText(/*label*/ ctx[0]) + "";
	let t6;
	let t7;
	let t8;
	let t9;
	let t10;
	let t11;
	let current;
	let mounted;
	let dispose;
	const root_start_slot_template = /*#slots*/ ctx[20]["root-start"];
	const root_start_slot = create_slot(root_start_slot_template, ctx, /*$$scope*/ ctx[19], get_root_start_slot_context_1);
	let if_block0 = /*needToggle*/ ctx[6] && create_if_block_5(ctx);
	const content_start_slot_template = /*#slots*/ ctx[20]["content-start"];
	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[19], get_content_start_slot_context_1);
	let if_block1 = /*icon*/ ctx[7] && create_if_block_4(ctx);
	const media_slot_template = /*#slots*/ ctx[20].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[19], get_media_slot_context_1);
	const label_start_slot_template = /*#slots*/ ctx[20]["label-start"];
	const label_start_slot = create_slot(label_start_slot_template, ctx, /*$$scope*/ ctx[19], get_label_start_slot_context_1);
	const label_slot_template = /*#slots*/ ctx[20].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[19], get_label_slot_context_1);
	const content_slot_template = /*#slots*/ ctx[20].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[19], get_content_slot_context_1);
	const content_end_slot_template = /*#slots*/ ctx[20]["content-end"];
	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[19], get_content_end_slot_context_1);
	const root_slot_template = /*#slots*/ ctx[20].root;
	const root_slot = create_slot(root_slot_template, ctx, /*$$scope*/ ctx[19], get_root_slot_context_1);
	const root_end_slot_template = /*#slots*/ ctx[20]["root-end"];
	const root_end_slot = create_slot(root_end_slot_template, ctx, /*$$scope*/ ctx[19], get_root_end_slot_context_1);
	let a_levels = [{ class: /*itemRootClasses*/ ctx[4] }, /*itemRootAttrs*/ ctx[5]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (root_start_slot) root_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			div1 = element("div");
			if (content_start_slot) content_start_slot.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (media_slot) media_slot.c();
			t4 = space();
			div0 = element("div");
			if (label_start_slot) label_start_slot.c();
			t5 = space();
			t6 = text(t6_value);
			t7 = space();
			if (label_slot) label_slot.c();
			t8 = space();
			if (content_slot) content_slot.c();
			t9 = space();
			if (content_end_slot) content_end_slot.c();
			t10 = space();
			if (root_slot) root_slot.c();
			t11 = space();
			if (root_end_slot) root_end_slot.c();
			attr(div0, "class", "treeview-item-label");
			attr(div1, "class", "treeview-item-content");
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (root_start_slot) {
				root_start_slot.m(a, null);
			}

			append(a, t0);
			if (if_block0) if_block0.m(a, null);
			append(a, t1);
			append(a, div1);

			if (content_start_slot) {
				content_start_slot.m(div1, null);
			}

			append(div1, t2);
			if (if_block1) if_block1.m(div1, null);
			append(div1, t3);

			if (media_slot) {
				media_slot.m(div1, null);
			}

			append(div1, t4);
			append(div1, div0);

			if (label_start_slot) {
				label_start_slot.m(div0, null);
			}

			append(div0, t5);
			append(div0, t6);
			append(div0, t7);

			if (label_slot) {
				label_slot.m(div0, null);
			}

			append(div1, t8);

			if (content_slot) {
				content_slot.m(div1, null);
			}

			append(div1, t9);

			if (content_end_slot) {
				content_end_slot.m(div1, null);
			}

			append(a, t10);

			if (root_slot) {
				root_slot.m(a, null);
			}

			append(a, t11);

			if (root_end_slot) {
				root_end_slot.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*onClick*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (root_start_slot) {
				if (root_start_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(root_start_slot, root_start_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_root_start_slot_changes_1, get_root_start_slot_context_1);
				}
			}

			if (/*needToggle*/ ctx[6]) {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					if_block0.m(a, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (content_start_slot) {
				if (content_start_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(content_start_slot, content_start_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_content_start_slot_changes_1, get_content_start_slot_context_1);
				}
			}

			if (/*icon*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*icon*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (media_slot) {
				if (media_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_media_slot_changes_1, get_media_slot_context_1);
				}
			}

			if (label_start_slot) {
				if (label_start_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(label_start_slot, label_start_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_label_start_slot_changes_1, get_label_start_slot_context_1);
				}
			}

			if ((!current || dirty & /*label*/ 1) && t6_value !== (t6_value = plainText(/*label*/ ctx[0]) + "")) set_data(t6, t6_value);

			if (label_slot) {
				if (label_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(label_slot, label_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_label_slot_changes_1, get_label_slot_context_1);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_content_slot_changes_1, get_content_slot_context_1);
				}
			}

			if (content_end_slot) {
				if (content_end_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(content_end_slot, content_end_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_content_end_slot_changes_1, get_content_end_slot_context_1);
				}
			}

			if (root_slot) {
				if (root_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(root_slot, root_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_root_slot_changes_1, get_root_slot_context_1);
				}
			}

			if (root_end_slot) {
				if (root_end_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(root_end_slot, root_end_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_root_end_slot_changes_1, get_root_end_slot_context_1);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*itemRootClasses*/ 16) && { class: /*itemRootClasses*/ ctx[4] },
				dirty & /*itemRootAttrs*/ 32 && /*itemRootAttrs*/ ctx[5]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(root_start_slot, local);
			transition_in(content_start_slot, local);
			transition_in(if_block1);
			transition_in(media_slot, local);
			transition_in(label_start_slot, local);
			transition_in(label_slot, local);
			transition_in(content_slot, local);
			transition_in(content_end_slot, local);
			transition_in(root_slot, local);
			transition_in(root_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(root_start_slot, local);
			transition_out(content_start_slot, local);
			transition_out(if_block1);
			transition_out(media_slot, local);
			transition_out(label_start_slot, local);
			transition_out(label_slot, local);
			transition_out(content_slot, local);
			transition_out(content_end_slot, local);
			transition_out(root_slot, local);
			transition_out(root_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (root_start_slot) root_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (content_start_slot) content_start_slot.d(detaching);
			if (if_block1) if_block1.d();
			if (media_slot) media_slot.d(detaching);
			if (label_start_slot) label_start_slot.d(detaching);
			if (label_slot) label_slot.d(detaching);
			if (content_slot) content_slot.d(detaching);
			if (content_end_slot) content_end_slot.d(detaching);
			if (root_slot) root_slot.d(detaching);
			if (root_end_slot) root_end_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

// (107:2) {#if treeviewRootTag === 'div'}
function create_if_block_1(ctx) {
	let div2;
	let t0;
	let t1;
	let div1;
	let t2;
	let t3;
	let t4;
	let div0;
	let t5;
	let t6_value = plainText(/*label*/ ctx[0]) + "";
	let t6;
	let t7;
	let t8;
	let t9;
	let t10;
	let t11;
	let current;
	let mounted;
	let dispose;
	const root_start_slot_template = /*#slots*/ ctx[20]["root-start"];
	const root_start_slot = create_slot(root_start_slot_template, ctx, /*$$scope*/ ctx[19], get_root_start_slot_context);
	let if_block0 = /*needToggle*/ ctx[6] && create_if_block_3(ctx);
	const content_start_slot_template = /*#slots*/ ctx[20]["content-start"];
	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[19], get_content_start_slot_context);
	let if_block1 = /*icon*/ ctx[7] && create_if_block_2(ctx);
	const media_slot_template = /*#slots*/ ctx[20].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[19], get_media_slot_context);
	const label_start_slot_template = /*#slots*/ ctx[20]["label-start"];
	const label_start_slot = create_slot(label_start_slot_template, ctx, /*$$scope*/ ctx[19], get_label_start_slot_context);
	const label_slot_template = /*#slots*/ ctx[20].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[19], get_label_slot_context);
	const content_slot_template = /*#slots*/ ctx[20].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[19], get_content_slot_context);
	const content_end_slot_template = /*#slots*/ ctx[20]["content-end"];
	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[19], get_content_end_slot_context);
	const root_slot_template = /*#slots*/ ctx[20].root;
	const root_slot = create_slot(root_slot_template, ctx, /*$$scope*/ ctx[19], get_root_slot_context);
	const root_end_slot_template = /*#slots*/ ctx[20]["root-end"];
	const root_end_slot = create_slot(root_end_slot_template, ctx, /*$$scope*/ ctx[19], get_root_end_slot_context);
	let div2_levels = [{ class: /*itemRootClasses*/ ctx[4] }, /*itemRootAttrs*/ ctx[5]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			if (root_start_slot) root_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			div1 = element("div");
			if (content_start_slot) content_start_slot.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (media_slot) media_slot.c();
			t4 = space();
			div0 = element("div");
			if (label_start_slot) label_start_slot.c();
			t5 = space();
			t6 = text(t6_value);
			t7 = space();
			if (label_slot) label_slot.c();
			t8 = space();
			if (content_slot) content_slot.c();
			t9 = space();
			if (content_end_slot) content_end_slot.c();
			t10 = space();
			if (root_slot) root_slot.c();
			t11 = space();
			if (root_end_slot) root_end_slot.c();
			attr(div0, "class", "treeview-item-label");
			attr(div1, "class", "treeview-item-content");
			set_attributes(div2, div2_data);
		},
		m(target, anchor) {
			insert(target, div2, anchor);

			if (root_start_slot) {
				root_start_slot.m(div2, null);
			}

			append(div2, t0);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t1);
			append(div2, div1);

			if (content_start_slot) {
				content_start_slot.m(div1, null);
			}

			append(div1, t2);
			if (if_block1) if_block1.m(div1, null);
			append(div1, t3);

			if (media_slot) {
				media_slot.m(div1, null);
			}

			append(div1, t4);
			append(div1, div0);

			if (label_start_slot) {
				label_start_slot.m(div0, null);
			}

			append(div0, t5);
			append(div0, t6);
			append(div0, t7);

			if (label_slot) {
				label_slot.m(div0, null);
			}

			append(div1, t8);

			if (content_slot) {
				content_slot.m(div1, null);
			}

			append(div1, t9);

			if (content_end_slot) {
				content_end_slot.m(div1, null);
			}

			append(div2, t10);

			if (root_slot) {
				root_slot.m(div2, null);
			}

			append(div2, t11);

			if (root_end_slot) {
				root_end_slot.m(div2, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(div2, "click", /*onClick*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (root_start_slot) {
				if (root_start_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(root_start_slot, root_start_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_root_start_slot_changes, get_root_start_slot_context);
				}
			}

			if (/*needToggle*/ ctx[6]) {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(div2, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (content_start_slot) {
				if (content_start_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(content_start_slot, content_start_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_content_start_slot_changes, get_content_start_slot_context);
				}
			}

			if (/*icon*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*icon*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (media_slot) {
				if (media_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_media_slot_changes, get_media_slot_context);
				}
			}

			if (label_start_slot) {
				if (label_start_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(label_start_slot, label_start_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_label_start_slot_changes, get_label_start_slot_context);
				}
			}

			if ((!current || dirty & /*label*/ 1) && t6_value !== (t6_value = plainText(/*label*/ ctx[0]) + "")) set_data(t6, t6_value);

			if (label_slot) {
				if (label_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(label_slot, label_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_label_slot_changes, get_label_slot_context);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_content_slot_changes, get_content_slot_context);
				}
			}

			if (content_end_slot) {
				if (content_end_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(content_end_slot, content_end_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_content_end_slot_changes, get_content_end_slot_context);
				}
			}

			if (root_slot) {
				if (root_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(root_slot, root_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_root_slot_changes, get_root_slot_context);
				}
			}

			if (root_end_slot) {
				if (root_end_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(root_end_slot, root_end_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_root_end_slot_changes, get_root_end_slot_context);
				}
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
				(!current || dirty & /*itemRootClasses*/ 16) && { class: /*itemRootClasses*/ ctx[4] },
				dirty & /*itemRootAttrs*/ 32 && /*itemRootAttrs*/ ctx[5]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(root_start_slot, local);
			transition_in(content_start_slot, local);
			transition_in(if_block1);
			transition_in(media_slot, local);
			transition_in(label_start_slot, local);
			transition_in(label_slot, local);
			transition_in(content_slot, local);
			transition_in(content_end_slot, local);
			transition_in(root_slot, local);
			transition_in(root_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(root_start_slot, local);
			transition_out(content_start_slot, local);
			transition_out(if_block1);
			transition_out(media_slot, local);
			transition_out(label_start_slot, local);
			transition_out(label_slot, local);
			transition_out(content_slot, local);
			transition_out(content_end_slot, local);
			transition_out(root_slot, local);
			transition_out(root_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (root_start_slot) root_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (content_start_slot) content_start_slot.d(detaching);
			if (if_block1) if_block1.d();
			if (media_slot) media_slot.d(detaching);
			if (label_start_slot) label_start_slot.d(detaching);
			if (label_slot) label_slot.d(detaching);
			if (content_slot) content_slot.d(detaching);
			if (content_end_slot) content_end_slot.d(detaching);
			if (root_slot) root_slot.d(detaching);
			if (root_end_slot) root_end_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

// (133:6) {#if needToggle}
function create_if_block_5(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "treeview-toggle");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (138:8) {#if icon}
function create_if_block_4(ctx) {
	let useicon;
	let current;
	useicon = new UseIcon({ props: { icon: /*icon*/ ctx[7] } });

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty & /*icon*/ 128) useicon_changes.icon = /*icon*/ ctx[7];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (110:6) {#if needToggle}
function create_if_block_3(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "treeview-toggle");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (115:8) {#if icon}
function create_if_block_2(ctx) {
	let useicon;
	let current;
	useicon = new UseIcon({ props: { icon: /*icon*/ ctx[7] } });

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty & /*icon*/ 128) useicon_changes.icon = /*icon*/ ctx[7];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (154:2) {#if hasChildren}
function create_if_block(ctx) {
	let div;
	let t0;
	let t1;
	let current;
	const children_start_slot_template = /*#slots*/ ctx[20]["children-start"];
	const children_start_slot = create_slot(children_start_slot_template, ctx, /*$$scope*/ ctx[19], get_children_start_slot_context);
	const default_slot_template = /*#slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);
	const children_slot_template = /*#slots*/ ctx[20].children;
	const children_slot = create_slot(children_slot_template, ctx, /*$$scope*/ ctx[19], get_children_slot_context);

	return {
		c() {
			div = element("div");
			if (children_start_slot) children_start_slot.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			if (children_slot) children_slot.c();
			attr(div, "class", "treeview-item-children");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (children_start_slot) {
				children_start_slot.m(div, null);
			}

			append(div, t0);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(div, t1);

			if (children_slot) {
				children_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (children_start_slot) {
				if (children_start_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(children_start_slot, children_start_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_children_start_slot_changes, get_children_start_slot_context);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
				}
			}

			if (children_slot) {
				if (children_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
					update_slot(children_slot, children_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_children_slot_changes, get_children_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(children_start_slot, local);
			transition_in(default_slot, local);
			transition_in(children_slot, local);
			current = true;
		},
		o(local) {
			transition_out(children_start_slot, local);
			transition_out(default_slot, local);
			transition_out(children_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (children_start_slot) children_start_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
			if (children_slot) children_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current_block_type_index;
	let if_block0;
	let t;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*treeviewRootTag*/ ctx[8] === "div") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*hasChildren*/ ctx[1] && create_if_block(ctx);
	let div_levels = [{ class: /*classes*/ ctx[3] }, restProps(/*$$restProps*/ ctx[10])];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			append(div, t);
			if (if_block1) if_block1.m(div, null);
			/*div_binding*/ ctx[21](div);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(div, t);
			}

			if (/*hasChildren*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*hasChildren*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes*/ 8) && { class: /*classes*/ ctx[3] },
				dirty & /*$$restProps*/ 1024 && restProps(/*$$restProps*/ ctx[10])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
			/*div_binding*/ ctx[21](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;
	let itemRootClasses;
	let itemRootAttrs;
	let hasChildren;
	let needToggle;
	let icon;
	let treeviewRootTag;

	const omit_props_names = [
		"class","toggle","itemToggle","selectable","selected","opened","label","loadChildren","link"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { toggle = undefined } = $$props;
	let { itemToggle = false } = $$props;
	let { selectable = false } = $$props;
	let { selected = false } = $$props;
	let { opened = false } = $$props;
	let { label = undefined } = $$props;
	let { loadChildren = false } = $$props;
	let { link = undefined } = $$props;
	let el;

	function onClick(e) {
		emit("click", [e]);
	}

	function onOpen(itemEl) {
		if (itemEl !== el) return;
		emit("treeviewOpen", [el]);
	}

	function onClose(itemEl) {
		if (itemEl !== el) return;
		emit("treeviewClose", [el]);
	}

	function onLoadChildren(itemEl, done) {
		if (itemEl !== el) return;
		emit("treeviewLoadChildren", [el, done]);
	}

	onMount(() => {
		if (!el) return;

		f7ready(() => {
			app.f7.on("treeviewOpen", onOpen);
			app.f7.on("treeviewClose", onClose);
			app.f7.on("treeviewLoadChildren", onLoadChildren);
		});
	});

	onDestroy(() => {
		if (!el || !app.f7) return;
		app.f7.off("treeviewOpen", onOpen);
		app.f7.off("treeviewClose", onClose);
		app.f7.off("treeviewLoadChildren", onLoadChildren);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(2, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(26, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(11, className = $$new_props.class);
		if ("toggle" in $$new_props) $$invalidate(12, toggle = $$new_props.toggle);
		if ("itemToggle" in $$new_props) $$invalidate(13, itemToggle = $$new_props.itemToggle);
		if ("selectable" in $$new_props) $$invalidate(14, selectable = $$new_props.selectable);
		if ("selected" in $$new_props) $$invalidate(15, selected = $$new_props.selected);
		if ("opened" in $$new_props) $$invalidate(16, opened = $$new_props.opened);
		if ("label" in $$new_props) $$invalidate(0, label = $$new_props.label);
		if ("loadChildren" in $$new_props) $$invalidate(17, loadChildren = $$new_props.loadChildren);
		if ("link" in $$new_props) $$invalidate(18, link = $$new_props.link);
		if ("$$scope" in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(3, classes = classNames(
			className,
			"treeview-item",
			{
				"treeview-item-opened": opened,
				"treeview-load-children": loadChildren
			},
			colorClasses($$props)
		));

		$: $$invalidate(4, itemRootClasses = classNames(
			"treeview-item-root",
			{
				"treeview-item-selectable": selectable,
				"treeview-item-selected": selected,
				"treeview-item-toggle": itemToggle
			},
			routerClasses($$props),
			actionsClasses($$props)
		));

		$: $$invalidate(5, itemRootAttrs = extend(
			{
				href: link === true ? "#" : link || undefined
			},
			routerAttrs($$props),
			actionsAttrs($$props)
		));

		if ($$self.$$.dirty & /*toggle, hasChildren*/ 4098) {
			/* eslint-enable no-undef */
			$: $$invalidate(6, needToggle = typeof toggle === "undefined" ? hasChildren : toggle);
		}

		$: $$invalidate(7, icon = useIcon($$props));

		if ($$self.$$.dirty & /*link*/ 262144) {
			$: $$invalidate(8, treeviewRootTag = link || link === "" ? "a" : "div");
		}
	};

	$: $$invalidate(1, hasChildren = $$slots.default || $$slots.children || $$slots["children-start"]);
	$$props = exclude_internal_props($$props);

	return [
		label,
		hasChildren,
		el,
		classes,
		itemRootClasses,
		itemRootAttrs,
		needToggle,
		icon,
		treeviewRootTag,
		onClick,
		$$restProps,
		className,
		toggle,
		itemToggle,
		selectable,
		selected,
		opened,
		loadChildren,
		link,
		$$scope,
		slots,
		div_binding
	];
}

class Treeview_item extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 11,
			toggle: 12,
			itemToggle: 13,
			selectable: 14,
			selected: 15,
			opened: 16,
			label: 0,
			loadChildren: 17,
			link: 18
		});
	}
}

export default Treeview_item;