/* pie-chart.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	destroy_block,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_attributes,
	set_style,
	space,
	svg_element,
	transition_in,
	transition_out,
	update_keyed_each,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onDestroy } from "svelte";
import { classNames, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app } from "../shared/f7";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[27] = list[i];
	child_ctx[29] = i;
	return child_ctx;
}

// (160:4) {#each paths as path, index (index)}
function create_each_block(key_1, ctx) {
	let path;
	let path_d_value;
	let path_fill_value;
	let path_data_index_value;
	let path_class_value;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[13](/*index*/ ctx[29]);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[14](/*index*/ ctx[29]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			path = svg_element("path");
			attr(path, "d", path_d_value = /*path*/ ctx[27].points);
			attr(path, "fill", path_fill_value = /*path*/ ctx[27].color);
			attr(path, "data-index", path_data_index_value = /*index*/ ctx[29]);

			attr(path, "class", path_class_value = classNames({
				"pie-chart-hidden": /*currentIndex*/ ctx[1] !== null && /*currentIndex*/ ctx[1] !== /*index*/ ctx[29]
			}));

			this.first = path;
		},
		m(target, anchor) {
			insert(target, path, anchor);

			if (!mounted) {
				dispose = [
					listen(path, "click", click_handler),
					listen(path, "mouseenter", mouseenter_handler),
					listen(path, "mouseleave", /*mouseleave_handler*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*paths*/ 16 && path_d_value !== (path_d_value = /*path*/ ctx[27].points)) {
				attr(path, "d", path_d_value);
			}

			if (dirty & /*paths*/ 16 && path_fill_value !== (path_fill_value = /*path*/ ctx[27].color)) {
				attr(path, "fill", path_fill_value);
			}

			if (dirty & /*paths*/ 16 && path_data_index_value !== (path_data_index_value = /*index*/ ctx[29])) {
				attr(path, "data-index", path_data_index_value);
			}

			if (dirty & /*currentIndex, paths*/ 18 && path_class_value !== (path_class_value = classNames({
				"pie-chart-hidden": /*currentIndex*/ ctx[1] !== null && /*currentIndex*/ ctx[1] !== /*index*/ ctx[29]
			}))) {
				attr(path, "class", path_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(path);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let svg;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let svg_viewBox_value;
	let t;
	let current;
	let each_value = /*paths*/ ctx[4];
	const get_key = ctx => /*index*/ ctx[29];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
	let div_levels = [{ class: /*classes*/ ctx[3] }, restProps(/*$$restProps*/ ctx[6])];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			svg = svg_element("svg");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (default_slot) default_slot.c();
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*size*/ ctx[0]);
			attr(svg, "height", /*size*/ ctx[0]);
			attr(svg, "viewBox", svg_viewBox_value = `-${/*size*/ ctx[0] / 3} -${/*size*/ ctx[0] / 3} ${/*size*/ ctx[0] * 2 / 3} ${/*size*/ ctx[0] * 2 / 3}`);
			set_style(svg, "transform", "rotate(-90deg)");
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, svg);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(svg, null);
			}

			append(div, t);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[16](div);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*paths, classNames, currentIndex, setCurrentIndex*/ 50) {
				each_value = /*paths*/ ctx[4];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, svg, destroy_block, create_each_block, null, get_each_context);
			}

			if (!current || dirty & /*size*/ 1) {
				attr(svg, "width", /*size*/ ctx[0]);
			}

			if (!current || dirty & /*size*/ 1) {
				attr(svg, "height", /*size*/ ctx[0]);
			}

			if (!current || dirty & /*size*/ 1 && svg_viewBox_value !== (svg_viewBox_value = `-${/*size*/ ctx[0] / 3} -${/*size*/ ctx[0] / 3} ${/*size*/ ctx[0] * 2 / 3} ${/*size*/ ctx[0] * 2 / 3}`)) {
				attr(svg, "viewBox", svg_viewBox_value);
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes*/ 8) && { class: /*classes*/ ctx[3] },
				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[16](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;
	let paths;
	const omit_props_names = ["class","size","tooltip","datasets","formatTooltip"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { size = 320 } = $$props;
	let { tooltip = false } = $$props;
	let { datasets = [] } = $$props;
	let { formatTooltip = undefined } = $$props;
	let el;
	let currentIndex = null;
	let previousIndex = null;
	let f7Tooltip = null;
	let timeout = null;

	const setCurrentIndex = index => {
		if (index === null) {
			timeout = setTimeout(() => {
				previousIndex = currentIndex;
				$$invalidate(1, currentIndex = index);
			});
		} else {
			clearTimeout(timeout);
			previousIndex = currentIndex;
			$$invalidate(1, currentIndex = index);
		}
	};

	const getSummValue = () => {
		let summ = 0;

		datasets.map(d => d.value || 0).forEach(value => {
			summ += value;
		});

		return summ;
	};

	const getPaths = () => {
		const paths = [];
		let cumulativePercentage = 0;

		function getCoordinatesForPercentage(percentage) {
			const x = Math.cos(2 * Math.PI * percentage) * (size / 3);
			const y = Math.sin(2 * Math.PI * percentage) * (size / 3);
			return [x, y];
		}

		datasets.forEach(({ value, label, color }) => {
			const percentage = value / getSummValue();
			const [startX, startY] = getCoordinatesForPercentage(cumulativePercentage);
			cumulativePercentage += percentage;
			const [endX, endY] = getCoordinatesForPercentage(cumulativePercentage);
			const largeArcFlag = percentage > 0.5 ? 1 : 0;

			const points = [
				`M ${startX} ${startY}`,
				`A ${size / 3} ${size / 3} 0 ${largeArcFlag} 1 ${endX} ${endY}`,
				"L 0 0"
			].join(" "); // Move
			// Arc
			// Line

			paths.push({ points, label, color });
		});

		return paths;
	};

	const formatTooltipText = () => {
		if (currentIndex === null) return "";
		const { value, label, color } = datasets[currentIndex];
		const percentage = value / getSummValue() * 100;

		const round = v => {
			if (parseInt(v, 10) === v) return v;
			return Math.round(v * 100) / 100;
		};

		if (formatTooltip) {
			return formatTooltip({
				index: currentIndex,
				value,
				label,
				color,
				percentage
			});
		}

		const tooltipText = `${label ? `${label}: ` : ""}${round(value)} (${round(percentage)}%)`;

		return `
      <div class="pie-chart-tooltip-label">
        <span class="pie-chart-tooltip-color" style="background-color: ${color};"></span> ${tooltipText}
      </div>
    `;
	};

	const setTooltip = () => {
		if (currentIndex === null && !f7Tooltip) return;
		if (!tooltip || !el || !app.f7) return;

		if (currentIndex !== null && !f7Tooltip) {
			f7Tooltip = app.f7.tooltip.create({
				trigger: "manual",
				containerEl: el,
				targetEl: el.querySelector(`path[data-index="${currentIndex}"]`),
				text: formatTooltipText(),
				cssClass: "pie-chart-tooltip"
			});

			f7Tooltip.show();
			return;
		}

		if (!f7Tooltip) return;

		if (currentIndex !== null) {
			f7Tooltip.setText(formatTooltipText());
			f7Tooltip.setTargetEl(el.querySelector(`path[data-index="${currentIndex}"]`));
			f7Tooltip.show();
		} else {
			f7Tooltip.hide();
		}
	};

	const watchCurrentIndex = () => {
		if (currentIndex === previousIndex) return;
		emit("select", [currentIndex, datasets[currentIndex]]);
		setTooltip();
	};

	onDestroy(() => {
		if (f7Tooltip && f7Tooltip.destroy) {
			f7Tooltip.destroy();
		}

		f7Tooltip = null;
	});

	const click_handler = index => setCurrentIndex(index);
	const mouseenter_handler = index => setCurrentIndex(index);
	const mouseleave_handler = () => setCurrentIndex(null);

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(2, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(26, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(7, className = $$new_props.class);
		if ("size" in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ("tooltip" in $$new_props) $$invalidate(8, tooltip = $$new_props.tooltip);
		if ("datasets" in $$new_props) $$invalidate(9, datasets = $$new_props.datasets);
		if ("formatTooltip" in $$new_props) $$invalidate(10, formatTooltip = $$new_props.formatTooltip);
		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 128) {
			$: $$invalidate(3, classes = classNames("pie-chart", className));
		}

		if ($$self.$$.dirty & /*datasets*/ 512) {
			$: $$invalidate(4, paths = getPaths(datasets));
		}

		if ($$self.$$.dirty & /*currentIndex*/ 2) {
			$: watchCurrentIndex(currentIndex);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		size,
		currentIndex,
		el,
		classes,
		paths,
		setCurrentIndex,
		$$restProps,
		className,
		tooltip,
		datasets,
		formatTooltip,
		$$scope,
		slots,
		click_handler,
		mouseenter_handler,
		mouseleave_handler,
		div_binding
	];
}

class Pie_chart extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 7,
			size: 0,
			tooltip: 8,
			datasets: 9,
			formatTooltip: 10
		});
	}
}

export default Pie_chart;