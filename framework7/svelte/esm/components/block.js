/* block.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	assign,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { useTab } from "../shared/use-tab";

function create_fragment(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[21].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);
	let div_levels = [{ class: /*classes*/ ctx[1] }, restProps(/*$$restProps*/ ctx[2])];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[22](div);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1048576)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[20], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
				dirty & /*$$restProps*/ 4 && restProps(/*$$restProps*/ ctx[2])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[22](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;

	const omit_props_names = [
		"inset","xsmallInset","smallInset","mediumInset","largeInset","xlargeInset","strong","tabs","tab","tabActive","accordionList","accordionOpposite","noHairlines","noHairlinesMd","noHairlinesIos","noHairlinesAurora","class"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { inset = false } = $$props;
	let { xsmallInset = false } = $$props;
	let { smallInset = false } = $$props;
	let { mediumInset = false } = $$props;
	let { largeInset = false } = $$props;
	let { xlargeInset = false } = $$props;
	let { strong = false } = $$props;
	let { tabs = false } = $$props;
	let { tab = false } = $$props;
	let { tabActive = false } = $$props;
	let { accordionList = false } = $$props;
	let { accordionOpposite = false } = $$props;
	let { noHairlines = false } = $$props;
	let { noHairlinesMd = false } = $$props;
	let { noHairlinesIos = false } = $$props;
	let { noHairlinesAurora = false } = $$props;
	let { class: className = undefined } = $$props;
	let el;
	useTab(() => el, emit);

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(0, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(24, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("inset" in $$new_props) $$invalidate(3, inset = $$new_props.inset);
		if ("xsmallInset" in $$new_props) $$invalidate(4, xsmallInset = $$new_props.xsmallInset);
		if ("smallInset" in $$new_props) $$invalidate(5, smallInset = $$new_props.smallInset);
		if ("mediumInset" in $$new_props) $$invalidate(6, mediumInset = $$new_props.mediumInset);
		if ("largeInset" in $$new_props) $$invalidate(7, largeInset = $$new_props.largeInset);
		if ("xlargeInset" in $$new_props) $$invalidate(8, xlargeInset = $$new_props.xlargeInset);
		if ("strong" in $$new_props) $$invalidate(9, strong = $$new_props.strong);
		if ("tabs" in $$new_props) $$invalidate(10, tabs = $$new_props.tabs);
		if ("tab" in $$new_props) $$invalidate(11, tab = $$new_props.tab);
		if ("tabActive" in $$new_props) $$invalidate(12, tabActive = $$new_props.tabActive);
		if ("accordionList" in $$new_props) $$invalidate(13, accordionList = $$new_props.accordionList);
		if ("accordionOpposite" in $$new_props) $$invalidate(14, accordionOpposite = $$new_props.accordionOpposite);
		if ("noHairlines" in $$new_props) $$invalidate(15, noHairlines = $$new_props.noHairlines);
		if ("noHairlinesMd" in $$new_props) $$invalidate(16, noHairlinesMd = $$new_props.noHairlinesMd);
		if ("noHairlinesIos" in $$new_props) $$invalidate(17, noHairlinesIos = $$new_props.noHairlinesIos);
		if ("noHairlinesAurora" in $$new_props) $$invalidate(18, noHairlinesAurora = $$new_props.noHairlinesAurora);
		if ("class" in $$new_props) $$invalidate(19, className = $$new_props.class);
		if ("$$scope" in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(1, classes = classNames(
			className,
			"block",
			{
				inset,
				"xsmall-inset": xsmallInset,
				"small-inset": smallInset,
				"medium-inset": mediumInset,
				"large-inset": largeInset,
				"xlarge-inset": xlargeInset,
				"block-strong": strong,
				"accordion-list": accordionList,
				"accordion-opposite": accordionOpposite,
				tabs,
				tab,
				"tab-active": tabActive,
				"no-hairlines": noHairlines,
				"no-hairlines-md": noHairlinesMd,
				"no-hairlines-ios": noHairlinesIos,
				"no-hairlines-aurora": noHairlinesAurora
			},
			colorClasses($$props)
		));
	};

	$$props = exclude_internal_props($$props);

	return [
		el,
		classes,
		$$restProps,
		inset,
		xsmallInset,
		smallInset,
		mediumInset,
		largeInset,
		xlargeInset,
		strong,
		tabs,
		tab,
		tabActive,
		accordionList,
		accordionOpposite,
		noHairlines,
		noHairlinesMd,
		noHairlinesIos,
		noHairlinesAurora,
		className,
		$$scope,
		slots,
		div_binding
	];
}

class Block extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			inset: 3,
			xsmallInset: 4,
			smallInset: 5,
			mediumInset: 6,
			largeInset: 7,
			xlargeInset: 8,
			strong: 9,
			tabs: 10,
			tab: 11,
			tabActive: 12,
			accordionList: 13,
			accordionOpposite: 14,
			noHairlines: 15,
			noHairlinesMd: 16,
			noHairlinesIos: 17,
			noHairlinesAurora: 18,
			class: 19
		});
	}
}

export default Block;