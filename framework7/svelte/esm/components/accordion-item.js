/* accordion-item.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	assign,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { app, f7ready } from "../shared/f7";

function create_fragment(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let div_levels = [{ class: /*classes*/ ctx[1] }, restProps(/*$$restProps*/ ctx[2])];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[7](div);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
				dirty & /*$$restProps*/ 4 && restProps(/*$$restProps*/ ctx[2])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[7](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class","opened"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { opened = undefined } = $$props;
	let el;

	function onBeforeOpen(accEl, prevent) {
		if (accEl !== el) return;
		emit("accordionBeforeOpen", [prevent]);
	}

	function onOpen(accEl) {
		if (accEl !== el) return;
		emit("accordionOpen");
	}

	function onOpened(accEl) {
		if (accEl !== el) return;
		emit("accordionOpened");
	}

	function onBeforeClose(accEl, prevent) {
		if (accEl !== el) return;
		emit("accordionBeforeClose", [prevent]);
	}

	function onClose(accEl) {
		if (accEl !== el) return;
		emit("accordionClose");
	}

	function onClosed(accEl) {
		if (accEl !== el) return;
		emit("accordionClosed");
	}

	onMount(() => {
		f7ready(() => {
			app.f7.on("accordionBeforeOpen", onBeforeOpen);
			app.f7.on("accordionOpen", onOpen);
			app.f7.on("accordionOpened", onOpened);
			app.f7.on("accordionBeforeClose", onBeforeClose);
			app.f7.on("accordionClose", onClose);
			app.f7.on("accordionClosed", onClosed);
		});
	});

	onDestroy(() => {
		if (!app.f7 || !el) return;
		app.f7.off("accordionBeforeOpen", onBeforeOpen);
		app.f7.off("accordionOpen", onOpen);
		app.f7.off("accordionOpened", onOpened);
		app.f7.off("accordionBeforeClose", onBeforeClose);
		app.f7.off("accordionClose", onClose);
		app.f7.off("accordionClosed", onClosed);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(0, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(15, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ("opened" in $$new_props) $$invalidate(4, opened = $$new_props.opened);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$: $$invalidate(1, classes = classNames(className, "accordion-item", { "accordion-item-opened": opened }, colorClasses($$props)));
	};

	$$props = exclude_internal_props($$props);
	return [el, classes, $$restProps, className, opened, $$scope, slots, div_binding];
}

class Accordion_item extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { class: 3, opened: 4 });
	}
}

export default Accordion_item;